{"version":3,"names":[],"mappings":"","sources":["bootstrap-validator.bundle.js"],"sourcesContent":["/*!\r\n * BootstrapValidator (http://bootstrapvalidator.com)\r\n * The best jQuery plugin to validate form fields. Designed to use with Bootstrap 3\r\n *\r\n * @version     v0.5.0, built on 2014-07-14 4:31:02 PM\r\n * @author      https://twitter.com/nghuuphuoc\r\n * @copyright   (c) 2013 - 2014 Nguyen Huu Phuoc\r\n * @license     MIT\r\n */\r\n(function($) {\r\n\tvar BootstrapValidator = function(form, options) {\r\n\t\tthis.$form   = $(form);\r\n\t\tthis.options = $.extend({}, $.fn.bootstrapValidator.DEFAULT_OPTIONS, options);\r\n\r\n\t\tthis.$invalidFields = $([]);    // Array of invalid fields\r\n\t\tthis.$submitButton  = null;     // The submit button which is clicked to submit form\r\n\r\n\t\t// Validating status\r\n\t\tthis.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';\r\n\t\tthis.STATUS_VALIDATING    = 'VALIDATING';\r\n\t\tthis.STATUS_INVALID       = 'INVALID';\r\n\t\tthis.STATUS_VALID         = 'VALID';\r\n\r\n\t\t// Determine the event that is fired when user change the field value\r\n\t\t// Most modern browsers supports input event except IE 7, 8.\r\n\t\t// IE 9 supports input event but the event is still not fired if I press the backspace key.\r\n\t\t// Get IE version\r\n\t\t// https://gist.github.com/padolsey/527683/#comment-7595\r\n\t\tvar ieVersion = (function() {\r\n\t\t\tvar v = 3, div = document.createElement('div'), a = div.all || [];\r\n\t\t\twhile (div.innerHTML = '<!--[if gt IE '+(++v)+']><br><![endif]-->', a[0]) {}\r\n\t\t\treturn v > 4 ? v : !v;\r\n\t\t}());\r\n\r\n\t\tvar el = document.createElement('div');\r\n\t\tthis._changeEvent = (ieVersion === 9 || !('oninput' in el)) ? 'keyup' : 'input';\r\n\r\n\t\t// The flag to indicate that the form is ready to submit when a remote/callback validator returns\r\n\t\tthis._submitIfValid = null;\r\n\r\n\t\t// Field elements\r\n\t\tthis._cacheFields = {};\r\n\r\n\t\tthis._init();\r\n\t};\r\n\r\n\tBootstrapValidator.prototype = {\r\n\t\tconstructor: BootstrapValidator,\r\n\r\n\t\t/**\r\n\t\t * Init form\r\n\t\t */\r\n\t\t_init: function() {\r\n\t\t\tvar that    = this,\r\n\t\t\t\toptions = {\r\n\t\t\t\t\texcluded:       this.$form.attr('data-bv-excluded'),\r\n\t\t\t\t\ttrigger:        this.$form.attr('data-bv-trigger'),\r\n\t\t\t\t\tmessage:        this.$form.attr('data-bv-message'),\r\n\t\t\t\t\tcontainer:      this.$form.attr('data-bv-container'),\r\n\t\t\t\t\tgroup:          this.$form.attr('data-bv-group'),\r\n\t\t\t\t\tsubmitButtons:  this.$form.attr('data-bv-submitbuttons'),\r\n\t\t\t\t\tthreshold:      this.$form.attr('data-bv-threshold'),\r\n\t\t\t\t\tlive:           this.$form.attr('data-bv-live'),\r\n\t\t\t\t\tonSuccess:      this.$form.attr('data-bv-onsuccess'),\r\n\t\t\t\t\tonError:        this.$form.attr('data-bv-onerror'),\r\n\t\t\t\t\tfields:         {},\r\n\t\t\t\t\tfeedbackIcons: {\r\n\t\t\t\t\t\tvalid:      this.$form.attr('data-bv-feedbackicons-valid'),\r\n\t\t\t\t\t\tinvalid:    this.$form.attr('data-bv-feedbackicons-invalid'),\r\n\t\t\t\t\t\tvalidating: this.$form.attr('data-bv-feedbackicons-validating')\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\tthis.$form\r\n\t\t\t\t// Disable client side validation in HTML 5\r\n\t\t\t\t.attr('novalidate', 'novalidate')\r\n\t\t\t\t.addClass(this.options.elementClass)\r\n\t\t\t\t// Disable the default submission first\r\n\t\t\t\t.on('submit.bv', function(e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tthat.validate();\r\n\t\t\t\t})\r\n\t\t\t\t.on('click.bv', this.options.submitButtons, function() {\r\n\t\t\t\t\tthat.$submitButton  = $(this);\r\n\t\t\t\t\t// The user just click the submit button\r\n\t\t\t\t\tthat._submitIfValid = true;\r\n\t\t\t\t})\r\n\t\t\t\t// Find all fields which have either \"name\" or \"data-bv-field\" attribute\r\n\t\t\t\t.find('[name], [data-bv-field]')\r\n\t\t\t\t.each(function() {\r\n\t\t\t\t\tvar $field = $(this),\r\n\t\t\t\t\t\tfield  = $field.attr('name') || $field.attr('data-bv-field'),\r\n\t\t\t\t\t\topts   = that._parseOptions($field);\r\n\t\t\t\t\tif (opts) {\r\n\t\t\t\t\t\t$field.attr('data-bv-field', field);\r\n\t\t\t\t\t\toptions.fields[field] = $.extend({}, opts, options.fields[field]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.options = $.extend(true, this.options, options);\r\n\t\t\tfor (var field in this.options.fields) {\r\n\t\t\t\tthis._initField(field);\r\n\t\t\t}\r\n\r\n\t\t\tthis.$form.trigger($.Event('init.form.bv'), {\r\n\t\t\t\tbv: this,\r\n\t\t\t\toptions: this.options\r\n\t\t\t});\r\n\r\n\t\t\t// Prepare the events\r\n\t\t\tif (this.options.onSuccess) {\r\n\t\t\t\tthis.$form.on('success.form.bv', function(e) {\r\n\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.onSuccess, [e]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.options.onError) {\r\n\t\t\t\tthis.$form.on('error.form.bv', function(e) {\r\n\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.onError, [e]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Parse the validator options from HTML attributes\r\n\t\t *\r\n\t\t * @param {jQuery} $field The field element\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\t_parseOptions: function($field) {\r\n\t\t\tvar field      = $field.attr('name') || $field.attr('data-bv-field'),\r\n\t\t\t\tvalidators = {},\r\n\t\t\t\tvalidator,\r\n\t\t\t\tv,          // Validator name\r\n\t\t\t\tenabled,\r\n\t\t\t\toptionName,\r\n\t\t\t\toptionValue,\r\n\t\t\t\thtml5AttrName,\r\n\t\t\t\thtml5AttrMap;\r\n\r\n\t\t\tfor (v in $.fn.bootstrapValidator.validators) {\r\n\t\t\t\tvalidator    = $.fn.bootstrapValidator.validators[v];\r\n\t\t\t\tenabled      = $field.attr('data-bv-' + v.toLowerCase()) + '';\r\n\t\t\t\thtml5AttrMap = ('function' === typeof validator.enableByHtml5) ? validator.enableByHtml5($field) : null;\r\n\r\n\t\t\t\tif ((html5AttrMap && enabled !== 'false')\r\n\t\t\t\t\t|| (html5AttrMap !== true && ('' === enabled || 'true' === enabled)))\r\n\t\t\t\t{\r\n\t\t\t\t\t// Try to parse the options via attributes\r\n\t\t\t\t\tvalidator.html5Attributes = $.extend({}, { message: 'message', onerror: 'onError', onsuccess: 'onSuccess' }, validator.html5Attributes);\r\n\t\t\t\t\tvalidators[v] = $.extend({}, html5AttrMap === true ? {} : html5AttrMap, validators[v]);\r\n\r\n\t\t\t\t\tfor (html5AttrName in validator.html5Attributes) {\r\n\t\t\t\t\t\toptionName  = validator.html5Attributes[html5AttrName];\r\n\t\t\t\t\t\toptionValue = $field.attr('data-bv-' + v.toLowerCase() + '-' + html5AttrName);\r\n\t\t\t\t\t\tif (optionValue) {\r\n\t\t\t\t\t\t\tif ('true' === optionValue) {\r\n\t\t\t\t\t\t\t\toptionValue = true;\r\n\t\t\t\t\t\t\t} else if ('false' === optionValue) {\r\n\t\t\t\t\t\t\t\toptionValue = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvalidators[v][optionName] = optionValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar opts = {\r\n\t\t\t\t\texcluded:      $field.attr('data-bv-excluded'),\r\n\t\t\t\t\tfeedbackIcons: $field.attr('data-bv-feedbackicons'),\r\n\t\t\t\t\ttrigger:       $field.attr('data-bv-trigger'),\r\n\t\t\t\t\tmessage:       $field.attr('data-bv-message'),\r\n\t\t\t\t\tcontainer:     $field.attr('data-bv-container'),\r\n\t\t\t\t\tgroup:         $field.attr('data-bv-group'),\r\n\t\t\t\t\tselector:      $field.attr('data-bv-selector'),\r\n\t\t\t\t\tthreshold:     $field.attr('data-bv-threshold'),\r\n\t\t\t\t\tonStatus:      $field.attr('data-bv-onstatus'),\r\n\t\t\t\t\tonSuccess:     $field.attr('data-bv-onsuccess'),\r\n\t\t\t\t\tonError:       $field.attr('data-bv-onerror'),\r\n\t\t\t\t\tvalidators:    validators\r\n\t\t\t\t},\r\n\t\t\t\temptyOptions    = $.isEmptyObject(opts),        // Check if the field options are set using HTML attributes\r\n\t\t\t\temptyValidators = $.isEmptyObject(validators);  // Check if the field validators are set using HTML attributes\r\n\r\n\t\t\tif (!emptyValidators || (!emptyOptions && this.options.fields && this.options.fields[field])) {\r\n\t\t\t\topts.validators = validators;\r\n\t\t\t\treturn opts;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Init field\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t */\r\n\t\t_initField: function(field) {\r\n\t\t\tvar fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tfields = field;\r\n\t\t\t\t\tfield  = field.attr('data-bv-field');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tfields = this.getFieldElements(field);\r\n\t\t\t\t\tfields.attr('data-bv-field', field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.fields[field] === null || this.options.fields[field].validators === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// We don't need to validate non-existing fields\r\n\t\t\tif (fields.length === 0) {\r\n\t\t\t\tdelete this.options.fields[field];\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar validatorName;\r\n\t\t\tfor (validatorName in this.options.fields[field].validators) {\r\n\t\t\t\tif (!$.fn.bootstrapValidator.validators[validatorName]) {\r\n\t\t\t\t\tdelete this.options.fields[field].validators[validatorName];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.options.fields[field].enabled === null) {\r\n\t\t\t\tthis.options.fields[field].enabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tvar that      = this,\r\n\t\t\t\ttotal     = fields.length,\r\n\t\t\t\ttype      = fields.attr('type'),\r\n\t\t\t\tupdateAll = (total === 1) || ('radio' === type) || ('checkbox' === type),\r\n\t\t\t\tevent     = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === fields.eq(0).get(0).tagName) ? 'change' : this._changeEvent,\r\n\t\t\t\ttrigger   = (this.options.fields[field].trigger || this.options.trigger || event).split(' '),\r\n\t\t\t\tevents    = $.map(trigger, function(item) {\r\n\t\t\t\t\treturn item + '.update.bv';\r\n\t\t\t\t}).join(' ');\r\n\r\n\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\tvar $field    = fields.eq(i),\r\n\t\t\t\t\tgroup     = this.options.fields[field].group || this.options.group,\r\n\t\t\t\t\t$parent   = $field.parents(group),\r\n\t\t\t\t// Allow user to indicate where the error messages are shown\r\n\t\t\t\t\tcontainer = this.options.fields[field].container || this.options.container,\r\n\t\t\t\t\t$message  = (container && container !== 'tooltip' && container !== 'popover') ? $(container) : this._getMessageContainer($field, group);\r\n\r\n\t\t\t\tif (container && container !== 'tooltip' && container !== 'popover') {\r\n\t\t\t\t\t$message.addClass('has-error');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Remove all error messages and feedback icons\r\n\t\t\t\t$message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove();\r\n\t\t\t\t$parent.find('i[data-bv-icon-for=\"' + field + '\"]').remove();\r\n\r\n\t\t\t\t// Whenever the user change the field value, mark it as not validated yet\r\n\t\t\t\t$field.off(events).on(events, function() {\r\n\t\t\t\t\tthat.updateStatus($(this), that.STATUS_NOT_VALIDATED);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Create help block elements for showing the error messages\r\n\t\t\t\t$field.data('bv.messages', $message);\r\n\t\t\t\tfor (validatorName in this.options.fields[field].validators) {\r\n\t\t\t\t\t$field.data('bv.result.' + validatorName, this.STATUS_NOT_VALIDATED);\r\n\r\n\t\t\t\t\tif (!updateAll || i === total - 1) {\r\n\t\t\t\t\t\t$('<small/>')\r\n\t\t\t\t\t\t\t.css('display', 'none')\r\n\t\t\t\t\t\t\t.addClass('help-block')\r\n\t\t\t\t\t\t\t.attr('data-bv-validator', validatorName)\r\n\t\t\t\t\t\t\t.attr('data-bv-for', field)\r\n\t\t\t\t\t\t\t.attr('data-bv-result', this.STATUS_NOT_VALIDATED)\r\n\t\t\t\t\t\t\t.html(this._getMessage(field, validatorName))\r\n\t\t\t\t\t\t\t.appendTo($message);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prepare the validator events\r\n\t\t\t\t\tif (this.options.fields[field].validators[validatorName].onSuccess) {\r\n\t\t\t\t\t\t$field.on('success.validator.bv', function(e, data) {\r\n\t\t\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.fields[field].validators[validatorName].onSuccess, [e, data]);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.options.fields[field].validators[validatorName].onError) {\r\n\t\t\t\t\t\t$field.on('error.validator.bv', function(e, data) {\r\n\t\t\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.fields[field].validators[validatorName].onError, [e, data]);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Prepare the feedback icons\r\n\t\t\t\t// Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)\r\n\t\t\t\tif (this.options.fields[field].feedbackIcons !== false && this.options.fields[field].feedbackIcons !== 'false'\r\n\t\t\t\t\t&& this.options.feedbackIcons\r\n\t\t\t\t\t&& this.options.feedbackIcons.validating && this.options.feedbackIcons.invalid && this.options.feedbackIcons.valid\r\n\t\t\t\t\t&& (!updateAll || i === total - 1))\r\n\t\t\t\t{\r\n\t\t\t\t\t$parent.removeClass('has-success').removeClass('has-error').addClass('has-feedback');\r\n\t\t\t\t\tvar $icon = $('<i/>')\r\n\t\t\t\t\t\t.css('display', 'none')\r\n\t\t\t\t\t\t.addClass('form-control-feedback')\r\n\t\t\t\t\t\t.attr('data-bv-icon-for', field)\r\n\t\t\t\t\t\t// Place it after the label containing the checkbox/radio\r\n\t\t\t\t\t\t// so when clicking the icon, it doesn't effect to the checkbox/radio element\r\n\t\t\t\t\t\t.insertAfter(('checkbox' === type || 'radio' === type) ? $field.parent() : $field);\r\n\r\n\t\t\t\t\t// The feedback icon does not render correctly if there is no label\r\n\t\t\t\t\t// https://github.com/twbs/bootstrap/issues/12873\r\n\t\t\t\t\tif ($parent.find('label').length === 0) {\r\n\t\t\t\t\t\t$icon.css('top', 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Fix feedback icons in input-group\r\n\t\t\t\t\tif ($parent.find('.input-group').length !== 0) {\r\n\t\t\t\t\t\t$icon.css({\r\n\t\t\t\t\t\t\t'top': 0,\r\n\t\t\t\t\t\t\t'z-index': 100\r\n\t\t\t\t\t\t}).insertAfter($parent.find('.input-group').eq(0));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Prepare the events\r\n\t\t\tif (this.options.fields[field].onSuccess) {\r\n\t\t\t\tfields.on('success.field.bv', function(e, data) {\r\n\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.fields[field].onSuccess, [e, data]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.options.fields[field].onError) {\r\n\t\t\t\tfields.on('error.field.bv', function(e, data) {\r\n\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.fields[field].onError, [e, data]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.options.fields[field].onStatus) {\r\n\t\t\t\tfields.on('status.field.bv', function(e, data) {\r\n\t\t\t\t\t$.fn.bootstrapValidator.helpers.call(that.options.fields[field].onStatus, [e, data]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Set live mode\r\n\t\t\tevents = $.map(trigger, function(item) {\r\n\t\t\t\treturn item + '.live.bv';\r\n\t\t\t}).join(' ');\r\n\t\t\tswitch (this.options.live) {\r\n\t\t\t\tcase 'submitted':\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'disabled':\r\n\t\t\t\t\tfields.off(events);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'enabled':\r\n\t\t\t\t/* falls through */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tfields.off(events).on(events, function() {\r\n\t\t\t\t\t\tif (that._exceedThreshold($(this))) {\r\n\t\t\t\t\t\t\tthat.validateField($(this));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tfields.trigger($.Event('init.field.bv'), {\r\n\t\t\t\tbv: this,\r\n\t\t\t\tfield: field,\r\n\t\t\t\telement: fields\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get the error message for given field and validator\r\n\t\t *\r\n\t\t * @param {String} field The field name\r\n\t\t * @param {String} validatorName The validator name\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\t_getMessage: function(field, validatorName) {\r\n\t\t\tif (!this.options.fields[field] || !$.fn.bootstrapValidator.validators[validatorName]\r\n\t\t\t\t|| !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName])\r\n\t\t\t{\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\r\n\t\t\tvar options = this.options.fields[field].validators[validatorName];\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase (!!options.message):\r\n\t\t\t\t\treturn options.message;\r\n\t\t\t\tcase (!!this.options.fields[field].message):\r\n\t\t\t\t\treturn this.options.fields[field].message;\r\n\t\t\t\tcase (!!$.fn.bootstrapValidator.i18n[validatorName]):\r\n\t\t\t\t\treturn $.fn.bootstrapValidator.i18n[validatorName]['default'];\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn this.options.message;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get the element to place the error messages\r\n\t\t *\r\n\t\t * @param {jQuery} $field The field element\r\n\t\t * @param {String} group\r\n\t\t * @returns {jQuery}\r\n\t\t */\r\n\t\t_getMessageContainer: function($field, group) {\r\n\t\t\tvar $parent = $field.parent();\r\n\t\t\tif ($parent.is(group)) {\r\n\t\t\t\treturn $parent;\r\n\t\t\t}\r\n\r\n\t\t\tvar cssClasses = $parent.attr('class');\r\n\t\t\tif (!cssClasses) {\r\n\t\t\t\treturn this._getMessageContainer($parent, group);\r\n\t\t\t}\r\n\r\n\t\t\tcssClasses = cssClasses.split(' ');\r\n\t\t\tvar n = cssClasses.length;\r\n\t\t\tfor (var i = 0; i < n; i++) {\r\n\t\t\t\tif (/^col-(xs|sm|md|lg)-\\d+$/.test(cssClasses[i]) || /^col-(xs|sm|md|lg)-offset-\\d+$/.test(cssClasses[i])) {\r\n\t\t\t\t\treturn $parent;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn this._getMessageContainer($parent, group);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Called when all validations are completed\r\n\t\t */\r\n\t\t_submit: function() {\r\n\t\t\tvar isValid   = this.isValid(),\r\n\t\t\t\teventType = isValid ? 'success.form.bv' : 'error.form.bv',\r\n\t\t\t\te         = $.Event(eventType);\r\n\r\n\t\t\tthis.$form.trigger(e);\r\n\r\n\t\t\t// Call default handler\r\n\t\t\t// Check if whether the submit button is clicked\r\n\t\t\tif (this.$submitButton) {\r\n\t\t\t\tisValid ? this._onSuccess(e) : this._onError(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if the field is excluded.\r\n\t\t * Returning true means that the field will not be validated\r\n\t\t *\r\n\t\t * @param {jQuery} $field The field element\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_isExcluded: function($field) {\r\n\t\t\tvar excludedAttr = $field.attr('data-bv-excluded'),\r\n\t\t\t// I still need to check the 'name' attribute while initializing the field\r\n\t\t\t\tfield        = $field.attr('data-bv-field') || $field.attr('name');\r\n\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true)):\r\n\t\t\t\tcase (excludedAttr === 'true'):\r\n\t\t\t\tcase (excludedAttr === ''):\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tcase (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false)):\r\n\t\t\t\tcase (excludedAttr === 'false'):\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this.options.excluded) {\r\n\t\t\t\t\t\t// Convert to array first\r\n\t\t\t\t\t\tif ('string' === typeof this.options.excluded) {\r\n\t\t\t\t\t\t\tthis.options.excluded = $.map(this.options.excluded.split(','), function(item) {\r\n\t\t\t\t\t\t\t\t// Trim the spaces\r\n\t\t\t\t\t\t\t\treturn $.trim(item);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar length = this.options.excluded.length;\r\n\t\t\t\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\t\t\t\tif (('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))\r\n\t\t\t\t\t\t\t\t|| ('function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if the number of characters of field value exceed the threshold or not\r\n\t\t *\r\n\t\t * @param {jQuery} $field The field element\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_exceedThreshold: function($field) {\r\n\t\t\tvar field     = $field.attr('data-bv-field'),\r\n\t\t\t\tthreshold = this.options.fields[field].threshold || this.options.threshold;\r\n\t\t\tif (!threshold) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tvar cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;\r\n\t\t\treturn (cannotType || $field.val().length >= threshold);\r\n\t\t},\r\n\r\n\t\t// ---\r\n\t\t// Events\r\n\t\t// ---\r\n\r\n\t\t/**\r\n\t\t * The default handler of error.form.bv event.\r\n\t\t * It will be called when there is a invalid field\r\n\t\t *\r\n\t\t * @param {jQuery.Event} e The jQuery event object\r\n\t\t */\r\n\t\t_onError: function(e) {\r\n\t\t\tif (e.isDefaultPrevented()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ('submitted' === this.options.live) {\r\n\t\t\t\t// Enable live mode\r\n\t\t\t\tthis.options.live = 'enabled';\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tfor (var field in this.options.fields) {\r\n\t\t\t\t\t(function(f) {\r\n\t\t\t\t\t\tvar fields  = that.getFieldElements(f);\r\n\t\t\t\t\t\tif (fields.length) {\r\n\t\t\t\t\t\t\tvar type    = $(fields[0]).attr('type'),\r\n\t\t\t\t\t\t\t\tevent   = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $(fields[0]).get(0).tagName) ? 'change' : that._changeEvent,\r\n\t\t\t\t\t\t\t\ttrigger = that.options.fields[field].trigger || that.options.trigger || event,\r\n\t\t\t\t\t\t\t\tevents  = $.map(trigger.split(' '), function(item) {\r\n\t\t\t\t\t\t\t\t\treturn item + '.live.bv';\r\n\t\t\t\t\t\t\t\t}).join(' ');\r\n\r\n\t\t\t\t\t\t\tfields.off(events).on(events, function() {\r\n\t\t\t\t\t\t\t\tif (that._exceedThreshold($(this))) {\r\n\t\t\t\t\t\t\t\t\tthat.validateField($(this));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})(field);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar $invalidField = this.$invalidFields.eq(0);\r\n\t\t\tif ($invalidField) {\r\n\t\t\t\t// Activate the tab containing the invalid field if exists\r\n\t\t\t\tvar $tabPane = $invalidField.parents('.tab-pane'), tabId;\r\n\t\t\t\tif ($tabPane && (tabId = $tabPane.attr('id'))) {\r\n\t\t\t\t\t$('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').tab('show');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Focus to the first invalid field\r\n\t\t\t\t$invalidField.focus();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The default handler of success.form.bv event.\r\n\t\t * It will be called when all the fields are valid\r\n\t\t *\r\n\t\t * @param {jQuery.Event} e The jQuery event object\r\n\t\t */\r\n\t\t_onSuccess: function(e) {\r\n\t\t\tif (e.isDefaultPrevented()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Submit the form\r\n\t\t\tthis.disableSubmitButtons(true).defaultSubmit();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Called after validating a field element\r\n\t\t *\r\n\t\t * @param {jQuery} $field The field element\r\n\t\t * @param {String} [validatorName] The validator name\r\n\t\t */\r\n\t\t_onFieldValidated: function($field, validatorName) {\r\n\t\t\tvar field         = $field.attr('data-bv-field'),\r\n\t\t\t\tvalidators    = this.options.fields[field].validators,\r\n\t\t\t\tcounter       = {},\r\n\t\t\t\tnumValidators = 0,\r\n\t\t\t\tdata          = {\r\n\t\t\t\t\tbv: this,\r\n\t\t\t\t\tfield: field,\r\n\t\t\t\t\telement: $field,\r\n\t\t\t\t\tvalidator: validatorName\r\n\t\t\t\t};\r\n\r\n\t\t\t// Trigger an event after given validator completes\r\n\t\t\tif (validatorName) {\r\n\t\t\t\tswitch ($field.data('bv.result.' + validatorName)) {\r\n\t\t\t\t\tcase this.STATUS_INVALID:\r\n\t\t\t\t\t\t$field.trigger($.Event('error.validator.bv'), data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase this.STATUS_VALID:\r\n\t\t\t\t\t\t$field.trigger($.Event('success.validator.bv'), data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcounter[this.STATUS_NOT_VALIDATED] = 0;\r\n\t\t\tcounter[this.STATUS_VALIDATING]    = 0;\r\n\t\t\tcounter[this.STATUS_INVALID]       = 0;\r\n\t\t\tcounter[this.STATUS_VALID]         = 0;\r\n\r\n\t\t\tfor (var v in validators) {\r\n\t\t\t\tif (validators[v].enabled === false) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnumValidators++;\r\n\t\t\t\tvar result = $field.data('bv.result.' + v);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tcounter[result]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (counter[this.STATUS_VALID] === numValidators) {\r\n\t\t\t\t// Remove from the list of invalid fields\r\n\t\t\t\tthis.$invalidFields = this.$invalidFields.not($field);\r\n\r\n\t\t\t\t$field.trigger($.Event('success.field.bv'), data);\r\n\t\t\t}\r\n\t\t\t// If all validators are completed and there is at least one validator which doesn't pass\r\n\t\t\telse if (counter[this.STATUS_NOT_VALIDATED] === 0 && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {\r\n\t\t\t\t// Add to the list of invalid fields\r\n\t\t\t\tthis.$invalidFields = this.$invalidFields.add($field);\r\n\r\n\t\t\t\t$field.trigger($.Event('error.field.bv'), data);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// ---\r\n\t\t// Public methods\r\n\t\t// ---\r\n\r\n\t\t/**\r\n\t\t * Retrieve the field elements by given name\r\n\t\t *\r\n\t\t * @param {String} field The field name\r\n\t\t * @returns {null|jQuery[]}\r\n\t\t */\r\n\t\tgetFieldElements: function(field) {\r\n\t\t\tif (!this._cacheFields[field]) {\r\n\t\t\t\tthis._cacheFields[field] = (this.options.fields[field] && this.options.fields[field].selector)\r\n\t\t\t\t\t? $(this.options.fields[field].selector)\r\n\t\t\t\t\t: this.$form.find('[name=\"' + field + '\"]');\r\n\t\t\t}\r\n\r\n\t\t\treturn this._cacheFields[field];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Disable/enable submit buttons\r\n\t\t *\r\n\t\t * @param {Boolean} disabled Can be true or false\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tdisableSubmitButtons: function(disabled) {\r\n\t\t\tif (!disabled) {\r\n\t\t\t\tthis.$form.find(this.options.submitButtons).removeAttr('disabled');\r\n\t\t\t} else if (this.options.live !== 'disabled') {\r\n\t\t\t\t// Don't disable if the live validating mode is disabled\r\n\t\t\t\tthis.$form.find(this.options.submitButtons).attr('disabled', 'disabled');\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate the form\r\n\t\t *\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tvalidate: function() {\r\n\t\t\tif (!this.options.fields) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tthis.disableSubmitButtons(true);\r\n\r\n\t\t\tfor (var field in this.options.fields) {\r\n\t\t\t\tthis.validateField(field);\r\n\t\t\t}\r\n\r\n\t\t\tthis._submit();\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate given field\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tvalidateField: function(field) {\r\n\t\t\tvar fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tfields = field;\r\n\t\t\t\t\tfield  = field.attr('data-bv-field');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tfields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.fields[field] && this.options.fields[field].enabled === false) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\r\n\t\t\tvar that       = this,\r\n\t\t\t\ttype       = fields.attr('type'),\r\n\t\t\t\ttotal      = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n\t\t\t\tupdateAll  = ('radio' === type || 'checkbox' === type),\r\n\t\t\t\tvalidators = this.options.fields[field].validators,\r\n\t\t\t\tvalidatorName,\r\n\t\t\t\tvalidateResult;\r\n\r\n\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\tvar $field = fields.eq(i);\r\n\t\t\t\tif (this._isExcluded($field)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (validatorName in validators) {\r\n\t\t\t\t\tif ($field.data('bv.dfs.' + validatorName)) {\r\n\t\t\t\t\t\t$field.data('bv.dfs.' + validatorName).reject();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Don't validate field if it is already done\r\n\t\t\t\t\tvar result = $field.data('bv.result.' + validatorName);\r\n\t\t\t\t\tif (result === this.STATUS_VALID || result === this.STATUS_INVALID || validators[validatorName].enabled === false) {\r\n\t\t\t\t\t\tthis._onFieldValidated($field, validatorName);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$field.data('bv.result.' + validatorName, this.STATUS_VALIDATING);\r\n\t\t\t\t\tvalidateResult = $.fn.bootstrapValidator.validators[validatorName].validate(this, $field, validators[validatorName]);\r\n\r\n\t\t\t\t\t// validateResult can be a $.Deferred object ...\r\n\t\t\t\t\tif ('object' === typeof validateResult && validateResult.resolve) {\r\n\t\t\t\t\t\tthis.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);\r\n\t\t\t\t\t\t$field.data('bv.dfs.' + validatorName, validateResult);\r\n\r\n\t\t\t\t\t\tvalidateResult.done(function($f, v, isValid, message) {\r\n\t\t\t\t\t\t\t// v is validator name\r\n\t\t\t\t\t\t\t$f.removeData('bv.dfs.' + v);\r\n\t\t\t\t\t\t\tif (message) {\r\n\t\t\t\t\t\t\t\tthat.updateMessage($f, v, message);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthat.updateStatus(updateAll ? $f.attr('data-bv-field') : $f, isValid ? that.STATUS_VALID : that.STATUS_INVALID, v);\r\n\r\n\t\t\t\t\t\t\tif (isValid && that._submitIfValid === true) {\r\n\t\t\t\t\t\t\t\t// If a remote validator returns true and the form is ready to submit, then do it\r\n\t\t\t\t\t\t\t\tthat._submit();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// ... or object { valid: true/false, message: 'dynamic message' }\r\n\t\t\t\t\telse if ('object' === typeof validateResult && validateResult.valid !== undefined && validateResult.message !== undefined) {\r\n\t\t\t\t\t\tthis.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);\r\n\t\t\t\t\t\tthis.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// ... or a boolean value\r\n\t\t\t\t\telse if ('boolean' === typeof validateResult) {\r\n\t\t\t\t\t\tthis.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update the error message\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @param {String} validator The validator name\r\n\t\t * @param {String} message The message\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tupdateMessage: function(field, validator, message) {\r\n\t\t\tvar $fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\t$fields = field;\r\n\t\t\t\t\tfield   = field.attr('data-bv-field');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\t$fields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t$fields.each(function() {\r\n\t\t\t\t$(this).data('bv.messages').find('.help-block[data-bv-validator=\"' + validator + '\"][data-bv-for=\"' + field + '\"]').html(message);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all validating results of field\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'\r\n\t\t * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tupdateStatus: function(field, status, validatorName) {\r\n\t\t\tvar fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tfields = field;\r\n\t\t\t\t\tfield  = field.attr('data-bv-field');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tfields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (status === this.STATUS_NOT_VALIDATED) {\r\n\t\t\t\t// Reset the flag\r\n\t\t\t\tthis._submitIfValid = false;\r\n\t\t\t}\r\n\r\n\t\t\tvar that  = this,\r\n\t\t\t\ttype  = fields.attr('type'),\r\n\t\t\t\tgroup = this.options.fields[field].group || this.options.group,\r\n\t\t\t\ttotal = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\tvar $field       = fields.eq(i);\r\n\t\t\t\tif (this._isExcluded($field)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar $parent      = $field.parents(group),\r\n\t\t\t\t\t$message     = $field.data('bv.messages'),\r\n\t\t\t\t\t$allErrors   = $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]'),\r\n\t\t\t\t\t$errors      = validatorName ? $allErrors.filter('[data-bv-validator=\"' + validatorName + '\"]') : $allErrors,\r\n\t\t\t\t\t$icon        = $parent.find('.form-control-feedback[data-bv-icon-for=\"' + field + '\"]'),\r\n\t\t\t\t\tcontainer    = this.options.fields[field].container || this.options.container,\r\n\t\t\t\t\tisValidField = null;\r\n\r\n\t\t\t\t// Update status\r\n\t\t\t\tif (validatorName) {\r\n\t\t\t\t\t$field.data('bv.result.' + validatorName, status);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (var v in this.options.fields[field].validators) {\r\n\t\t\t\t\t\t$field.data('bv.result.' + v, status);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Show/hide error elements and feedback icons\r\n\t\t\t\t$errors.attr('data-bv-result', status);\r\n\r\n\t\t\t\t// Determine the tab containing the element\r\n\t\t\t\tvar $tabPane = $field.parents('.tab-pane'),\r\n\t\t\t\t\ttabId, $tab;\r\n\t\t\t\tif ($tabPane && (tabId = $tabPane.attr('id'))) {\r\n\t\t\t\t\t$tab = $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').parent();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (status) {\r\n\t\t\t\t\tcase this.STATUS_VALIDATING:\r\n\t\t\t\t\t\tisValidField = null;\r\n\t\t\t\t\t\tthis.disableSubmitButtons(true);\r\n\t\t\t\t\t\t$parent.removeClass('has-success').removeClass('has-error');\r\n\t\t\t\t\t\tif ($icon) {\r\n\t\t\t\t\t\t\t$icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).addClass(this.options.feedbackIcons.validating).show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($tab) {\r\n\t\t\t\t\t\t\t$tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase this.STATUS_INVALID:\r\n\t\t\t\t\t\tisValidField = false;\r\n\t\t\t\t\t\tthis.disableSubmitButtons(true);\r\n\t\t\t\t\t\t$parent.removeClass('has-success').addClass('has-error');\r\n\t\t\t\t\t\tif ($icon) {\r\n\t\t\t\t\t\t\t$icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.validating).addClass(this.options.feedbackIcons.invalid).show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($tab) {\r\n\t\t\t\t\t\t\t$tab.removeClass('bv-tab-success').addClass('bv-tab-error');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase this.STATUS_VALID:\r\n\t\t\t\t\t\t// If the field is valid (passes all validators)\r\n\t\t\t\t\t\tisValidField = ($allErrors.filter('[data-bv-result=\"' + this.STATUS_NOT_VALIDATED +'\"]').length === 0)\r\n\t\t\t\t\t\t\t? ($allErrors.filter('[data-bv-result=\"' + this.STATUS_VALID +'\"]').length === $allErrors.length)  // All validators are completed\r\n\t\t\t\t\t\t\t: null;                                                                                            // There are some validators that have not done\r\n\t\t\t\t\t\tif (isValidField !== null) {\r\n\t\t\t\t\t\t\tthis.disableSubmitButtons(this.$submitButton ? !this.isValid() : !isValidField);\r\n\t\t\t\t\t\t\tif ($icon) {\r\n\t\t\t\t\t\t\t\t$icon\r\n\t\t\t\t\t\t\t\t\t.removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).removeClass(this.options.feedbackIcons.valid)\r\n\t\t\t\t\t\t\t\t\t.addClass(isValidField ? this.options.feedbackIcons.valid : this.options.feedbackIcons.invalid)\r\n\t\t\t\t\t\t\t\t\t.show();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t$parent.removeClass('has-error has-success').addClass(this.isValidContainer($parent) ? 'has-success' : 'has-error');\r\n\t\t\t\t\t\tif ($tab) {\r\n\t\t\t\t\t\t\t$tab.removeClass('bv-tab-success').removeClass('bv-tab-error').addClass(this.isValidContainer($tabPane) ? 'bv-tab-success' : 'bv-tab-error');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase this.STATUS_NOT_VALIDATED:\r\n\t\t\t\t\t/* falls through */\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tisValidField = null;\r\n\t\t\t\t\t\tthis.disableSubmitButtons(false);\r\n\t\t\t\t\t\t$parent.removeClass('has-success').removeClass('has-error');\r\n\t\t\t\t\t\tif ($icon) {\r\n\t\t\t\t\t\t\t$icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($tab) {\r\n\t\t\t\t\t\t\t$tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (true) {\r\n\t\t\t\t\t// Only show the first error message if it is placed inside a tooltip ...\r\n\t\t\t\t\tcase ($icon && 'tooltip' === container):\r\n\t\t\t\t\t\t(isValidField === false)\r\n\t\t\t\t\t\t\t? $icon.css('cursor', 'pointer').tooltip('destroy').tooltip({\r\n\t\t\t\t\t\t\thtml: true,\r\n\t\t\t\t\t\t\tplacement: 'top',\r\n\t\t\t\t\t\t\ttitle: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t: $icon.css('cursor', '').tooltip('destroy');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t// ... or popover\r\n\t\t\t\t\tcase ($icon && 'popover' === container):\r\n\t\t\t\t\t\t(isValidField === false)\r\n\t\t\t\t\t\t\t? $icon.css('cursor', 'pointer').popover('destroy').popover({\r\n\t\t\t\t\t\t\tcontent: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html(),\r\n\t\t\t\t\t\t\thtml: true,\r\n\t\t\t\t\t\t\tplacement: 'top',\r\n\t\t\t\t\t\t\ttrigger: 'hover click'\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t: $icon.css('cursor', '').popover('destroy');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t(status === this.STATUS_INVALID) ? $errors.show() : $errors.hide();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Trigger an event\r\n\t\t\t\t$field.trigger($.Event('status.field.bv'), {\r\n\t\t\t\t\tbv: this,\r\n\t\t\t\t\tfield: field,\r\n\t\t\t\t\telement: $field,\r\n\t\t\t\t\tstatus: status\r\n\t\t\t\t});\r\n\t\t\t\tthis._onFieldValidated($field, validatorName);\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check the form validity\r\n\t\t *\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisValid: function() {\r\n\t\t\tfor (var field in this.options.fields) {\r\n\t\t\t\tif (!this.isValidField(field)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if the field is valid or not\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisValidField: function(field) {\r\n\t\t\tvar fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tfields = field;\r\n\t\t\t\t\tfield  = field.attr('data-bv-field');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tfields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (fields.length === 0 || this.options.fields[field] === null || this.options.fields[field].enabled === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar type  = fields.attr('type'),\r\n\t\t\t\ttotal = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n\t\t\t\t$field, validatorName, status;\r\n\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\t$field = fields.eq(i);\r\n\t\t\t\tif (this._isExcluded($field)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (validatorName in this.options.fields[field].validators) {\r\n\t\t\t\t\tif (this.options.fields[field].validators[validatorName].enabled === false) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstatus = $field.data('bv.result.' + validatorName);\r\n\t\t\t\t\tif (status !== this.STATUS_VALID) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if all fields inside a given container are valid.\r\n\t\t * It's useful when working with a wizard-like such as tab, collapse\r\n\t\t *\r\n\t\t * @param {String|jQuery} container The container selector or element\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisValidContainer: function(container) {\r\n\t\t\tvar that       = this,\r\n\t\t\t\tmap        = {},\r\n\t\t\t\t$container = ('string' === typeof container) ? $(container) : container;\r\n\t\t\tif ($container.length === 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t$container.find('[data-bv-field]').each(function() {\r\n\t\t\t\tvar $field = $(this),\r\n\t\t\t\t\tfield  = $field.attr('data-bv-field');\r\n\t\t\t\tif (!that._isExcluded($field) && !map[field]) {\r\n\t\t\t\t\tmap[field] = $field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tfor (var field in map) {\r\n\t\t\t\tvar $f = map[field];\r\n\t\t\t\tif ($f.data('bv.messages')\r\n\t\t\t\t\t.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]')\r\n\t\t\t\t\t.filter(function() {\r\n\t\t\t\t\t\tvar v = $(this).attr('data-bv-validator'),\r\n\t\t\t\t\t\t\tf = $(this).attr('data-bv-for');\r\n\t\t\t\t\t\treturn (that.options.fields[f].validators[v].enabled !== false\r\n\t\t\t\t\t\t\t&& $f.data('bv.result.' + v) && $f.data('bv.result.' + v) !== that.STATUS_VALID);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.length !== 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t// The field is not valid\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Submit the form using default submission.\r\n\t\t * It also does not perform any validations when submitting the form\r\n\t\t */\r\n\t\tdefaultSubmit: function() {\r\n\t\t\tif (this.$submitButton) {\r\n\t\t\t\t// Create hidden input to send the submit buttons\r\n\t\t\t\t$('<input/>')\r\n\t\t\t\t\t.attr('type', 'hidden')\r\n\t\t\t\t\t.attr('data-bv-submit-hidden', '')\r\n\t\t\t\t\t.attr('name', this.$submitButton.attr('name'))\r\n\t\t\t\t\t.val(this.$submitButton.val())\r\n\t\t\t\t\t.appendTo(this.$form);\r\n\t\t\t}\r\n\r\n\t\t\t// Submit form\r\n\t\t\tthis.$form.off('submit.bv').submit();\r\n\t\t},\r\n\r\n\t\t// ---\r\n\t\t// Useful APIs which aren't used internally\r\n\t\t// ---\r\n\r\n\t\t/**\r\n\t\t * Get the list of invalid fields\r\n\t\t *\r\n\t\t * @returns {jQuery[]}\r\n\t\t */\r\n\t\tgetInvalidFields: function() {\r\n\t\t\treturn this.$invalidFields;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns the clicked submit button\r\n\t\t *\r\n\t\t * @returns {jQuery}\r\n\t\t */\r\n\t\tgetSubmitButton: function() {\r\n\t\t\treturn this.$submitButton;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get the error messages\r\n\t\t *\r\n\t\t * @param {String|jQuery} [field] The field name or field element\r\n\t\t * If the field is not defined, the method returns all error messages of all fields\r\n\t\t * @param {String} [validator] The name of validator\r\n\t\t * If the validator is not defined, the method returns error messages of all validators\r\n\t\t * @returns {String[]}\r\n\t\t */\r\n\t\tgetMessages: function(field, validator) {\r\n\t\t\tvar that     = this,\r\n\t\t\t\tmessages = [],\r\n\t\t\t\t$fields  = $([]);\r\n\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase (field && 'object' === typeof field):\r\n\t\t\t\t\t$fields = field;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (field && 'string' === typeof field):\r\n\t\t\t\t\tvar f = this.getFieldElements(field);\r\n\t\t\t\t\tif (f.length > 0) {\r\n\t\t\t\t\t\tvar type = f.attr('type');\r\n\t\t\t\t\t\t$fields = ('radio' === type || 'checkbox' === type) ? f.eq(0) : f;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t$fields = this.$invalidFields;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar filter = validator ? '[data-bv-validator=\"' + validator + '\"]' : '';\r\n\t\t\t$fields.each(function() {\r\n\t\t\t\tmessages = messages.concat(\r\n\t\t\t\t\t$(this)\r\n\t\t\t\t\t\t.data('bv.messages')\r\n\t\t\t\t\t\t.find('.help-block[data-bv-for=\"' + $(this).attr('data-bv-field') + '\"][data-bv-result=\"' + that.STATUS_INVALID + '\"]' + filter)\r\n\t\t\t\t\t\t.map(function() {\r\n\t\t\t\t\t\t\tvar v = $(this).attr('data-bv-validator'),\r\n\t\t\t\t\t\t\t\tf = $(this).attr('data-bv-for');\r\n\t\t\t\t\t\t\treturn (that.options.fields[f].validators[v].enabled === false) ? '' : $(this).html();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.get()\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn messages;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get the field options\r\n\t\t *\r\n\t\t * @param {String|jQuery} [field] The field name or field element. If it is not set, the method returns the form options\r\n\t\t * @param {String} [validator] The name of validator. It null, the method returns form options\r\n\t\t * @param {String} [option] The option name\r\n\t\t * @return {String|Object}\r\n\t\t */\r\n\t\tgetOptions: function(field, validator, option) {\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn this.options;\r\n\t\t\t}\r\n\t\t\tif ('object' === typeof field) {\r\n\t\t\t\tfield = field.attr('data-bv-field');\r\n\t\t\t}\r\n\t\t\tif (!this.options.fields[field]) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tvar options = this.options.fields[field];\r\n\t\t\tif (!validator) {\r\n\t\t\t\treturn options;\r\n\t\t\t}\r\n\t\t\tif (!options.validators || !options.validators[validator]) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn option ? options.validators[validator][option] : options.validators[validator];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update the option of a specific validator\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @param {String} validator The validator name\r\n\t\t * @param {String} option The option name\r\n\t\t * @param {String} value The value to set\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tupdateOption: function(field, validator, option, value) {\r\n\t\t\tif ('object' === typeof field) {\r\n\t\t\t\tfield = field.attr('data-bv-field');\r\n\t\t\t}\r\n\t\t\tif (this.options.fields[field] && this.options.fields[field].validators[validator]) {\r\n\t\t\t\tthis.options.fields[field].validators[validator][option] = value;\r\n\t\t\t\tthis.updateStatus(field, this.STATUS_NOT_VALIDATED, validator);\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a new field\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @param {Object} [options] The validator rules\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\taddField: function(field, options) {\r\n\t\t\tvar fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tfields = field;\r\n\t\t\t\t\tfield  = field.attr('data-bv-field') || field.attr('name');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tdelete this._cacheFields[field];\r\n\t\t\t\t\tfields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tfields.attr('data-bv-field', field);\r\n\r\n\t\t\tvar type  = fields.attr('type'),\r\n\t\t\t\ttotal = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\tvar $field = fields.eq(i);\r\n\r\n\t\t\t\t// Try to parse the options from HTML attributes\r\n\t\t\t\tvar opts = this._parseOptions($field);\r\n\t\t\t\topts = (opts === null) ? options : $.extend(true, options, opts);\r\n\r\n\t\t\t\tthis.options.fields[field] = $.extend(true, this.options.fields[field], opts);\r\n\r\n\t\t\t\t// Update the cache\r\n\t\t\t\tthis._cacheFields[field] = this._cacheFields[field] ? this._cacheFields[field].add($field) : $field;\r\n\r\n\t\t\t\t// Init the element\r\n\t\t\t\tthis._initField(('checkbox' === type || 'radio' === type) ? field : $field);\r\n\t\t\t}\r\n\r\n\t\t\tthis.disableSubmitButtons(false);\r\n\t\t\t// Trigger an event\r\n\t\t\tthis.$form.trigger($.Event('added.field.bv'), {\r\n\t\t\t\tfield: field,\r\n\t\t\t\telement: fields,\r\n\t\t\t\toptions: this.options.fields[field]\r\n\t\t\t});\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove a given field\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tremoveField: function(field) {\r\n\t\t\tvar fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tfields = field;\r\n\t\t\t\t\tfield  = field.attr('data-bv-field') || field.attr('name');\r\n\t\t\t\t\tfields.attr('data-bv-field', field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tfields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (fields.length === 0) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\r\n\t\t\tvar type  = fields.attr('type'),\r\n\t\t\t\ttotal = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\tvar $field = fields.eq(i);\r\n\r\n\t\t\t\t// Remove from the list of invalid fields\r\n\t\t\t\tthis.$invalidFields = this.$invalidFields.not($field);\r\n\r\n\t\t\t\t// Update the cache\r\n\t\t\t\tthis._cacheFields[field] = this._cacheFields[field].not($field);\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._cacheFields[field] || this._cacheFields[field].length === 0) {\r\n\t\t\t\tdelete this.options.fields[field];\r\n\t\t\t}\r\n\t\t\tif ('checkbox' === type || 'radio' === type) {\r\n\t\t\t\tthis._initField(field);\r\n\t\t\t}\r\n\r\n\t\t\tthis.disableSubmitButtons(false);\r\n\t\t\t// Trigger an event\r\n\t\t\tthis.$form.trigger($.Event('removed.field.bv'), {\r\n\t\t\t\tfield: field,\r\n\t\t\t\telement: fields\r\n\t\t\t});\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset given field\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name or field element\r\n\t\t * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tresetField: function(field, resetValue) {\r\n\t\t\tvar $fields = $([]);\r\n\t\t\tswitch (typeof field) {\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\t$fields = field;\r\n\t\t\t\t\tfield   = field.attr('data-bv-field');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\t$fields = this.getFieldElements(field);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar total = $fields.length;\r\n\t\t\tif (this.options.fields[field]) {\r\n\t\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\t\tfor (var validator in this.options.fields[field].validators) {\r\n\t\t\t\t\t\t$fields.eq(i).removeData('bv.dfs.' + validator);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Mark field as not validated yet\r\n\t\t\tthis.updateStatus(field, this.STATUS_NOT_VALIDATED);\r\n\r\n\t\t\tif (resetValue) {\r\n\t\t\t\tvar type = $fields.attr('type');\r\n\t\t\t\t('radio' === type || 'checkbox' === type) ? $fields.removeAttr('checked').removeAttr('selected') : $fields.val('');\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset the form\r\n\t\t *\r\n\t\t * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tresetForm: function(resetValue) {\r\n\t\t\tfor (var field in this.options.fields) {\r\n\t\t\t\tthis.resetField(field, resetValue);\r\n\t\t\t}\r\n\r\n\t\t\tthis.$invalidFields = $([]);\r\n\t\t\tthis.$submitButton  = null;\r\n\r\n\t\t\t// Enable submit buttons\r\n\t\t\tthis.disableSubmitButtons(false);\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Revalidate given field\r\n\t\t * It's used when you need to revalidate the field which its value is updated by other plugin\r\n\t\t *\r\n\t\t * @param {String|jQuery} field The field name of field element\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\trevalidateField: function(field) {\r\n\t\t\tthis.updateStatus(field, this.STATUS_NOT_VALIDATED)\r\n\t\t\t\t.validateField(field);\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable/Disable all validators to given field\r\n\t\t *\r\n\t\t * @param {String} field The field name\r\n\t\t * @param {Boolean} enabled Enable/Disable field validators\r\n\t\t * @param {String} [validatorName] The validator name. If null, all validators will be enabled/disabled\r\n\t\t * @returns {BootstrapValidator}\r\n\t\t */\r\n\t\tenableFieldValidators: function(field, enabled, validatorName) {\r\n\t\t\tvar validators = this.options.fields[field].validators;\r\n\r\n\t\t\t// Enable/disable particular validator\r\n\t\t\tif (validatorName\r\n\t\t\t\t&& validators\r\n\t\t\t\t&& validators[validatorName] && validators[validatorName].enabled !== enabled)\r\n\t\t\t{\r\n\t\t\t\tthis.options.fields[field].validators[validatorName].enabled = enabled;\r\n\t\t\t\tthis.updateStatus(field, this.STATUS_NOT_VALIDATED, validatorName);\r\n\t\t\t}\r\n\t\t\t// Enable/disable all validators\r\n\t\t\telse if (!validatorName && this.options.fields[field].enabled !== enabled) {\r\n\t\t\t\tthis.options.fields[field].enabled = enabled;\r\n\t\t\t\tfor (var v in validators) {\r\n\t\t\t\t\tthis.enableFieldValidators(field, enabled, v);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Some validators have option which its value is dynamic.\r\n\t\t * For example, the zipCode validator has the country option which might be changed dynamically by a select element.\r\n\t\t *\r\n\t\t * @param {jQuery|String} field The field name or element\r\n\t\t * @param {String|Function} option The option which can be determined by:\r\n\t\t * - a string\r\n\t\t * - name of field which defines the value\r\n\t\t * - name of function which returns the value\r\n\t\t * - a function returns the value\r\n\t\t *\r\n\t\t * The callback function has the format of\r\n\t\t *      callback: function(value, validator, $field) {\r\n         *          // value is the value of field\r\n         *          // validator is the BootstrapValidator instance\r\n         *          // $field is the field element\r\n         *      }\r\n\t\t *\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tgetDynamicOption: function(field, option) {\r\n\t\t\tvar $field = ('string' === typeof field) ? this.getFieldElements(field) : field,\r\n\t\t\t\tvalue  = $field.val();\r\n\r\n\t\t\t// Option can be determined by\r\n\t\t\t// ... a function\r\n\t\t\tif ('function' === typeof option) {\r\n\t\t\t\treturn $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\r\n\t\t\t}\r\n\t\t\t// ... value of other field\r\n\t\t\telse if ('string' === typeof option) {\r\n\t\t\t\tvar $f = this.getFieldElements(option);\r\n\t\t\t\tif ($f.length) {\r\n\t\t\t\t\treturn $f.val();\r\n\t\t\t\t}\r\n\t\t\t\t// ... return value of callback\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Destroy the plugin\r\n\t\t * It will remove all error messages, feedback icons and turn off the events\r\n\t\t */\r\n\t\tdestroy: function() {\r\n\t\t\tvar field, fields, $field, validator, $icon, container, group;\r\n\t\t\tfor (field in this.options.fields) {\r\n\t\t\t\tfields    = this.getFieldElements(field);\r\n\t\t\t\tcontainer = this.options.fields[field].container || this.options.container,\r\n\t\t\t\t\tgroup     = this.options.fields[field].group || this.options.group;\r\n\t\t\t\tfor (var i = 0; i < fields.length; i++) {\r\n\t\t\t\t\t$field = fields.eq(i);\r\n\t\t\t\t\t$field\r\n\t\t\t\t\t\t// Remove all error messages\r\n\t\t\t\t\t\t.data('bv.messages')\r\n\t\t\t\t\t\t.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove().end()\r\n\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t.removeData('bv.messages')\r\n\t\t\t\t\t\t// Remove feedback classes\r\n\t\t\t\t\t\t.parents(group)\r\n\t\t\t\t\t\t.removeClass('has-feedback has-error has-success')\r\n\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t// Turn off events\r\n\t\t\t\t\t\t.off('.bv')\r\n\t\t\t\t\t\t.removeAttr('data-bv-field');\r\n\r\n\t\t\t\t\t// Remove feedback icons, tooltip/popover container\r\n\t\t\t\t\t$icon = $field.parents(group).find('i[data-bv-icon-for=\"' + field + '\"]');\r\n\t\t\t\t\tif ($icon) {\r\n\t\t\t\t\t\tswitch (container) {\r\n\t\t\t\t\t\t\tcase 'tooltip':\r\n\t\t\t\t\t\t\t\t$icon.tooltip('destroy').remove();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'popover':\r\n\t\t\t\t\t\t\t\t$icon.popover('destroy').remove();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t$icon.remove();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (validator in this.options.fields[field].validators) {\r\n\t\t\t\t\t\tif ($field.data('bv.dfs.' + validator)) {\r\n\t\t\t\t\t\t\t$field.data('bv.dfs.' + validator).reject();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$field.removeData('bv.result.' + validator).removeData('bv.dfs.' + validator);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Enable submit buttons\r\n\t\t\tthis.disableSubmitButtons(false);\r\n\r\n\t\t\tthis.$form\r\n\t\t\t\t.removeClass(this.options.elementClass)\r\n\t\t\t\t.off('.bv')\r\n\t\t\t\t.removeData('bootstrapValidator')\r\n\t\t\t\t// Remove generated hidden elements\r\n\t\t\t\t.find('[data-bv-submit-hidden]').remove();\r\n\t\t}\r\n\t};\r\n\r\n\t// Plugin definition\r\n\t$.fn.bootstrapValidator = function(option) {\r\n\t\tvar params = arguments;\r\n\t\treturn this.each(function() {\r\n\t\t\tvar $this   = $(this),\r\n\t\t\t\tdata    = $this.data('bootstrapValidator'),\r\n\t\t\t\toptions = 'object' === typeof option && option;\r\n\t\t\tif (!data) {\r\n\t\t\t\tdata = new BootstrapValidator(this, options);\r\n\t\t\t\t$this.data('bootstrapValidator', data);\r\n\t\t\t}\r\n\r\n\t\t\t// Allow to call plugin method\r\n\t\t\tif ('string' === typeof option) {\r\n\t\t\t\tdata[option].apply(data, Array.prototype.slice.call(params, 1));\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// The default options\r\n\t$.fn.bootstrapValidator.DEFAULT_OPTIONS = {\r\n\t\t// The form CSS class\r\n\t\telementClass: 'bv-form',\r\n\r\n\t\t// Default invalid message\r\n\t\tmessage: 'This value is not valid',\r\n\r\n\t\t// The CSS selector for indicating the element consists the field\r\n\t\t// By default, each field is placed inside the <div class=\"form-group\"></div>\r\n\t\t// You should adjust this option if your form group consists of many fields which not all of them need to be validated\r\n\t\tgroup: '.form-group',\r\n\r\n\t\t//The error messages container. It can be:\r\n\t\t// - 'tooltip' if you want to use Bootstrap tooltip to show error messages\r\n\t\t// - 'popover' if you want to use Bootstrap popover to show error messages\r\n\t\t// - a CSS selector indicating the container\r\n\t\t// In the first two cases, since the tooltip/popover should be small enough, the plugin only shows only one error message\r\n\t\t// You also can define the message container for particular field\r\n\t\tcontainer: null,\r\n\r\n\t\t// The field will not be live validated if its length is less than this number of characters\r\n\t\tthreshold: null,\r\n\r\n\t\t// Indicate fields which won't be validated\r\n\t\t// By default, the plugin will not validate the following kind of fields:\r\n\t\t// - disabled\r\n\t\t// - hidden\r\n\t\t// - invisible\r\n\t\t//\r\n\t\t// The setting consists of jQuery filters. Accept 3 formats:\r\n\t\t// - A string. Use a comma to separate filter\r\n\t\t// - An array. Each element is a filter\r\n\t\t// - An array. Each element can be a callback function\r\n\t\t//      function($field, validator) {\r\n\t\t//          $field is jQuery object representing the field element\r\n\t\t//          validator is the BootstrapValidator instance\r\n\t\t//          return true or false;\r\n\t\t//      }\r\n\t\t//\r\n\t\t// The 3 following settings are equivalent:\r\n\t\t//\r\n\t\t// 1) ':disabled, :hidden, :not(:visible)'\r\n\t\t// 2) [':disabled', ':hidden', ':not(:visible)']\r\n\t\t// 3) [':disabled', ':hidden', function($field) {\r\n\t\t//        return !$field.is(':visible');\r\n\t\t//    }]\r\n\t\texcluded: [':disabled', ':hidden', ':not(:visible)'],\r\n\r\n\t\t// Shows ok/error/loading icons based on the field validity.\r\n\t\t// This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).\r\n\t\t// Since Bootstrap doesn't provide any methods to know its version, this option cannot be on/off automatically.\r\n\t\t// In other word, to use this feature you have to upgrade your Bootstrap to v3.1.0 or later.\r\n\t\t//\r\n\t\t// Examples:\r\n\t\t// - Use Glyphicons icons:\r\n\t\t//  feedbackIcons: {\r\n\t\t//      valid: 'glyphicon glyphicon-ok',\r\n\t\t//      invalid: 'glyphicon glyphicon-remove',\r\n\t\t//      validating: 'glyphicon glyphicon-refresh'\r\n\t\t//  }\r\n\t\t// - Use FontAwesome icons:\r\n\t\t//  feedbackIcons: {\r\n\t\t//      valid: 'fa fa-check',\r\n\t\t//      invalid: 'fa fa-times',\r\n\t\t//      validating: 'fa fa-refresh'\r\n\t\t//  }\r\n\t\tfeedbackIcons: {\r\n\t\t\tvalid:      null,\r\n\t\t\tinvalid:    null,\r\n\t\t\tvalidating: null\r\n\t\t},\r\n\r\n\t\t// The submit buttons selector\r\n\t\t// These buttons will be disabled to prevent the valid form from multiple submissions\r\n\t\tsubmitButtons: '[type=\"submit\"]',\r\n\r\n\t\t// Live validating option\r\n\t\t// Can be one of 3 values:\r\n\t\t// - enabled: The plugin validates fields as soon as they are changed\r\n\t\t// - disabled: Disable the live validating. The error messages are only shown after the form is submitted\r\n\t\t// - submitted: The live validating is enabled after the form is submitted\r\n\t\tlive: 'enabled',\r\n\r\n\t\t// Map the field name with validator rules\r\n\t\tfields: null\r\n\t};\r\n\r\n\t// Available validators\r\n\t$.fn.bootstrapValidator.validators  = {};\r\n\r\n\t// i18n\r\n\t$.fn.bootstrapValidator.i18n        = {};\r\n\r\n\t$.fn.bootstrapValidator.Constructor = BootstrapValidator;\r\n\r\n\t// Helper methods, which can be used in validator class\r\n\t$.fn.bootstrapValidator.helpers = {\r\n\t\t/**\r\n\t\t * Execute a callback function\r\n\t\t *\r\n\t\t * @param {String|Function} functionName Can be\r\n\t\t * - name of global function\r\n\t\t * - name of namespace function (such as A.B.C)\r\n\t\t * - a function\r\n\t\t * @param {Array} args The callback arguments\r\n\t\t */\r\n\t\tcall: function(functionName, args) {\r\n\t\t\tif ('function' === typeof functionName) {\r\n\t\t\t\treturn functionName.apply(this, args);\r\n\t\t\t} else if ('string' === typeof functionName) {\r\n\t\t\t\tif ('()' === functionName.substring(functionName.length - 2)) {\r\n\t\t\t\t\tfunctionName = functionName.substring(0, functionName.length - 2);\r\n\t\t\t\t}\r\n\t\t\t\tvar ns      = functionName.split('.'),\r\n\t\t\t\t\tfunc    = ns.pop(),\r\n\t\t\t\t\tcontext = window;\r\n\t\t\t\tfor (var i = 0; i < ns.length; i++) {\r\n\t\t\t\t\tcontext = context[ns[i]];\r\n\t\t\t\t}\r\n\t\t\t\treturn context[func].apply(this, args);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Format a string\r\n\t\t * It's used to format the error message\r\n\t\t * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\r\n\t\t *\r\n\t\t * @param {String} message\r\n\t\t * @param {Array} parameters\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tformat: function(message, parameters) {\r\n\t\t\tif (!$.isArray(parameters)) {\r\n\t\t\t\tparameters = [parameters];\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in parameters) {\r\n\t\t\t\tmessage = message.replace('%s', parameters[i]);\r\n\t\t\t}\r\n\r\n\t\t\treturn message;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate a date\r\n\t\t *\r\n\t\t * @param {Number} year The full year in 4 digits\r\n\t\t * @param {Number} month The month number\r\n\t\t * @param {Number} day The day number\r\n\t\t * @param {Boolean} [notInFuture] If true, the date must not be in the future\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tdate: function(year, month, day, notInFuture) {\r\n\t\t\tif (isNaN(year) || isNaN(month) || isNaN(day)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tday   = parseInt(day, 10);\r\n\t\t\tmonth = parseInt(month, 10);\r\n\t\t\tyear  = parseInt(year, 10);\r\n\r\n\t\t\tif (year < 1000 || year > 9999 || month <= 0 || month > 12) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\t\t\t// Update the number of days in Feb of leap year\r\n\t\t\tif (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\r\n\t\t\t\tnumDays[1] = 29;\r\n\t\t\t}\r\n\r\n\t\t\t// Check the day\r\n\t\t\tif (day <= 0 || day > numDays[month - 1]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (notInFuture === true) {\r\n\t\t\t\tvar currentDate  = new Date(),\r\n\t\t\t\t\tcurrentYear  = currentDate.getFullYear(),\r\n\t\t\t\t\tcurrentMonth = currentDate.getMonth(),\r\n\t\t\t\t\tcurrentDay   = currentDate.getDate();\r\n\t\t\t\treturn (year < currentYear\r\n\t\t\t\t\t|| (year === currentYear && month - 1 < currentMonth)\r\n\t\t\t\t\t|| (year === currentYear && month - 1 === currentMonth && day < currentDay));\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Implement Luhn validation algorithm\r\n\t\t * Credit to https://gist.github.com/ShirtlessKirk/2134376\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Luhn\r\n\t\t * @param {String} value\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tluhn: function(value) {\r\n\t\t\tvar length  = value.length,\r\n\t\t\t\tmul     = 0,\r\n\t\t\t\tprodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\r\n\t\t\t\tsum     = 0;\r\n\r\n\t\t\twhile (length--) {\r\n\t\t\t\tsum += prodArr[mul][parseInt(value.charAt(length), 10)];\r\n\t\t\t\tmul ^= 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 10 === 0 && sum > 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Implement modulus 11, 10 (ISO 7064) algorithm\r\n\t\t *\r\n\t\t * @param {String} value\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tmod11And10: function(value) {\r\n\t\t\tvar check  = 5,\r\n\t\t\t\tlength = value.length;\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\tcheck = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;\r\n\t\t\t}\r\n\t\t\treturn (check === 1);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Implements Mod 37, 36 (ISO 7064) algorithm\r\n\t\t * Usages:\r\n\t\t * mod37And36('A12425GABC1234002M')\r\n\t\t * mod37And36('002006673085', '0123456789')\r\n\t\t *\r\n\t\t * @param {String} value\r\n\t\t * @param {String} [alphabet]\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tmod37And36: function(value, alphabet) {\r\n\t\t\talphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\t\t\tvar modulus = alphabet.length,\r\n\t\t\t\tlength  = value.length,\r\n\t\t\t\tcheck   = Math.floor(modulus / 2);\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\tcheck = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\r\n\t\t\t}\r\n\t\t\treturn (check === 1);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.base64 = $.extend($.fn.bootstrapValidator.i18n.base64 || {}, {\r\n\t\t'default': 'Please enter a valid base 64 encoded'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.base64 = {\r\n\t\t/**\r\n\t\t * Return true if the input value is a base 64 encoded string.\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.between = $.extend($.fn.bootstrapValidator.i18n.between || {}, {\r\n\t\t'default': 'Please enter a value between %s and %s',\r\n\t\tnotInclusive: 'Please enter a value between %s and %s strictly'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.between = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tmin: 'min',\r\n\t\t\tmax: 'max',\r\n\t\t\tinclusive: 'inclusive'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\tif ('range' === $field.attr('type')) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmin: $field.attr('min'),\r\n\t\t\t\t\tmax: $field.attr('max')\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is between (strictly or not) two given numbers\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - min\r\n\t\t * - max\r\n\t\t *\r\n\t\t * The min, max keys define the number which the field value compares to. min, max can be\r\n\t\t *      - A number\r\n\t\t *      - Name of field which its value defines the number\r\n\t\t *      - Name of callback function that returns the number\r\n\t\t *      - A callback function that returns the number\r\n\t\t *\r\n\t\t * - inclusive [optional]: Can be true or false. Default is true\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar min = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n\t\t\t\tmax = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max);\r\n\r\n\t\t\tvalue = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n\t\t\t\t? {\r\n\t\t\t\tvalid: value >= min && value <= max,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between['default'], [min, max])\r\n\t\t\t}\r\n\t\t\t\t: {\r\n\t\t\t\tvalid: value > min  && value <  max,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between.notInclusive, [min, max])\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.callback = $.extend($.fn.bootstrapValidator.i18n.callback || {}, {\r\n\t\t'default': 'Please enter a valid value'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.callback = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tcallback: 'callback'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return result from the callback method\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - callback: The callback method that passes 2 parameters:\r\n\t\t *      callback: function(fieldValue, validator, $field) {\r\n         *          // fieldValue is the value of field\r\n         *          // validator is instance of BootstrapValidator\r\n         *          // $field is the field element\r\n         *      }\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Deferred}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\r\n\t\t\tif (options.callback) {\r\n\t\t\t\tvar dfd      = new $.Deferred(),\r\n\t\t\t\t\tresponse = $.fn.bootstrapValidator.helpers.call(options.callback, [value, validator, $field]);\r\n\t\t\t\tdfd.resolve($field, 'callback', 'boolean' === typeof response ? response : response.valid, 'object' === typeof response && response.message ? response.message : null);\r\n\t\t\t\treturn dfd;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.choice = $.extend($.fn.bootstrapValidator.i18n.choice || {}, {\r\n\t\t'default': 'Please enter a valid value',\r\n\t\tless: 'Please choose %s options at minimum',\r\n\t\tmore: 'Please choose %s options at maximum',\r\n\t\tbetween: 'Please choose %s - %s options'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.choice = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tmin: 'min',\r\n\t\t\tmax: 'max'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if the number of checked boxes are less or more than a given number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consists of following keys:\r\n\t\t * - min\r\n\t\t * - max\r\n\t\t *\r\n\t\t * At least one of two keys is required\r\n\t\t * The min, max keys define the number which the field value compares to. min, max can be\r\n\t\t *      - A number\r\n\t\t *      - Name of field which its value defines the number\r\n\t\t *      - Name of callback function that returns the number\r\n\t\t *      - A callback function that returns the number\r\n\t\t *\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar numChoices = $field.is('select')\r\n\t\t\t\t\t? validator.getFieldElements($field.attr('data-bv-field')).find('option').filter(':selected').length\r\n\t\t\t\t\t: validator.getFieldElements($field.attr('data-bv-field')).filter(':checked').length,\r\n\t\t\t\tmin        = options.min ? ($.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min)) : null,\r\n\t\t\t\tmax        = options.max ? ($.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max)) : null,\r\n\t\t\t\tisValid    = true,\r\n\t\t\t\tmessage    = options.message || $.fn.bootstrapValidator.i18n.choice['default'];\r\n\r\n\t\t\tif ((min && numChoices < parseInt(min, 10)) || (max && numChoices > parseInt(max, 10))) {\r\n\t\t\t\tisValid = false;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase (!!min && !!max):\r\n\t\t\t\t\tmessage = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase (!!min):\r\n\t\t\t\t\tmessage = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.less, parseInt(min, 10));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase (!!max):\r\n\t\t\t\t\tmessage = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.more, parseInt(max, 10));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn { valid: isValid, message: message };\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.creditCard = $.extend($.fn.bootstrapValidator.i18n.creditCard || {}, {\r\n\t\t'default': 'Please enter a valid credit card number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.creditCard = {\r\n\t\t/**\r\n\t\t * Return true if the input value is valid credit card number\r\n\t\t * Based on https://gist.github.com/DiegoSalazar/4075533\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} [options] Can consist of the following key:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Accept only digits, dashes or spaces\r\n\t\t\tif (/[^0-9-\\s]+/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\D/g, '');\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.luhn(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate the card number based on prefix (IIN ranges) and length\r\n\t\t\tvar cards = {\r\n\t\t\t\tAMERICAN_EXPRESS: {\r\n\t\t\t\t\tlength: [15],\r\n\t\t\t\t\tprefix: ['34', '37']\r\n\t\t\t\t},\r\n\t\t\t\tDINERS_CLUB: {\r\n\t\t\t\t\tlength: [14],\r\n\t\t\t\t\tprefix: ['300', '301', '302', '303', '304', '305', '36']\r\n\t\t\t\t},\r\n\t\t\t\tDINERS_CLUB_US: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['54', '55']\r\n\t\t\t\t},\r\n\t\t\t\tDISCOVER: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n\t\t\t\t\t\t'62214', '62215', '62216', '62217', '62218', '62219',\r\n\t\t\t\t\t\t'6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n\t\t\t\t\t\t'62290', '62291', '622920', '622921', '622922', '622923',\r\n\t\t\t\t\t\t'622924', '622925', '644', '645', '646', '647', '648',\r\n\t\t\t\t\t\t'649', '65']\r\n\t\t\t\t},\r\n\t\t\t\tJCB: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n\t\t\t\t},\r\n\t\t\t\tLASER: {\r\n\t\t\t\t\tlength: [16, 17, 18, 19],\r\n\t\t\t\t\tprefix: ['6304', '6706', '6771', '6709']\r\n\t\t\t\t},\r\n\t\t\t\tMAESTRO: {\r\n\t\t\t\t\tlength: [12, 13, 14, 15, 16, 17, 18, 19],\r\n\t\t\t\t\tprefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n\t\t\t\t},\r\n\t\t\t\tMASTERCARD: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['51', '52', '53', '54', '55']\r\n\t\t\t\t},\r\n\t\t\t\tSOLO: {\r\n\t\t\t\t\tlength: [16, 18, 19],\r\n\t\t\t\t\tprefix: ['6334', '6767']\r\n\t\t\t\t},\r\n\t\t\t\tUNIONPAY: {\r\n\t\t\t\t\tlength: [16, 17, 18, 19],\r\n\t\t\t\t\tprefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n\t\t\t\t\t\t'62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n\t\t\t\t\t\t'6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n\t\t\t\t\t\t'622920', '622921', '622922', '622923', '622924', '622925']\r\n\t\t\t\t},\r\n\t\t\t\tVISA: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['4']\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar type, i;\r\n\t\t\tfor (type in cards) {\r\n\t\t\t\tfor (i in cards[type].prefix) {\r\n\t\t\t\t\tif (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]     // Check the prefix\r\n\t\t\t\t\t\t&& $.inArray(value.length, cards[type].length) !== -1)                      // and length\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.cusip = $.extend($.fn.bootstrapValidator.i18n.cusip || {}, {\r\n\t\t'default': 'Please enter a valid CUSIP number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.cusip = {\r\n\t\t/**\r\n\t\t * Validate a CUSIP\r\n\t\t * Examples:\r\n\t\t * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6\r\n\t\t * - Invalid: 31430F200, 022615AC2\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/CUSIP\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} [options] Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.toUpperCase();\r\n\t\t\tif (!/^[0-9A-Z]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar converted = $.map(value.split(''), function(item) {\r\n\t\t\t\t\tvar code = item.charCodeAt(0);\r\n\t\t\t\t\treturn (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n\t\t\t\t\t\t// Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n\t\t\t\t\t\t? (code - 'A'.charCodeAt(0) + 10)\r\n\t\t\t\t\t\t: item;\r\n\t\t\t\t}),\r\n\t\t\t\tlength    = converted.length,\r\n\t\t\t\tsum       = 0;\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tvar num = parseInt(converted[i], 10);\r\n\t\t\t\tif (i % 2 !== 0) {\r\n\t\t\t\t\tnum *= 2;\r\n\t\t\t\t}\r\n\t\t\t\tif (num > 9) {\r\n\t\t\t\t\tnum -= 9;\r\n\t\t\t\t}\r\n\t\t\t\tsum += num;\r\n\t\t\t}\r\n\r\n\t\t\tsum = (10 - (sum % 10)) % 10;\r\n\t\t\treturn sum === converted[length - 1];\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.cvv = $.extend($.fn.bootstrapValidator.i18n.cvv || {}, {\r\n\t\t'default': 'Please enter a valid CVV number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.cvv = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tccfield: 'creditCardField'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is a valid CVV number.\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - creditCardField: The credit card number field. It can be null\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!/^[0-9]{3,4}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!options.creditCardField) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Get the credit card number\r\n\t\t\tvar creditCard = validator.getFieldElements(options.creditCardField).val();\r\n\t\t\tif (creditCard === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tcreditCard = creditCard.replace(/\\D/g, '');\r\n\r\n\t\t\t// Supported credit card types\r\n\t\t\tvar cards = {\r\n\t\t\t\tAMERICAN_EXPRESS: {\r\n\t\t\t\t\tlength: [15],\r\n\t\t\t\t\tprefix: ['34', '37']\r\n\t\t\t\t},\r\n\t\t\t\tDINERS_CLUB: {\r\n\t\t\t\t\tlength: [14],\r\n\t\t\t\t\tprefix: ['300', '301', '302', '303', '304', '305', '36']\r\n\t\t\t\t},\r\n\t\t\t\tDINERS_CLUB_US: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['54', '55']\r\n\t\t\t\t},\r\n\t\t\t\tDISCOVER: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n\t\t\t\t\t\t'62214', '62215', '62216', '62217', '62218', '62219',\r\n\t\t\t\t\t\t'6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n\t\t\t\t\t\t'62290', '62291', '622920', '622921', '622922', '622923',\r\n\t\t\t\t\t\t'622924', '622925', '644', '645', '646', '647', '648',\r\n\t\t\t\t\t\t'649', '65']\r\n\t\t\t\t},\r\n\t\t\t\tJCB: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n\t\t\t\t},\r\n\t\t\t\tLASER: {\r\n\t\t\t\t\tlength: [16, 17, 18, 19],\r\n\t\t\t\t\tprefix: ['6304', '6706', '6771', '6709']\r\n\t\t\t\t},\r\n\t\t\t\tMAESTRO: {\r\n\t\t\t\t\tlength: [12, 13, 14, 15, 16, 17, 18, 19],\r\n\t\t\t\t\tprefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n\t\t\t\t},\r\n\t\t\t\tMASTERCARD: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['51', '52', '53', '54', '55']\r\n\t\t\t\t},\r\n\t\t\t\tSOLO: {\r\n\t\t\t\t\tlength: [16, 18, 19],\r\n\t\t\t\t\tprefix: ['6334', '6767']\r\n\t\t\t\t},\r\n\t\t\t\tUNIONPAY: {\r\n\t\t\t\t\tlength: [16, 17, 18, 19],\r\n\t\t\t\t\tprefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n\t\t\t\t\t\t'62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n\t\t\t\t\t\t'6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n\t\t\t\t\t\t'622920', '622921', '622922', '622923', '622924', '622925']\r\n\t\t\t\t},\r\n\t\t\t\tVISA: {\r\n\t\t\t\t\tlength: [16],\r\n\t\t\t\t\tprefix: ['4']\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tvar type, i, creditCardType = null;\r\n\t\t\tfor (type in cards) {\r\n\t\t\t\tfor (i in cards[type].prefix) {\r\n\t\t\t\t\tif (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]    // Check the prefix\r\n\t\t\t\t\t\t&& $.inArray(creditCard.length, cards[type].length) !== -1)                     // and length\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcreditCardType = type;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn (creditCardType === null)\r\n\t\t\t\t? false\r\n\t\t\t\t: (('AMERICAN_EXPRESS' === creditCardType) ? (value.length === 4) : (value.length === 3));\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.date = $.extend($.fn.bootstrapValidator.i18n.date || {}, {\r\n\t\t'default': 'Please enter a valid date'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.date = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tformat: 'format',\r\n\t\t\tseparator: 'separator'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is valid date\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * - separator: Use to separate the date, month, and year.\r\n\t\t * By default, it is /\r\n\t\t * - format: The date format. Default is MM/DD/YYYY\r\n\t\t * The format can be:\r\n\t\t *\r\n\t\t * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option\r\n\t\t * ii) date and time:\r\n\t\t * The time can consist of h, m, s parts which are separated by :\r\n\t\t * ii) date, time and A (indicating AM or PM)\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\toptions.format = options.format || 'MM/DD/YYYY';\r\n\r\n\t\t\tvar formats    = options.format.split(' '),\r\n\t\t\t\tdateFormat = formats[0],\r\n\t\t\t\ttimeFormat = (formats.length > 1) ? formats[1] : null,\r\n\t\t\t\tamOrPm     = (formats.length > 2) ? formats[2] : null,\r\n\t\t\t\tsections   = value.split(' '),\r\n\t\t\t\tdate       = sections[0],\r\n\t\t\t\ttime       = (sections.length > 1) ? sections[1] : null;\r\n\r\n\t\t\tif (formats.length !== sections.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the separator\r\n\t\t\tvar separator = options.separator;\r\n\t\t\tif (!separator) {\r\n\t\t\t\tseparator = (date.indexOf('/') !== -1) ? '/' : ((date.indexOf('-') !== -1) ? '-' : null);\r\n\t\t\t}\r\n\t\t\tif (separator === null || date.indexOf(separator) === -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the date\r\n\t\t\tdate       = date.split(separator);\r\n\t\t\tdateFormat = dateFormat.split(separator);\r\n\t\t\tif (date.length !== dateFormat.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar year  = date[$.inArray('YYYY', dateFormat)],\r\n\t\t\t\tmonth = date[$.inArray('MM', dateFormat)],\r\n\t\t\t\tday   = date[$.inArray('DD', dateFormat)];\r\n\r\n\t\t\tif (!year || !month || !day) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the time\r\n\t\t\tvar minutes = null, hours = null, seconds = null;\r\n\t\t\tif (timeFormat) {\r\n\t\t\t\ttimeFormat = timeFormat.split(':');\r\n\t\t\t\ttime       = time.split(':');\r\n\r\n\t\t\t\tif (timeFormat.length !== time.length) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\thours   = time.length > 0 ? time[0] : null;\r\n\t\t\t\tminutes = time.length > 1 ? time[1] : null;\r\n\t\t\t\tseconds = time.length > 2 ? time[2] : null;\r\n\r\n\t\t\t\t// Validate seconds\r\n\t\t\t\tif (seconds) {\r\n\t\t\t\t\tseconds = parseInt(seconds, 10);\r\n\t\t\t\t\tif (isNaN(seconds) || seconds < 0 || seconds > 60) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Validate hours\r\n\t\t\t\tif (hours) {\r\n\t\t\t\t\thours = parseInt(hours, 10);\r\n\t\t\t\t\tif (isNaN(hours) || hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Validate minutes\r\n\t\t\t\tif (minutes) {\r\n\t\t\t\t\tminutes = parseInt(minutes, 10);\r\n\t\t\t\t\tif (isNaN(minutes) || minutes < 0 || minutes > 59) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Validate day, month, and year\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.date(year, month, day);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.different = $.extend($.fn.bootstrapValidator.i18n.different || {}, {\r\n\t\t'default': 'Please enter a different value'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.different = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tfield: 'field'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is different with given field's value\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consists of the following key:\r\n\t\t * - field: The name of field that will be used to compare with current one\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar compareWith = validator.getFieldElements(options.field);\r\n\t\t\tif (compareWith === null) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (value !== compareWith.val()) {\r\n\t\t\t\tvalidator.updateStatus(options.field, validator.STATUS_VALID, 'different');\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.digits = $.extend($.fn.bootstrapValidator.i18n.digits || {}, {\r\n\t\t'default': 'Please enter only digits'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.digits = {\r\n\t\t/**\r\n\t\t * Return true if the input value contains digits only\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator Validate plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} [options]\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^\\d+$/.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.ean = $.extend($.fn.bootstrapValidator.i18n.ean || {}, {\r\n\t\t'default': 'Please enter a valid EAN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.ean = {\r\n\t\t/**\r\n\t\t * Validate EAN (International Article Number)\r\n\t\t * Examples:\r\n\t\t * - Valid: 73513537, 9780471117094, 4006381333931\r\n\t\t * - Invalid: 73513536\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/European_Article_Number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!/^(\\d{8}|\\d{12}|\\d{13})$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar length = value.length,\r\n\t\t\t\tsum    = 0,\r\n\t\t\t\tweight = (length === 8) ? [3, 1] : [1, 3];\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n\t\t\t}\r\n\t\t\tsum = (10 - sum % 10) % 10;\r\n\t\t\treturn (sum + '' === value.charAt(length - 1));\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.emailAddress = $.extend($.fn.bootstrapValidator.i18n.emailAddress || {}, {\r\n\t\t'default': 'Please enter a valid email address'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.emailAddress = {\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\treturn ('email' === $field.attr('type'));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if and only if the input value is a valid email address\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator Validate plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} [options]\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Email address regular expression\r\n\t\t\t// http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n\t\t\tvar emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\t\t\treturn emailRegExp.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.file = $.extend($.fn.bootstrapValidator.i18n.file || {}, {\r\n\t\t'default': 'Please choose a valid file'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.file = {\r\n\t\thtml5Attributes: {\r\n\t\t\textension: 'extension',\r\n\t\t\tmaxsize: 'maxSize',\r\n\t\t\tmessage: 'message',\r\n\t\t\ttype: 'type'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate upload file. Use HTML 5 API if the browser supports\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - extension: The allowed extensions, separated by a comma\r\n\t\t * - maxSize: The maximum size in bytes\r\n\t\t * - message: The invalid message\r\n\t\t * - type: The allowed MIME type, separated by a comma\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar ext,\r\n\t\t\t\textensions = options.extension ? options.extension.toLowerCase().split(',') : null,\r\n\t\t\t\ttypes      = options.type      ? options.type.toLowerCase().split(',')      : null,\r\n\t\t\t\thtml5      = (window.File && window.FileList && window.FileReader);\r\n\r\n\t\t\tif (html5) {\r\n\t\t\t\t// Get FileList instance\r\n\t\t\t\tvar files = $field.get(0).files,\r\n\t\t\t\t\ttotal = files.length;\r\n\t\t\t\tfor (var i = 0; i < total; i++) {\r\n\t\t\t\t\t// Check file size\r\n\t\t\t\t\tif (options.maxSize && files[i].size > parseInt(options.maxSize, 10)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Check file extension\r\n\t\t\t\t\text = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);\r\n\t\t\t\t\tif (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Check file type\r\n\t\t\t\t\tif (types && $.inArray(files[i].type.toLowerCase(), types) === -1) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Check file extension\r\n\t\t\t\text = value.substr(value.lastIndexOf('.') + 1);\r\n\t\t\t\tif (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.greaterThan = $.extend($.fn.bootstrapValidator.i18n.greaterThan || {}, {\r\n\t\t'default': 'Please enter a value greater than or equal to %s',\r\n\t\tnotInclusive: 'Please enter a value greater than %s'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.greaterThan = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tvalue: 'value',\r\n\t\t\tinclusive: 'inclusive'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\tvar min = $field.attr('min');\r\n\t\t\tif (min) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalue: min\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is greater than or equals to given number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator Validate plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - value: Define the number to compare with. It can be\r\n\t\t *      - A number\r\n\t\t *      - Name of field which its value defines the number\r\n\t\t *      - Name of callback function that returns the number\r\n\t\t *      - A callback function that returns the number\r\n\t\t *\r\n\t\t * - inclusive [optional]: Can be true or false. Default is true\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\r\n\r\n\t\t\tvalue = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n\t\t\t\t? {\r\n\t\t\t\tvalid: value >= compareTo,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan['default'], compareTo)\r\n\t\t\t}\r\n\t\t\t\t: {\r\n\t\t\t\tvalid: value > compareTo,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan.notInclusive, compareTo)\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.grid = $.extend($.fn.bootstrapValidator.i18n.grid || {}, {\r\n\t\t'default': 'Please enter a valid GRId number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.grid = {\r\n\t\t/**\r\n\t\t * Validate GRId (Global Release Identifier)\r\n\t\t * Examples:\r\n\t\t * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M\r\n\t\t * - Invalid: A1-2425G-ABC1234002-Q\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Global_Release_Identifier\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.toUpperCase();\r\n\t\t\tif (!/^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\s/g, '').replace(/-/g, '');\r\n\t\t\tif ('GRID:' === value.substr(0, 5)) {\r\n\t\t\t\tvalue = value.substr(5);\r\n\t\t\t}\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.mod37And36(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.hex = $.extend($.fn.bootstrapValidator.i18n.hex || {}, {\r\n\t\t'default': 'Please enter a valid hexadecimal number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.hex = {\r\n\t\t/**\r\n\t\t * Return true if and only if the input value is a valid hexadecimal number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^[0-9a-fA-F]+$/.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.hexColor = $.extend($.fn.bootstrapValidator.i18n.hexColor || {}, {\r\n\t\t'default': 'Please enter a valid hex color'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.hexColor = {\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\treturn ('color' === $field.attr('type'));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is a valid hex color\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.iban = $.extend($.fn.bootstrapValidator.i18n.iban || {}, {\r\n\t\t'default': 'Please enter a valid IBAN number',\r\n\t\tcountryNotSupported: 'The country code %s is not supported',\r\n\t\tcountry: 'Please enter a valid IBAN number in %s',\r\n\t\tcountries: {\r\n\t\t\tAD: 'Andorra',\r\n\t\t\tAE: 'United Arab Emirates',\r\n\t\t\tAL: 'Albania',\r\n\t\t\tAO: 'Angola',\r\n\t\t\tAT: 'Austria',\r\n\t\t\tAZ: 'Azerbaijan',\r\n\t\t\tBA: 'Bosnia and Herzegovina',\r\n\t\t\tBE: 'Belgium',\r\n\t\t\tBF: 'Burkina Faso',\r\n\t\t\tBG: 'Bulgaria',\r\n\t\t\tBH: 'Bahrain',\r\n\t\t\tBI: 'Burundi',\r\n\t\t\tBJ: 'Benin',\r\n\t\t\tBR: 'Brazil',\r\n\t\t\tCH: 'Switzerland',\r\n\t\t\tCI: 'Ivory Coast',\r\n\t\t\tCM: 'Cameroon',\r\n\t\t\tCR: 'Costa Rica',\r\n\t\t\tCV: 'Cape Verde',\r\n\t\t\tCY: 'Cyprus',\r\n\t\t\tCZ: 'Czech Republic',\r\n\t\t\tDE: 'Germany',\r\n\t\t\tDK: 'Denmark',\r\n\t\t\tDO: 'Dominican Republic',\r\n\t\t\tDZ: 'Algeria',\r\n\t\t\tEE: 'Estonia',\r\n\t\t\tES: 'Spain',\r\n\t\t\tFI: 'Finland',\r\n\t\t\tFO: 'Faroe Islands',\r\n\t\t\tFR: 'France',\r\n\t\t\tGB: 'United Kingdom',\r\n\t\t\tGE: 'Georgia',\r\n\t\t\tGI: 'Gibraltar',\r\n\t\t\tGL: 'Greenland',\r\n\t\t\tGR: 'Greece',\r\n\t\t\tGT: 'Guatemala',\r\n\t\t\tHR: 'Croatia',\r\n\t\t\tHU: 'Hungary',\r\n\t\t\tIE: 'Ireland',\r\n\t\t\tIL: 'Israel',\r\n\t\t\tIR: 'Iran',\r\n\t\t\tIS: 'Iceland',\r\n\t\t\tIT: 'Italy',\r\n\t\t\tJO: 'Jordan',\r\n\t\t\tKW: 'Kuwait',\r\n\t\t\tKZ: 'Kazakhstan',\r\n\t\t\tLB: 'Lebanon',\r\n\t\t\tLI: 'Liechtenstein',\r\n\t\t\tLT: 'Lithuania',\r\n\t\t\tLU: 'Luxembourg',\r\n\t\t\tLV: 'Latvia',\r\n\t\t\tMC: 'Monaco',\r\n\t\t\tMD: 'Moldova',\r\n\t\t\tME: 'Montenegro',\r\n\t\t\tMG: 'Madagascar',\r\n\t\t\tMK: 'Macedonia',\r\n\t\t\tML: 'Mali',\r\n\t\t\tMR: 'Mauritania',\r\n\t\t\tMT: 'Malta',\r\n\t\t\tMU: 'Mauritius',\r\n\t\t\tMZ: 'Mozambique',\r\n\t\t\tNL: 'Netherlands',\r\n\t\t\tNO: 'Norway',\r\n\t\t\tPK: 'Pakistan',\r\n\t\t\tPL: 'Poland',\r\n\t\t\tPS: 'Palestinian',\r\n\t\t\tPT: 'Portugal',\r\n\t\t\tQA: 'Qatar',\r\n\t\t\tRO: 'Romania',\r\n\t\t\tRS: 'Serbia',\r\n\t\t\tSA: 'Saudi Arabia',\r\n\t\t\tSE: 'Sweden',\r\n\t\t\tSI: 'Slovenia',\r\n\t\t\tSK: 'Slovakia',\r\n\t\t\tSM: 'San Marino',\r\n\t\t\tSN: 'Senegal',\r\n\t\t\tTN: 'Tunisia',\r\n\t\t\tTR: 'Turkey',\r\n\t\t\tVG: 'Virgin Islands, British'\r\n\t\t}\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.iban = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tcountry: 'country'\r\n\t\t},\r\n\r\n\t\t// http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\r\n\t\t// http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\r\n\t\tREGEX: {\r\n\t\t\t'AD': 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',                     // Andorra\r\n\t\t\t'AE': 'AE[0-9]{2}[0-9]{3}[0-9]{16}',                                // United Arab Emirates\r\n\t\t\t'AL': 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',                             // Albania\r\n\t\t\t'AO': 'AO[0-9]{2}[0-9]{21}',                                        // Angola\r\n\t\t\t'AT': 'AT[0-9]{2}[0-9]{5}[0-9]{11}',                                // Austria\r\n\t\t\t'AZ': 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',                             // Azerbaijan\r\n\t\t\t'BA': 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',                 // Bosnia and Herzegovina\r\n\t\t\t'BE': 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',                         // Belgium\r\n\t\t\t'BF': 'BF[0-9]{2}[0-9]{23}',                                        // Burkina Faso\r\n\t\t\t'BG': 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',              // Bulgaria\r\n\t\t\t'BH': 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',                             // Bahrain\r\n\t\t\t'BI': 'BI[0-9]{2}[0-9]{12}',                                        // Burundi\r\n\t\t\t'BJ': 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Benin\r\n\t\t\t'BR': 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',           // Brazil\r\n\t\t\t'CH': 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                             // Switzerland\r\n\t\t\t'CI': 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Ivory Coast\r\n\t\t\t'CM': 'CM[0-9]{2}[0-9]{23}',                                        // Cameroon\r\n\t\t\t'CR': 'CR[0-9]{2}[0-9]{3}[0-9]{14}',                                // Costa Rica\r\n\t\t\t'CV': 'CV[0-9]{2}[0-9]{21}',                                        // Cape Verde\r\n\t\t\t'CY': 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',                     // Cyprus\r\n\t\t\t'CZ': 'CZ[0-9]{2}[0-9]{20}',                                        // Czech Republic\r\n\t\t\t'DE': 'DE[0-9]{2}[0-9]{8}[0-9]{10}',                                // Germany\r\n\t\t\t'DK': 'DK[0-9]{2}[0-9]{14}',                                        // Denmark\r\n\t\t\t'DO': 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',                             // Dominican Republic\r\n\t\t\t'DZ': 'DZ[0-9]{2}[0-9]{20}',                                        // Algeria\r\n\t\t\t'EE': 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',                // Estonia\r\n\t\t\t'ES': 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',        // Spain\r\n\t\t\t'FI': 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',                         // Finland\r\n\t\t\t'FO': 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                         // Faroe Islands\r\n\t\t\t'FR': 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',             // France\r\n\t\t\t'GB': 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                         // United Kingdom\r\n\t\t\t'GE': 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',                                // Georgia\r\n\t\t\t'GI': 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',                             // Gibraltar\r\n\t\t\t'GL': 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                         // Greenland\r\n\t\t\t'GR': 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',                     // Greece\r\n\t\t\t'GT': 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',                          // Guatemala\r\n\t\t\t'HR': 'HR[0-9]{2}[0-9]{7}[0-9]{10}',                                // Croatia\r\n\t\t\t'HU': 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',        // Hungary\r\n\t\t\t'IE': 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                         // Ireland\r\n\t\t\t'IL': 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',                        // Israel\r\n\t\t\t'IR': 'IR[0-9]{2}[0-9]{22}',                                        // Iran\r\n\t\t\t'IS': 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',                // Iceland\r\n\t\t\t'IT': 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',             // Italy\r\n\t\t\t'JO': 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',               // Jordan\r\n\t\t\t'KW': 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',                                // Kuwait\r\n\t\t\t'KZ': 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                             // Kazakhstan\r\n\t\t\t'LB': 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',                             // Lebanon\r\n\t\t\t'LI': 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                             // Liechtenstein\r\n\t\t\t'LT': 'LT[0-9]{2}[0-9]{5}[0-9]{11}',                                // Lithuania\r\n\t\t\t'LU': 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                             // Luxembourg\r\n\t\t\t'LV': 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',                             // Latvia\r\n\t\t\t'MC': 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',             // Monaco\r\n\t\t\t'MD': 'MD[0-9]{2}[A-Z0-9]{20}',                                     // Moldova\r\n\t\t\t'ME': 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Montenegro\r\n\t\t\t'MG': 'MG[0-9]{2}[0-9]{23}',                                        // Madagascar\r\n\t\t\t'MK': 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',                     // Macedonia\r\n\t\t\t'ML': 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Mali\r\n\t\t\t'MR': 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',                      // Mauritania\r\n\t\t\t'MT': 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',                     // Malta\r\n\t\t\t'MU': 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',// Mauritius\r\n\t\t\t'MZ': 'MZ[0-9]{2}[0-9]{21}',                                        // Mozambique\r\n\t\t\t'NL': 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',                                // Netherlands\r\n\t\t\t'NO': 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',                         // Norway\r\n\t\t\t'PK': 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                             // Pakistan\r\n\t\t\t'PL': 'PL[0-9]{2}[0-9]{8}[0-9]{16}',                                // Poland\r\n\t\t\t'PS': 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                             // Palestinian\r\n\t\t\t'PT': 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',                // Portugal\r\n\t\t\t'QA': 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                             // Qatar\r\n\t\t\t'RO': 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                             // Romania\r\n\t\t\t'RS': 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Serbia\r\n\t\t\t'SA': 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',                             // Saudi Arabia\r\n\t\t\t'SE': 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',                        // Sweden\r\n\t\t\t'SI': 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',                         // Slovenia\r\n\t\t\t'SK': 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',                        // Slovakia\r\n\t\t\t'SM': 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',             // San Marino\r\n\t\t\t'SN': 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Senegal\r\n\t\t\t'TN': 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                      // Tunisia\r\n\t\t\t'TR': 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',                  // Turkey\r\n\t\t\t'VG': 'VG[0-9]{2}[A-Z]{4}[0-9]{16}'                                 // Virgin Islands, British\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate an International Bank Account Number (IBAN)\r\n\t\t * To test it, take the sample IBAN from\r\n\t\t * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * - country: The ISO 3166-1 country code. It can be\r\n\t\t *      - A country code\r\n\t\t *      - Name of field which its value defines the country code\r\n\t\t *      - Name of callback function that returns the country code\r\n\t\t *      - A callback function that returns the country code\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\r\n\t\t\tvar country = options.country;\r\n\t\t\tif (!country) {\r\n\t\t\t\tcountry = value.substr(0, 2);\r\n\t\t\t} else if (typeof country !== 'string' || !this.REGEX[country]) {\r\n\t\t\t\t// Determine the country code\r\n\t\t\t\tcountry = validator.getDynamicOption($field, country);\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.REGEX[country]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalid: false,\r\n\t\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.iban.countryNotSupported, country)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (!(new RegExp('^' + this.REGEX[country] + '$')).test(value)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalid: false,\r\n\t\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(4) + value.substr(0, 4);\r\n\t\t\tvalue = $.map(value.split(''), function(n) {\r\n\t\t\t\tvar code = n.charCodeAt(0);\r\n\t\t\t\treturn (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n\t\t\t\t\t// Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n\t\t\t\t\t? (code - 'A'.charCodeAt(0) + 10)\r\n\t\t\t\t\t: n;\r\n\t\t\t});\r\n\t\t\tvalue = value.join('');\r\n\r\n\t\t\tvar temp   = parseInt(value.substr(0, 1), 10),\r\n\t\t\t\tlength = value.length;\r\n\t\t\tfor (var i = 1; i < length; ++i) {\r\n\t\t\t\ttemp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalid: (temp === 1),\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.id = $.extend($.fn.bootstrapValidator.i18n.id || {}, {\r\n\t\t'default': 'Please enter a valid identification number',\r\n\t\tcountryNotSupported: 'The country code %s is not supported',\r\n\t\tcountry: 'Please enter a valid %s identification number',\r\n\t\tcountries: {\r\n\t\t\tBA: 'Bosnia and Herzegovina',\r\n\t\t\tBG: 'Bulgarian',\r\n\t\t\tBR: 'Brazilian',\r\n\t\t\tCH: 'Swiss',\r\n\t\t\tCL: 'Chilean',\r\n\t\t\tCZ: 'Czech',\r\n\t\t\tDK: 'Danish',\r\n\t\t\tEE: 'Estonian',\r\n\t\t\tES: 'Spanish',\r\n\t\t\tFI: 'Finnish',\r\n\t\t\tHR: 'Croatian',\r\n\t\t\tIE: 'Irish',\r\n\t\t\tIS: 'Iceland',\r\n\t\t\tLT: 'Lithuanian',\r\n\t\t\tLV: 'Latvian',\r\n\t\t\tME: 'Montenegro',\r\n\t\t\tMK: 'Macedonian',\r\n\t\t\tNL: 'Dutch',\r\n\t\t\tRO: 'Romanian',\r\n\t\t\tRS: 'Serbian',\r\n\t\t\tSE: 'Swedish',\r\n\t\t\tSI: 'Slovenian',\r\n\t\t\tSK: 'Slovak',\r\n\t\t\tSM: 'San Marino',\r\n\t\t\tZA: 'South African'\r\n\t\t}\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.id = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tcountry: 'country'\r\n\t\t},\r\n\r\n\t\t// Supported country codes\r\n\t\tCOUNTRY_CODES: [\r\n\t\t\t'BA', 'BG', 'BR', 'CH', 'CL', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL',\r\n\t\t\t'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'ZA'\r\n\t\t],\r\n\r\n\t\t/**\r\n\t\t * Validate identification number in different countries\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - country: The ISO 3166-1 country code. It can be\r\n\t\t *      - One of country code defined in COUNTRY_CODES\r\n\t\t *      - Name of field which its value defines the country code\r\n\t\t *      - Name of callback function that returns the country code\r\n\t\t *      - A callback function that returns the country code\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar country = options.country;\r\n\t\t\tif (!country) {\r\n\t\t\t\tcountry = value.substr(0, 2);\r\n\t\t\t} else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n\t\t\t\t// Determine the country code\r\n\t\t\t\tcountry = validator.getDynamicOption($field, country);\r\n\t\t\t}\r\n\r\n\t\t\tif ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n\t\t\t\treturn { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.id.countryNotSupported, country) };\r\n\t\t\t}\r\n\r\n\t\t\tvar method  = ['_', country.toLowerCase()].join('');\r\n\t\t\treturn this[method](value)\r\n\t\t\t\t? true\r\n\t\t\t\t: {\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.id.country, $.fn.bootstrapValidator.i18n.id.countries[country.toUpperCase()])\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Unique Master Citizen Number which uses in\r\n\t\t * - Bosnia and Herzegovina (country code: BA)\r\n\t\t * - Macedonia (MK)\r\n\t\t * - Montenegro (ME)\r\n\t\t * - Serbia (RS)\r\n\t\t * - Slovenia (SI)\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\r\n\t\t * @param {String} value The ID\r\n\t\t * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_validateJMBG: function(value, countryCode) {\r\n\t\t\tif (!/^\\d{13}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar day   = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tyear  = parseInt(value.substr(4, 3), 10),\r\n\t\t\t\trr    = parseInt(value.substr(7, 2), 10),\r\n\t\t\t\tk     = parseInt(value.substr(12, 1), 10);\r\n\r\n\t\t\t// Validate date of birth\r\n\t\t\t// FIXME: Validate the year of birth\r\n\t\t\tif (day > 31 || month > 12) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate checksum\r\n\t\t\tvar sum = 0;\r\n\t\t\tfor (var i = 0; i < 6; i++) {\r\n\t\t\t\tsum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\r\n\t\t\t}\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\tif (sum === 10 || sum === 11) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\tif (sum !== k) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate political region\r\n\t\t\t// rr is the political region of birth, which can be in ranges:\r\n\t\t\t// 10-19: Bosnia and Herzegovina\r\n\t\t\t// 20-29: Montenegro\r\n\t\t\t// 30-39: Croatia (not used anymore)\r\n\t\t\t// 41-49: Macedonia\r\n\t\t\t// 50-59: Slovenia (only 50 is used)\r\n\t\t\t// 70-79: Central Serbia\r\n\t\t\t// 80-89: Serbian province of Vojvodina\r\n\t\t\t// 90-99: Kosovo\r\n\t\t\tswitch (countryCode.toUpperCase()) {\r\n\t\t\t\tcase 'BA':\r\n\t\t\t\t\treturn (10 <= rr && rr <= 19);\r\n\t\t\t\tcase 'MK':\r\n\t\t\t\t\treturn (41 <= rr && rr <= 49);\r\n\t\t\t\tcase 'ME':\r\n\t\t\t\t\treturn (20 <= rr && rr <= 29);\r\n\t\t\t\tcase 'RS':\r\n\t\t\t\t\treturn (70 <= rr && rr <= 99);\r\n\t\t\t\tcase 'SI':\r\n\t\t\t\t\treturn (50 <= rr && rr <= 59);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_ba: function(value) {\r\n\t\t\treturn this._validateJMBG(value, 'BA');\r\n\t\t},\r\n\t\t_mk: function(value) {\r\n\t\t\treturn this._validateJMBG(value, 'MK');\r\n\t\t},\r\n\t\t_me: function(value) {\r\n\t\t\treturn this._validateJMBG(value, 'ME');\r\n\t\t},\r\n\t\t_rs: function(value) {\r\n\t\t\treturn this._validateJMBG(value, 'RS');\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Examples: 0101006500006\r\n\t\t */\r\n\t\t_si: function(value) {\r\n\t\t\treturn this._validateJMBG(value, 'SI');\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Bulgarian national identification number (EGN)\r\n\t\t * Examples:\r\n\t\t * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030\r\n\t\t * - Invalid: 8019010008\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Uniform_civil_number\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_bg: function(value) {\r\n\t\t\tif (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\s/g, '');\r\n\t\t\t// Check the birth date\r\n\t\t\tvar year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tday   = parseInt(value.substr(4, 2), 10);\r\n\t\t\tif (month > 40) {\r\n\t\t\t\tyear += 100;\r\n\t\t\t\tmonth -= 40;\r\n\t\t\t} else if (month > 20) {\r\n\t\t\t\tyear -= 100;\r\n\t\t\t\tmonth -= 20;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = (sum % 11) % 10;\r\n\t\t\treturn (sum + '' === value.substr(9, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Brazilian national identification number (CPF)\r\n\t\t * Examples:\r\n\t\t * - Valid: 39053344705, 390.533.447-05, 111.444.777-35\r\n\t\t * - Invalid: 231.002.999-00\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_br: function(value) {\r\n\t\t\tif (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!/^\\d{11}$/.test(value) && !/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\./g, '').replace(/-/g, '');\r\n\r\n\t\t\tvar d1 = 0;\r\n\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\td1 += (10 - i) * parseInt(value.charAt(i), 10);\r\n\t\t\t}\r\n\t\t\td1 = 11 - d1 % 11;\r\n\t\t\tif (d1 === 10 || d1 === 11) {\r\n\t\t\t\td1 = 0;\r\n\t\t\t}\r\n\t\t\tif (d1 + '' !== value.charAt(9)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar d2 = 0;\r\n\t\t\tfor (i = 0; i < 10; i++) {\r\n\t\t\t\td2 += (11 - i) * parseInt(value.charAt(i), 10);\r\n\t\t\t}\r\n\t\t\td2 = 11 - d2 % 11;\r\n\t\t\tif (d2 === 10 || d2 === 11) {\r\n\t\t\t\td2 = 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn (d2 + '' === value.charAt(10));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Swiss Social Security Number (AHV-Nr/No AVS)\r\n\t\t * Examples:\r\n\t\t * - Valid: 756.1234.5678.95, 7561234567895\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\r\n\t\t * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ch: function(value) {\r\n\t\t\tif (!/^756[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{2}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\D/g, '').substr(3);\r\n\t\t\tvar length = value.length,\r\n\t\t\t\tsum    = 0,\r\n\t\t\t\tweight = (length === 8) ? [3, 1] : [1, 3];\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n\t\t\t}\r\n\t\t\tsum = 10 - sum % 10;\r\n\t\t\treturn (sum + '' === value.charAt(length - 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Chilean national identification number (RUN/RUT)\r\n\t\t * Examples:\r\n\t\t * - Valid: 76086428-5, 22060449-7, 12531909-2\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\r\n\t\t * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_cl: function(value) {\r\n\t\t\tif (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\-/g, '');\r\n\t\t\twhile (value.length < 9) {\r\n\t\t\t\tvalue = '0' + value;\r\n\t\t\t}\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\tif (sum === 11) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t} else if (sum === 10) {\r\n\t\t\t\tsum = 'K';\r\n\t\t\t}\r\n\t\t\treturn sum + '' === value.charAt(8).toUpperCase();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Czech national identification number (RC)\r\n\t\t * Examples:\r\n\t\t * - Valid: 7103192745, 991231123\r\n\t\t * - Invalid: 1103492745, 590312123\r\n\t\t *\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_cz: function(value) {\r\n\t\t\tif (!/^\\d{9,10}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tmonth = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n\t\t\t\tday   = parseInt(value.substr(4, 2), 10);\r\n\t\t\tif (value.length === 9) {\r\n\t\t\t\tif (year >= 1980) {\r\n\t\t\t\t\tyear -= 100;\r\n\t\t\t\t}\r\n\t\t\t\tif (year > 1953) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else if (year < 1954) {\r\n\t\t\t\tyear += 100;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the birth date is not in the future\r\n\t\t\tif (value.length === 10) {\r\n\t\t\t\tvar check = parseInt(value.substr(0, 9), 10) % 11;\r\n\t\t\t\tif (year < 1985) {\r\n\t\t\t\t\tcheck = check % 10;\r\n\t\t\t\t}\r\n\t\t\t\treturn (check + '' === value.substr(9, 1));\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Danish Personal Identification number (CPR)\r\n\t\t * Examples:\r\n\t\t * - Valid: 2110625629, 211062-5629\r\n\t\t * - Invalid: 511062-5629\r\n\t\t *\r\n\t\t * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_dk: function(value) {\r\n\t\t\tif (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/-/g, '');\r\n\t\t\tvar day   = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tyear  = parseInt(value.substr(4, 2), 10);\r\n\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase ('5678'.indexOf(value.charAt(6)) !== -1 && year >= 58):\r\n\t\t\t\t\tyear += 1800;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('0123'.indexOf(value.charAt(6)) !== -1):\r\n\t\t\t\tcase ('49'.indexOf(value.charAt(6)) !== -1 && year >= 37):\r\n\t\t\t\t\tyear += 1900;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tyear += 2000;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.date(year, month, day);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Estonian Personal Identification Code (isikukood)\r\n\t\t * Examples:\r\n\t\t * - Valid: 37605030299\r\n\t\t *\r\n\t\t * @see http://et.wikipedia.org/wiki/Isikukood\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ee: function(value) {\r\n\t\t\t// Use the same format as Lithuanian Personal Code\r\n\t\t\treturn this._lt(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Spanish personal identity code (DNI)\r\n\t\t * Support i) DNI (for Spanish citizens) and ii) NIE (for foreign people)\r\n\t\t *\r\n\t\t * Examples:\r\n\t\t * - Valid: i) 54362315K, 54362315-K; ii) X2482300W, X-2482300W, X-2482300-W\r\n\t\t * - Invalid: i) 54362315Z; ii) X-2482300A\r\n\t\t *\r\n\t\t * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_es: function(value) {\r\n\t\t\tif (!/^[0-9A-Z]{8}[-]{0,1}[0-9A-Z]$/.test(value)                    // DNI\r\n\t\t\t\t&& !/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-Z]$/.test(value)) {    // NIE\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.replace(/-/g, '');\r\n\t\t\tvar index = 'XYZ'.indexOf(value.charAt(0));\r\n\t\t\tif (index !== -1) {\r\n\t\t\t\t// It is NIE number\r\n\t\t\t\tvalue = index + value.substr(1) + '';\r\n\t\t\t}\r\n\r\n\t\t\tvar check = parseInt(value.substr(0, 8), 10);\r\n\t\t\tcheck = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n\t\t\treturn (check === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Finnish Personal Identity Code (HETU)\r\n\t\t * Examples:\r\n\t\t * - Valid: 311280-888Y, 131052-308T\r\n\t\t * - Invalid: 131052-308U, 310252-308Y\r\n\t\t *\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_fi: function(value) {\r\n\t\t\tif (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar day       = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tmonth     = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tyear      = parseInt(value.substr(4, 2), 10),\r\n\t\t\t\tcenturies = {\r\n\t\t\t\t\t'+': 1800,\r\n\t\t\t\t\t'-': 1900,\r\n\t\t\t\t\t'A': 2000\r\n\t\t\t\t};\r\n\t\t\tyear = centuries[value.charAt(6)] + year;\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar individual = parseInt(value.substr(7, 3), 10);\r\n\t\t\tif (individual < 2) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar n = value.substr(0, 6) + value.substr(7, 3) + '';\r\n\t\t\tn = parseInt(n, 10);\r\n\t\t\treturn '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Croatian personal identification number (OIB)\r\n\t\t * Examples:\r\n\t\t * - Valid: 33392005961\r\n\t\t * - Invalid: 33392005962\r\n\t\t *\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_hr: function(value) {\r\n\t\t\tif (!/^[0-9]{11}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Irish Personal Public Service Number (PPS)\r\n\t\t * Examples:\r\n\t\t * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA\r\n\t\t * - Invalid: 6433435E, 6433435VH\r\n\t\t *\r\n\t\t * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ie: function(value) {\r\n\t\t\tif (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar getCheckDigit = function(value) {\r\n\t\t\t\twhile (value.length < 7) {\r\n\t\t\t\t\tvalue = '0' + value;\r\n\t\t\t\t}\r\n\t\t\t\tvar alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n\t\t\t\t\tsum      = 0;\r\n\t\t\t\tfor (var i = 0; i < 7; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * (8 - i);\r\n\t\t\t\t}\r\n\t\t\t\tsum += 9 * alphabet.indexOf(value.substr(7));\r\n\t\t\t\treturn alphabet[sum % 23];\r\n\t\t\t};\r\n\r\n\t\t\t// 2013 format\r\n\t\t\tif (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {\r\n\t\t\t\treturn value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n\t\t\t}\r\n\t\t\t// The old format\r\n\t\t\telse {\r\n\t\t\t\treturn value.charAt(7) === getCheckDigit(value.substr(0, 7));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Iceland national identification number (Kennitala)\r\n\t\t * Examples:\r\n\t\t * - Valid: 120174-3399, 1201743399, 0902862349\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Kennitala\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_is: function(value) {\r\n\t\t\tif (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/-/g, '');\r\n\t\t\tvar day     = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tmonth   = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tyear    = parseInt(value.substr(4, 2), 10),\r\n\t\t\t\tcentury = parseInt(value.charAt(9), 10);\r\n\r\n\t\t\tyear = (century === 9) ? (1900 + year) : ((20 + century) * 100 + year);\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Validate the check digit\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\treturn (sum + '' === value.charAt(8));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Lithuanian Personal Code (Asmens kodas)\r\n\t\t * Examples:\r\n\t\t * - Valid: 38703181745\r\n\t\t * - Invalid: 38703181746, 78703181745, 38703421745\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\r\n\t\t * @see http://www.adomas.org/midi2007/pcode.html\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_lt: function(value) {\r\n\t\t\tif (!/^[0-9]{11}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar gender  = parseInt(value.charAt(0), 10),\r\n\t\t\t\tyear    = parseInt(value.substr(1, 2), 10),\r\n\t\t\t\tmonth   = parseInt(value.substr(3, 2), 10),\r\n\t\t\t\tday     = parseInt(value.substr(5, 2), 10),\r\n\t\t\t\tcentury = (gender % 2 === 0) ? (17 + gender / 2) : (17 + (gender + 1) / 2);\r\n\t\t\tyear = century * 100 + year;\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate the check digit\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\r\n\t\t\tfor (var i = 0; i < 10; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = sum % 11;\r\n\t\t\tif (sum !== 10) {\r\n\t\t\t\treturn sum + '' === value.charAt(10);\r\n\t\t\t}\r\n\r\n\t\t\t// Re-calculate the check digit\r\n\t\t\tsum    = 0;\r\n\t\t\tweight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\r\n\t\t\tfor (i = 0; i < 10; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = sum % 11;\r\n\t\t\tif (sum === 10) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.charAt(10));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Latvian Personal Code (Personas kods)\r\n\t\t * Examples:\r\n\t\t * - Valid: 161175-19997, 16117519997\r\n\t\t * - Invalid: 161375-19997\r\n\t\t *\r\n\t\t * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_lv: function(value) {\r\n\t\t\tif (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\D/g, '');\r\n\t\t\t// Check birth date\r\n\t\t\tvar day   = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tyear  = parseInt(value.substr(4, 2), 10);\r\n\t\t\tyear = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Check personal code\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n\t\t\tfor (var i = 0; i < 10; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = (sum + 1) % 11 % 10;\r\n\t\t\treturn (sum + '' === value.charAt(10));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Dutch national identification number (BSN)\r\n\t\t * Examples:\r\n\t\t * - Valid: 111222333, 941331490, 9413.31.490\r\n\t\t * - Invalid: 111252333\r\n\t\t *\r\n\t\t * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_nl: function(value) {\r\n\t\t\twhile (value.length < 9) {\r\n\t\t\t\tvalue = '0' + value;\r\n\t\t\t}\r\n\t\t\tif (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/\\./g, '');\r\n\t\t\tif (parseInt(value, 10) === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tlength = value.length;\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += (9 - i) * parseInt(value.charAt(i), 10);\r\n\t\t\t}\r\n\t\t\tsum = sum % 11;\r\n\t\t\tif (sum === 10) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.charAt(length - 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Romanian numerical personal code (CNP)\r\n\t\t * Examples:\r\n\t\t * - Valid: 1630615123457, 1800101221144\r\n\t\t * - Invalid: 8800101221144, 1632215123457, 1630615123458\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ro: function(value) {\r\n\t\t\tif (!/^[0-9]{13}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar gender = parseInt(value.charAt(0), 10);\r\n\t\t\tif (gender === 0 || gender === 7 || gender === 8) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the date of birth\r\n\t\t\tvar year      = parseInt(value.substr(1, 2), 10),\r\n\t\t\t\tmonth     = parseInt(value.substr(3, 2), 10),\r\n\t\t\t\tday       = parseInt(value.substr(5, 2), 10),\r\n\t\t\t// The year of date is determined base on the gender\r\n\t\t\t\tcenturies = {\r\n\t\t\t\t\t'1': 1900,  // Male born between 1900 and 1999\r\n\t\t\t\t\t'2': 1900,  // Female born between 1900 and 1999\r\n\t\t\t\t\t'3': 1800,  // Male born between 1800 and 1899\r\n\t\t\t\t\t'4': 1800,  // Female born between 1800 and 1899\r\n\t\t\t\t\t'5': 2000,  // Male born after 2000\r\n\t\t\t\t\t'6': 2000   // Female born after 2000\r\n\t\t\t\t};\r\n\t\t\tif (day > 31 && month > 12) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (gender !== 9) {\r\n\t\t\t\tyear = centuries[gender + ''] + year;\r\n\t\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Validate the check digit\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],\r\n\t\t\t\tlength = value.length;\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = sum % 11;\r\n\t\t\tif (sum === 10) {\r\n\t\t\t\tsum = 1;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.charAt(length - 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Swedish personal identity number (personnummer)\r\n\t\t * Examples:\r\n\t\t * - Valid: 8112289874, 811228-9874, 811228+9874\r\n\t\t * - Invalid: 811228-9873\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_se: function(value) {\r\n\t\t\tif (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.replace(/[^0-9]/g, '');\r\n\r\n\t\t\tvar year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tday   = parseInt(value.substr(4, 2), 10);\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate the last check digit\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Slovak national identifier number (RC)\r\n\t\t * Examples:\r\n\t\t * - Valid: 7103192745, 991231123\r\n\t\t * - Invalid: 7103192746, 1103492745\r\n\t\t *\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_sk: function(value) {\r\n\t\t\t// Slovakia uses the same format as Czech Republic\r\n\t\t\treturn this._cz(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate San Marino citizen number\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_sm: function(value) {\r\n\t\t\treturn /^\\d{5}$/.test(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate South African ID\r\n\t\t * Example:\r\n\t\t * - Valid: 8001015009087\r\n\t\t * - Invalid: 8001015009287, 8001015009086\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\r\n\t\t * @param {String} value The ID\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_za: function(value) {\r\n\t\t\tif (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar year        = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\tcurrentYear = new Date().getFullYear() % 100,\r\n\t\t\t\tmonth       = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\tday         = parseInt(value.substr(4, 2), 10);\r\n\t\t\tyear = (year >= currentYear) ? (year + 1900) : (year + 2000);\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Validate the last check digit\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.identical = $.extend($.fn.bootstrapValidator.i18n.identical || {}, {\r\n\t\t'default': 'Please enter the same value'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.identical = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tfield: 'field'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if input value equals to value of particular one\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consists of the following key:\r\n\t\t * - field: The name of field that will be used to compare with current one\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar compareWith = validator.getFieldElements(options.field);\r\n\t\t\tif (compareWith === null) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (value === compareWith.val()) {\r\n\t\t\t\tvalidator.updateStatus(options.field, validator.STATUS_VALID, 'identical');\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.imei = $.extend($.fn.bootstrapValidator.i18n.imei || {}, {\r\n\t\t'default': 'Please enter a valid IMEI number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.imei = {\r\n\t\t/**\r\n\t\t * Validate IMEI (International Mobile Station Equipment Identity)\r\n\t\t * Examples:\r\n\t\t * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518\r\n\t\t * - Invalid: 490154203237517\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase /^\\d{15}$/.test(value):\r\n\t\t\t\tcase /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/.test(value):\r\n\t\t\t\tcase /^\\d{2}\\s\\d{6}\\s\\d{6}\\s\\d{1}$/.test(value):\r\n\t\t\t\t\tvalue = value.replace(/[^0-9]/g, '');\r\n\t\t\t\t\treturn $.fn.bootstrapValidator.helpers.luhn(value);\r\n\r\n\t\t\t\tcase /^\\d{14}$/.test(value):\r\n\t\t\t\tcase /^\\d{16}$/.test(value):\r\n\t\t\t\tcase /^\\d{2}-\\d{6}-\\d{6}(|-\\d{2})$/.test(value):\r\n\t\t\t\tcase /^\\d{2}\\s\\d{6}\\s\\d{6}(|\\s\\d{2})$/.test(value):\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.integer = $.extend($.fn.bootstrapValidator.i18n.integer || {}, {\r\n\t\t'default': 'Please enter a valid number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.integer = {\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\treturn ('number' === $field.attr('type')) && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is an integer\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following key:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.ip = $.extend($.fn.bootstrapValidator.i18n.ip || {}, {\r\n\t\t'default': 'Please enter a valid IP address',\r\n\t\tipv4: 'Please enter a valid IPv4 address',\r\n\t\tipv6: 'Please enter a valid IPv6 address'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.ip = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tipv4: 'ipv4',\r\n\t\t\tipv6: 'ipv6'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is a IP address.\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - ipv4: Enable IPv4 validator, default to true\r\n\t\t * - ipv6: Enable IPv6 validator, default to true\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\toptions = $.extend({}, { ipv4: true, ipv6: true }, options);\r\n\r\n\t\t\tif (options.ipv4) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalid: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(value),\r\n\t\t\t\t\tmessage: options.message || $.fn.bootstrapValidator.i18n.ip.ipv4\r\n\t\t\t\t};\r\n\t\t\t} else if (options.ipv6) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalid: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/.test(value),\r\n\t\t\t\t\tmessage: options.message || $.fn.bootstrapValidator.i18n.ip.ipv6\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.isbn = $.extend($.fn.bootstrapValidator.i18n.isbn || {}, {\r\n\t\t'default': 'Please enter a valid ISBN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.isbn = {\r\n\t\t/**\r\n\t\t * Return true if the input value is a valid ISBN 10 or ISBN 13 number\r\n\t\t * Examples:\r\n\t\t * - Valid:\r\n\t\t * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X\r\n\t\t * ISBN 13: 978-0-306-40615-7\r\n\t\t * - Invalid:\r\n\t\t * ISBN 10: 99921-58-10-6\r\n\t\t * ISBN 13: 978-0-306-40615-6\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} [options] Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview\r\n\t\t\t// Groups are separated by a hyphen or a space\r\n\t\t\tvar type;\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase /^\\d{9}[\\dX]$/.test(value):\r\n\t\t\t\tcase (value.length === 13 && /^(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n\t\t\t\tcase (value.length === 13 && /^(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n\t\t\t\t\ttype = 'ISBN10';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase /^(978|979)\\d{9}[\\dX]$/.test(value):\r\n\t\t\t\tcase (value.length === 17 && /^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n\t\t\t\tcase (value.length === 17 && /^(978|979)\\s(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n\t\t\t\t\ttype = 'ISBN13';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Replace all special characters except digits and X\r\n\t\t\tvalue = value.replace(/[^0-9X]/gi, '');\r\n\t\t\tvar chars  = value.split(''),\r\n\t\t\t\tlength = chars.length,\r\n\t\t\t\tsum    = 0,\r\n\t\t\t\ti,\r\n\t\t\t\tchecksum;\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 'ISBN10':\r\n\t\t\t\t\tsum = 0;\r\n\t\t\t\t\tfor (i = 0; i < length - 1; i++) {\r\n\t\t\t\t\t\tsum += parseInt(chars[i], 10) * (10 - i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchecksum = 11 - (sum % 11);\r\n\t\t\t\t\tif (checksum === 11) {\r\n\t\t\t\t\t\tchecksum = 0;\r\n\t\t\t\t\t} else if (checksum === 10) {\r\n\t\t\t\t\t\tchecksum = 'X';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (checksum + '' === chars[length - 1]);\r\n\r\n\t\t\t\tcase 'ISBN13':\r\n\t\t\t\t\tsum = 0;\r\n\t\t\t\t\tfor (i = 0; i < length - 1; i++) {\r\n\t\t\t\t\t\tsum += ((i % 2 === 0) ? parseInt(chars[i], 10) : (parseInt(chars[i], 10) * 3));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchecksum = 10 - (sum % 10);\r\n\t\t\t\t\tif (checksum === 10) {\r\n\t\t\t\t\t\tchecksum = '0';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (checksum + '' === chars[length - 1]);\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.isin = $.extend($.fn.bootstrapValidator.i18n.isin || {}, {\r\n\t\t'default': 'Please enter a valid ISIN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.isin = {\r\n\t\t// Available country codes\r\n\t\t// See http://isin.net/country-codes/\r\n\t\tCOUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',\r\n\r\n\t\t/**\r\n\t\t * Validate an ISIN (International Securities Identification Number)\r\n\t\t * Examples:\r\n\t\t * - Valid: US0378331005, AU0000XVGZA3, GB0002634946\r\n\t\t * - Invalid: US0378331004, AA0000XVGZA3\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.toUpperCase();\r\n\t\t\tvar regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');\r\n\t\t\tif (!regex.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar converted = '',\r\n\t\t\t\tlength    = value.length;\r\n\t\t\t// Convert letters to number\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tvar c = value.charCodeAt(i);\r\n\t\t\t\tconverted += ((c > 57) ? (c - 55).toString() : value.charAt(i));\r\n\t\t\t}\r\n\r\n\t\t\tvar digits = '',\r\n\t\t\t\tn      = converted.length,\r\n\t\t\t\tgroup  = (n % 2 !== 0) ? 0 : 1;\r\n\t\t\tfor (i = 0; i < n; i++) {\r\n\t\t\t\tdigits += (parseInt(converted[i], 10) * ((i % 2) === group ? 2 : 1) + '');\r\n\t\t\t}\r\n\r\n\t\t\tvar sum = 0;\r\n\t\t\tfor (i = 0; i < digits.length; i++) {\r\n\t\t\t\tsum += parseInt(digits.charAt(i), 10);\r\n\t\t\t}\r\n\t\t\tsum = (10 - (sum % 10)) % 10;\r\n\t\t\treturn sum + '' === value.charAt(length - 1);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.ismn = $.extend($.fn.bootstrapValidator.i18n.ismn || {}, {\r\n\t\t'default': 'Please enter a valid ISMN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.ismn = {\r\n\t\t/**\r\n\t\t * Validate ISMN (International Standard Music Number)\r\n\t\t * Examples:\r\n\t\t * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615\r\n\t\t * - Invalid: 9790060115614\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Groups are separated by a hyphen or a space\r\n\t\t\tvar type;\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase /^M\\d{9}$/.test(value):\r\n\t\t\t\tcase /^M-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n\t\t\t\tcase /^M\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n\t\t\t\t\ttype = 'ISMN10';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase /^9790\\d{9}$/.test(value):\r\n\t\t\t\tcase /^979-0-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n\t\t\t\tcase /^979\\s0\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n\t\t\t\t\ttype = 'ISMN13';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ('ISMN10' === type) {\r\n\t\t\t\tvalue = '9790' + value.substr(1);\r\n\t\t\t}\r\n\r\n\t\t\t// Replace all special characters except digits\r\n\t\t\tvalue = value.replace(/[^0-9]/gi, '');\r\n\t\t\tvar length = value.length,\r\n\t\t\t\tsum    = 0,\r\n\t\t\t\tweight = [1, 3];\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n\t\t\t}\r\n\t\t\tsum = 10 - sum % 10;\r\n\t\t\treturn (sum + '' === value.charAt(length - 1));\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.issn = $.extend($.fn.bootstrapValidator.i18n.issn || {}, {\r\n\t\t'default': 'Please enter a valid ISSN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.issn = {\r\n\t\t/**\r\n\t\t * Validate ISSN (International Standard Serial Number)\r\n\t\t * Examples:\r\n\t\t * - Valid: 0378-5955, 0024-9319, 0032-1478\r\n\t\t * - Invalid: 0032-147X\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Groups are separated by a hyphen or a space\r\n\t\t\tif (!/^\\d{4}\\-\\d{3}[\\dX]$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Replace all special characters except digits and X\r\n\t\t\tvalue = value.replace(/[^0-9X]/gi, '');\r\n\t\t\tvar chars  = value.split(''),\r\n\t\t\t\tlength = chars.length,\r\n\t\t\t\tsum    = 0;\r\n\r\n\t\t\tif (chars[7] === 'X') {\r\n\t\t\t\tchars[7] = 10;\r\n\t\t\t}\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\tsum += parseInt(chars[i], 10) * (8 - i);\r\n\t\t\t}\r\n\t\t\treturn (sum % 11 === 0);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.lessThan = $.extend($.fn.bootstrapValidator.i18n.lessThan || {}, {\r\n\t\t'default': 'Please enter a value less than or equal to %s',\r\n\t\tnotInclusive: 'Please enter a value less than %s'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.lessThan = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tvalue: 'value',\r\n\t\t\tinclusive: 'inclusive'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\tvar max = $field.attr('max');\r\n\t\t\tif (max) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalue: max\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is less than or equal to given number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - value: The number used to compare to. It can be\r\n\t\t *      - A number\r\n\t\t *      - Name of field which its value defines the number\r\n\t\t *      - Name of callback function that returns the number\r\n\t\t *      - A callback function that returns the number\r\n\t\t *\r\n\t\t * - inclusive [optional]: Can be true or false. Default is true\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\r\n\r\n\t\t\tvalue = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n\t\t\t\t? {\r\n\t\t\t\tvalid: value <= compareTo,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan['default'], compareTo)\r\n\t\t\t}\r\n\t\t\t\t: {\r\n\t\t\t\tvalid: value < compareTo,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan.notInclusive, compareTo)\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.mac = $.extend($.fn.bootstrapValidator.i18n.mac || {}, {\r\n\t\t'default': 'Please enter a valid MAC address'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.mac = {\r\n\t\t/**\r\n\t\t * Return true if the input value is a MAC address.\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.notEmpty = $.extend($.fn.bootstrapValidator.i18n.notEmpty || {}, {\r\n\t\t'default': 'Please enter a value'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.notEmpty = {\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\tvar required = $field.attr('required') + '';\r\n\t\t\treturn ('required' === required || 'true' === required);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if input value is empty or not\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar type = $field.attr('type');\r\n\t\t\tif ('radio' === type || 'checkbox' === type) {\r\n\t\t\t\treturn validator\r\n\t\t\t\t\t.getFieldElements($field.attr('data-bv-field'))\r\n\t\t\t\t\t.filter(':checked')\r\n\t\t\t\t\t.length > 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn $.trim($field.val()) !== '';\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.numeric = $.extend($.fn.bootstrapValidator.i18n.numeric || {}, {\r\n\t\t'default': 'Please enter a valid float number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.numeric = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tseparator: 'separator'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\treturn ('number' === $field.attr('type')) && ($field.attr('step') !== undefined) && ($field.attr('step') % 1 !== 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate decimal number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - separator: The decimal separator. Can be \".\" (default), \",\"\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tvar separator = options.separator || '.';\r\n\t\t\tif (separator !== '.') {\r\n\t\t\t\tvalue = value.replace(separator, '.');\r\n\t\t\t}\r\n\r\n\t\t\treturn !isNaN(parseFloat(value)) && isFinite(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.phone = $.extend($.fn.bootstrapValidator.i18n.phone || {}, {\r\n\t\t'default': 'Please enter a valid phone number',\r\n\t\tcountryNotSupported: 'The country code %s is not supported',\r\n\t\tcountry: 'Please enter a valid phone number in %s',\r\n\t\tcountries: {\r\n\t\t\tGB: 'United Kingdom',\r\n\t\t\tUS: 'USA'\r\n\t\t}\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.phone = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tcountry: 'country'\r\n\t\t},\r\n\r\n\t\t// The supported countries\r\n\t\tCOUNTRY_CODES: ['GB', 'US'],\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value contains a valid phone number for the country\r\n\t\t * selected in the options\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator Validate plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - country: The ISO-3166 country code. It can be\r\n\t\t *      - A country code\r\n\t\t *      - Name of field which its value defines the country code\r\n\t\t *      - Name of callback function that returns the country code\r\n\t\t *      - A callback function that returns the country code\r\n\t\t *\r\n\t\t * Currently it only supports United State (US) or United Kingdom (GB) countries\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar country = options.country;\r\n\t\t\tif (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n\t\t\t\t// Try to determine the country\r\n\t\t\t\tcountry = validator.getDynamicOption($field, country);\r\n\t\t\t}\r\n\r\n\t\t\tif (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalid: false,\r\n\t\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.phone.countryNotSupported, country)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar isValid = true;\r\n\t\t\tswitch (country.toUpperCase()) {\r\n\t\t\t\tcase 'GB':\r\n\t\t\t\t\t// http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format\r\n\t\t\t\t\t// Test: http://regexr.com/38uhv\r\n\t\t\t\t\tvalue   = $.trim(value);\r\n\t\t\t\t\tisValid = (/^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/).test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'US':\r\n\t\t\t\t/* falls through */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Make sure US phone numbers have 10 digits\r\n\t\t\t\t\t// May start with 1, +1, or 1-; should discard\r\n\t\t\t\t\t// Area code may be delimited with (), & sections may be delimited with . or -\r\n\t\t\t\t\t// Test: http://regexr.com/38mqi\r\n\t\t\t\t\tvalue   = value.replace(/\\D/g, '');\r\n\t\t\t\t\tisValid = (/^(?:(1\\-?)|(\\+1 ?))?\\(?(\\d{3})[\\)\\-\\.]?(\\d{3})[\\-\\.]?(\\d{4})$/).test(value) && (value.length === 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalid: isValid,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.phone.country, $.fn.bootstrapValidator.i18n.phone.countries[country])\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.regexp = $.extend($.fn.bootstrapValidator.i18n.regexp || {}, {\r\n\t\t'default': 'Please enter a value matching the pattern'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.regexp = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tregexp: 'regexp'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\tvar pattern = $field.attr('pattern');\r\n\t\t\tif (pattern) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tregexp: pattern\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if the element value matches given regular expression\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consists of the following key:\r\n\t\t * - regexp: The regular expression you need to check\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar regexp = ('string' === typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;\r\n\t\t\treturn regexp.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.remote = $.extend($.fn.bootstrapValidator.i18n.remote || {}, {\r\n\t\t'default': 'Please enter a valid value'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.remote = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\turl: 'url',\r\n\t\t\tname: 'name'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Request a remote server to check the input value\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator Plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - url {String|Function}\r\n\t\t * - type {String} [optional] Can be GET or POST (default)\r\n\t\t * - data {Object|Function} [optional]: By default, it will take the value\r\n\t\t *  {\r\n         *      <fieldName>: <fieldValue>\r\n         *  }\r\n\t\t * - name {String} [optional]: Override the field name for the request.\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Deferred}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar name = $field.attr('data-bv-field'),\r\n\t\t\t\tdata = options.data || {},\r\n\t\t\t\turl  = options.url,\r\n\t\t\t\ttype = options.type || 'POST';\r\n\r\n\t\t\t// Support dynamic data\r\n\t\t\tif ('function' === typeof data) {\r\n\t\t\t\tdata = data.call(this, validator);\r\n\t\t\t}\r\n\r\n\t\t\t// Support dynamic url\r\n\t\t\tif ('function' === typeof url) {\r\n\t\t\t\turl = url.call(this, validator);\r\n\t\t\t}\r\n\r\n\t\t\tdata[options.name || name] = value;\r\n\r\n\t\t\tvar dfd = new $.Deferred();\r\n\t\t\tvar xhr = $.ajax({\r\n\t\t\t\ttype: type,\r\n\t\t\t\turl: url,\r\n\t\t\t\tdataType: 'json',\r\n\t\t\t\tdata: data\r\n\t\t\t});\r\n\t\t\txhr.then(function(response) {\r\n\t\t\t\tdfd.resolve($field, 'remote', response.valid === true || response.valid === 'true', response.message ? response.message : null);\r\n\t\t\t});\r\n\r\n\t\t\tdfd.fail(function() {\r\n\t\t\t\txhr.abort();\r\n\t\t\t});\r\n\r\n\t\t\treturn dfd;\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.rtn = $.extend($.fn.bootstrapValidator.i18n.rtn || {}, {\r\n\t\t'default': 'Please enter a valid RTN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.rtn = {\r\n\t\t/**\r\n\t\t * Validate a RTN (Routing transit number)\r\n\t\t * Examples:\r\n\t\t * - Valid: 021200025, 789456124\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Routing_transit_number\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!/^\\d{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum = 0;\r\n\t\t\tfor (var i = 0; i < value.length; i += 3) {\r\n\t\t\t\tsum += parseInt(value.charAt(i),     10) * 3\r\n\t\t\t\t\t+  parseInt(value.charAt(i + 1), 10) * 7\r\n\t\t\t\t\t+  parseInt(value.charAt(i + 2), 10);\r\n\t\t\t}\r\n\t\t\treturn (sum !== 0 && sum % 10 === 0);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.sedol = $.extend($.fn.bootstrapValidator.i18n.sedol || {}, {\r\n\t\t'default': 'Please enter a valid SEDOL number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.sedol = {\r\n\t\t/**\r\n\t\t * Validate a SEDOL (Stock Exchange Daily Official List)\r\n\t\t * Examples:\r\n\t\t * - Valid: 0263494, B0WNLY7\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/SEDOL\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.toUpperCase();\r\n\t\t\tif (!/^[0-9A-Z]{7}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [1, 3, 1, 7, 3, 9, 1],\r\n\t\t\t\tlength = value.length;\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += weight[i] * parseInt(value.charAt(i), 36);\r\n\t\t\t}\r\n\t\t\tsum = (10 - sum % 10) % 10;\r\n\t\t\treturn sum + '' === value.charAt(length - 1);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.siren = $.extend($.fn.bootstrapValidator.i18n.siren || {}, {\r\n\t\t'default': 'Please enter a valid SIREN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.siren = {\r\n\t\t/**\r\n\t\t * Check if a string is a siren number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!/^\\d{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.siret = $.extend($.fn.bootstrapValidator.i18n.siret || {}, {\r\n\t\t'default': 'Please enter a valid SIRET number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.siret = {\r\n\t\t/**\r\n\t\t * Check if a string is a siret number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tlength = value.length,\r\n\t\t\t\ttmp;\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\ttmp = parseInt(value.charAt(i), 10);\r\n\t\t\t\tif ((i % 2) === 0) {\r\n\t\t\t\t\ttmp = tmp * 2;\r\n\t\t\t\t\tif (tmp > 9) {\r\n\t\t\t\t\t\ttmp -= 9;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsum += tmp;\r\n\t\t\t}\r\n\t\t\treturn (sum % 10 === 0);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.step = $.extend($.fn.bootstrapValidator.i18n.step || {}, {\r\n\t\t'default': 'Please enter a valid step of %s'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.step = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tbase: 'baseValue',\r\n\t\t\tstep: 'step'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is valid step one\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Can consist of the following keys:\r\n\t\t * - baseValue: The base value\r\n\t\t * - step: The step\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\toptions = $.extend({}, { baseValue: 0, step: 1 }, options);\r\n\t\t\tvalue   = parseFloat(value);\r\n\t\t\tif (!$.isNumeric(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar round = function(x, precision) {\r\n\t\t\t\t\tvar m = Math.pow(10, precision);\r\n\t\t\t\t\tx = x * m;\r\n\t\t\t\t\tvar sign   = (x > 0) | -(x < 0),\r\n\t\t\t\t\t\tisHalf = (x % 1 === 0.5 * sign);\r\n\t\t\t\t\tif (isHalf) {\r\n\t\t\t\t\t\treturn (Math.floor(x) + (sign > 0)) / m;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn Math.round(x) / m;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfloatMod = function(x, y) {\r\n\t\t\t\t\tif (y === 0.0) {\r\n\t\t\t\t\t\treturn 1.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dotX      = (x + '').split('.'),\r\n\t\t\t\t\t\tdotY      = (y + '').split('.'),\r\n\t\t\t\t\t\tprecision = ((dotX.length === 1) ? 0 : dotX[1].length) + ((dotY.length === 1) ? 0 : dotY[1].length);\r\n\t\t\t\t\treturn round(x - y * Math.floor(x / y), precision);\r\n\t\t\t\t};\r\n\r\n\t\t\tvar mod = floatMod(value - options.baseValue, options.step);\r\n\t\t\treturn {\r\n\t\t\t\tvalid: mod === 0.0 || mod === options.step,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.step['default'], [options.step])\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.stringCase = $.extend($.fn.bootstrapValidator.i18n.stringCase || {}, {\r\n\t\t'default': 'Please enter only lowercase characters',\r\n\t\tupper: 'Please enter only uppercase characters'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.stringCase = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\t'case': 'case'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a string is a lower or upper case one\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - case: Can be 'lower' (default) or 'upper'\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar stringCase = (options['case'] || 'lower').toLowerCase();\r\n\t\t\treturn {\r\n\t\t\t\tvalid: ('upper' === stringCase) ? value === value.toUpperCase() : value === value.toLowerCase(),\r\n\t\t\t\tmessage: options.message || (('upper' === stringCase) ? $.fn.bootstrapValidator.i18n.stringCase.upper : $.fn.bootstrapValidator.i18n.stringCase['default'])\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.stringLength = $.extend($.fn.bootstrapValidator.i18n.stringLength || {}, {\r\n\t\t'default': 'Please enter a value with valid length',\r\n\t\tless: 'Please enter less than %s characters',\r\n\t\tmore: 'Please enter more than %s characters',\r\n\t\tbetween: 'Please enter value between %s and %s characters long'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.stringLength = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tmin: 'min',\r\n\t\t\tmax: 'max'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\tvar maxLength = $field.attr('maxlength');\r\n\t\t\tif (maxLength) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmax: parseInt(maxLength, 10)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if the length of element value is less or more than given number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consists of following keys:\r\n\t\t * - min\r\n\t\t * - max\r\n\t\t * At least one of two keys is required\r\n\t\t * The min, max keys define the number which the field value compares to. min, max can be\r\n\t\t *      - A number\r\n\t\t *      - Name of field which its value defines the number\r\n\t\t *      - Name of callback function that returns the number\r\n\t\t *      - A callback function that returns the number\r\n\t\t *\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar min     = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n\t\t\t\tmax     = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\r\n\t\t\t\tlength  = value.length,\r\n\t\t\t\tisValid = true,\r\n\t\t\t\tmessage = options.message || $.fn.bootstrapValidator.i18n.stringLength['default'];\r\n\r\n\t\t\tif ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {\r\n\t\t\t\tisValid = false;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase (!!min && !!max):\r\n\t\t\t\t\tmessage = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase (!!min):\r\n\t\t\t\t\tmessage = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.more, parseInt(min, 10));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase (!!max):\r\n\t\t\t\t\tmessage = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.less, parseInt(max, 10));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn { valid: isValid, message: message };\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.uri = $.extend($.fn.bootstrapValidator.i18n.uri || {}, {\r\n\t\t'default': 'Please enter a valid URI'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.uri = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tallowlocal: 'allowLocal'\r\n\t\t},\r\n\r\n\t\tenableByHtml5: function($field) {\r\n\t\t\treturn ('url' === $field.attr('type'));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if the input value is a valid URL\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options\r\n\t\t * - message: The error message\r\n\t\t * - allowLocal: Allow the private and local network IP. Default to false\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Credit to https://gist.github.com/dperini/729294\r\n\t\t\t//\r\n\t\t\t// Regular Expression for URL validation\r\n\t\t\t//\r\n\t\t\t// Author: Diego Perini\r\n\t\t\t// Updated: 2010/12/05\r\n\t\t\t//\r\n\t\t\t// the regular expression composed & commented\r\n\t\t\t// could be easily tweaked for RFC compliance,\r\n\t\t\t// it was expressly modified to fit & satisfy\r\n\t\t\t// these test for an URL shortener:\r\n\t\t\t//\r\n\t\t\t//   http://mathiasbynens.be/demo/url-regex\r\n\t\t\t//\r\n\t\t\t// Notes on possible differences from a standard/generic validation:\r\n\t\t\t//\r\n\t\t\t// - utf-8 char class take in consideration the full Unicode range\r\n\t\t\t// - TLDs have been made mandatory so single names like \"localhost\" fails\r\n\t\t\t// - protocols have been restricted to ftp, http and https only as requested\r\n\t\t\t//\r\n\t\t\t// Changes:\r\n\t\t\t//\r\n\t\t\t// - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255\r\n\t\t\t//   first and last IP address of each class is considered invalid\r\n\t\t\t//   (since they are broadcast/network addresses)\r\n\t\t\t//\r\n\t\t\t// - Added exclusion of private, reserved and/or local networks ranges\r\n\t\t\t//\r\n\t\t\tvar allowLocal = options.allowLocal === true || options.allowLocal === 'true',\r\n\t\t\t\turlExp     = new RegExp(\r\n\t\t\t\t\t\t\"^\" +\r\n\t\t\t\t\t\t// protocol identifier\r\n\t\t\t\t\t\t\"(?:(?:https?|ftp)://)\" +\r\n\t\t\t\t\t\t// user:pass authentication\r\n\t\t\t\t\t\t\"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n\t\t\t\t\t\t\"(?:\" +\r\n\t\t\t\t\t\t// IP address exclusion\r\n\t\t\t\t\t\t// private & local networks\r\n\t\t\t\t\t\t(allowLocal\r\n\t\t\t\t\t\t\t? ''\r\n\t\t\t\t\t\t\t: (\"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n\t\t\t\t\t\t\t\"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n\t\t\t\t\t\t\t\"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\")) +\r\n\t\t\t\t\t\t// IP address dotted notation octets\r\n\t\t\t\t\t\t// excludes loopback network 0.0.0.0\r\n\t\t\t\t\t\t// excludes reserved space >= 224.0.0.0\r\n\t\t\t\t\t\t// excludes network & broadcast addresses\r\n\t\t\t\t\t\t// (first & last IP address of each class)\r\n\t\t\t\t\t\t\"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n\t\t\t\t\t\t\"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n\t\t\t\t\t\t\"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n\t\t\t\t\t\t\"|\" +\r\n\t\t\t\t\t\t// host name\r\n\t\t\t\t\t\t\"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n\t\t\t\t\t\t// domain name\r\n\t\t\t\t\t\t\"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n\t\t\t\t\t\t// TLD identifier\r\n\t\t\t\t\t\t\"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n\t\t\t\t\t\t\")\" +\r\n\t\t\t\t\t\t// port number\r\n\t\t\t\t\t\t\"(?::\\\\d{2,5})?\" +\r\n\t\t\t\t\t\t// resource path\r\n\t\t\t\t\t\t\"(?:/[^\\\\s]*)?\" +\r\n\t\t\t\t\t\t\"$\", \"i\"\r\n\t\t\t\t);\r\n\r\n\t\t\treturn urlExp.test(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.uuid = $.extend($.fn.bootstrapValidator.i18n.uuid || {}, {\r\n\t\t'default': 'Please enter a valid UUID number',\r\n\t\tversion: 'Please enter a valid UUID version %s number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.uuid = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tversion: 'version'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return true if and only if the input value is a valid UUID string\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - version: Can be 3, 4, 5, null\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions\r\n\t\t\tvar patterns = {\r\n\t\t\t\t\t'3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n\t\t\t\t\t'4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n\t\t\t\t\t'5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n\t\t\t\t\tall: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\r\n\t\t\t\t},\r\n\t\t\t\tversion = options.version ? (options.version + '') : 'all';\r\n\t\t\treturn {\r\n\t\t\t\tvalid: (null === patterns[version]) ? true : patterns[version].test(value),\r\n\t\t\t\tmessage: options.version\r\n\t\t\t\t\t? $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.uuid.version, options.version)\r\n\t\t\t\t\t: (options.message || $.fn.bootstrapValidator.i18n.uuid['default'])\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.vat = $.extend($.fn.bootstrapValidator.i18n.vat || {}, {\r\n\t\t'default': 'Please enter a valid VAT number',\r\n\t\tcountryNotSupported: 'The country code %s is not supported',\r\n\t\tcountry: 'Please enter a valid %s VAT number',\r\n\t\tcountries: {\r\n\t\t\tAT: 'Austrian',\r\n\t\t\tBE: 'Belgian',\r\n\t\t\tBG: 'Bulgarian',\r\n\t\t\tCH: 'Swiss',\r\n\t\t\tCY: 'Cypriot',\r\n\t\t\tCZ: 'Czech',\r\n\t\t\tDE: 'German',\r\n\t\t\tDK: 'Danish',\r\n\t\t\tEE: 'Estonian',\r\n\t\t\tES: 'Spanish',\r\n\t\t\tFI: 'Finnish',\r\n\t\t\tFR: 'French',\r\n\t\t\tGB: 'United Kingdom',\r\n\t\t\tGR: 'Greek',\r\n\t\t\tEL: 'Greek',\r\n\t\t\tHU: 'Hungarian',\r\n\t\t\tHR: 'Croatian',\r\n\t\t\tIE: 'Irish',\r\n\t\t\tIT: 'Italian',\r\n\t\t\tLT: 'Lithuanian',\r\n\t\t\tLU: 'Luxembourg',\r\n\t\t\tLV: 'Latvian',\r\n\t\t\tMT: 'Maltese',\r\n\t\t\tNL: 'Dutch',\r\n\t\t\tNO: 'Norwegian',\r\n\t\t\tPL: 'Polish',\r\n\t\t\tPT: 'Portuguese',\r\n\t\t\tRO: 'Romanian',\r\n\t\t\tRU: 'Russian',\r\n\t\t\tRS: 'Serbian',\r\n\t\t\tSE: 'Swedish',\r\n\t\t\tSI: 'Slovenian',\r\n\t\t\tSK: 'Slovak'\r\n\t\t}\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.vat = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tcountry: 'country'\r\n\t\t},\r\n\r\n\t\t// Supported country codes\r\n\t\tCOUNTRY_CODES: [\r\n\t\t\t'AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'EL', 'HU', 'IE', 'IT',\r\n\t\t\t'LV', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SK', 'SI', 'ES', 'SE', 'CH', 'GB'\r\n\t\t],\r\n\r\n\t\t/**\r\n\t\t * Validate an European VAT number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - country: The ISO 3166-1 country code. It can be\r\n\t\t *      - One of country code defined in COUNTRY_CODES\r\n\t\t *      - Name of field which its value defines the country code\r\n\t\t *      - Name of callback function that returns the country code\r\n\t\t *      - A callback function that returns the country code\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar country = options.country;\r\n\t\t\tif (!country) {\r\n\t\t\t\tcountry = value.substr(0, 2);\r\n\t\t\t} else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n\t\t\t\t// Determine the country code\r\n\t\t\t\tcountry = validator.getDynamicOption($field, country);\r\n\t\t\t}\r\n\r\n\t\t\tif ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalid: false,\r\n\t\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.vat.countryNotSupported, country)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar method  = ['_', country.toLowerCase()].join('');\r\n\t\t\treturn this[method](value)\r\n\t\t\t\t? true\r\n\t\t\t\t: {\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.vat.country, $.fn.bootstrapValidator.i18n.vat.countries[country.toUpperCase()])\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t// VAT validators\r\n\r\n\t\t/**\r\n\t\t * Validate Austrian VAT number\r\n\t\t * Example:\r\n\t\t * - Valid: ATU13585627\r\n\t\t * - Invalid: ATU13585626\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_at: function(value) {\r\n\t\t\tif (!/^ATU[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(3);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [1, 2, 1, 2, 1, 2, 1],\r\n\t\t\t\ttemp   = 0;\r\n\r\n\t\t\tfor (var i = 0; i < 7; i++) {\r\n\t\t\t\ttemp = parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\tif (temp > 9) {\r\n\t\t\t\t\ttemp = Math.floor(temp / 10) + temp % 10;\r\n\t\t\t\t}\r\n\t\t\t\tsum += temp;\r\n\t\t\t}\r\n\r\n\t\t\tsum = 10 - (sum + 4) % 10;\r\n\t\t\tif (sum === 10) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum + '' === value.substr(7, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Belgian VAT number\r\n\t\t * Example:\r\n\t\t * - Valid: BE0428759497\r\n\t\t * - Invalid: BE431150351\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_be: function(value) {\r\n\t\t\tif (!/^BE[0]{0,1}[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tif (value.length === 9) {\r\n\t\t\t\tvalue = '0' + value;\r\n\t\t\t}\r\n\r\n\t\t\tif (value.substr(1, 1) === '0') {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);\r\n\t\t\treturn (sum % 97 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Bulgarian VAT number\r\n\t\t * Example:\r\n\t\t * - Valid: BG175074752,\r\n\t\t * BG7523169263, BG8032056031,\r\n\t\t * BG7542011030,\r\n\t\t * BG7111042925\r\n\t\t * - Invalid: BG175074753, BG7552A10004, BG7111042922\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_bg: function(value) {\r\n\t\t\tif (!/^BG[0-9]{9,10}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum = 0, i = 0;\r\n\r\n\t\t\t// Legal entities\r\n\t\t\tif (value.length === 9) {\r\n\t\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tsum = sum % 11;\r\n\t\t\t\tif (sum === 10) {\r\n\t\t\t\t\tsum = 0;\r\n\t\t\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * (i + 3);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsum = sum % 10;\r\n\t\t\t\treturn (sum + '' === value.substr(8));\r\n\t\t\t}\r\n\t\t\t// Physical persons, foreigners and others\r\n\t\t\telse if (value.length === 10) {\r\n\t\t\t\t// Validate Bulgarian national identification numbers\r\n\t\t\t\tvar egn = function(value) {\r\n\t\t\t\t\t\t// Check the birth date\r\n\t\t\t\t\t\tvar year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n\t\t\t\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\t\t\t\tday   = parseInt(value.substr(4, 2), 10);\r\n\t\t\t\t\t\tif (month > 40) {\r\n\t\t\t\t\t\t\tyear += 100;\r\n\t\t\t\t\t\t\tmonth -= 40;\r\n\t\t\t\t\t\t} else if (month > 20) {\r\n\t\t\t\t\t\t\tyear -= 100;\r\n\t\t\t\t\t\t\tmonth -= 20;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar sum    = 0,\r\n\t\t\t\t\t\t\tweight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n\t\t\t\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum = (sum % 11) % 10;\r\n\t\t\t\t\t\treturn (sum + '' === value.substr(9, 1));\r\n\t\t\t\t\t},\r\n\t\t\t\t// Validate Bulgarian personal number of a foreigner\r\n\t\t\t\t\tpnf = function(value) {\r\n\t\t\t\t\t\tvar sum    = 0,\r\n\t\t\t\t\t\t\tweight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\r\n\t\t\t\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum = sum % 10;\r\n\t\t\t\t\t\treturn (sum + '' === value.substr(9, 1));\r\n\t\t\t\t\t},\r\n\t\t\t\t// Finally, consider it as a VAT number\r\n\t\t\t\t\tvat = function(value) {\r\n\t\t\t\t\t\tvar sum    = 0,\r\n\t\t\t\t\t\t\tweight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\r\n\t\t\t\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum = 11 - sum % 11;\r\n\t\t\t\t\t\tif (sum === 10) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (sum === 11) {\r\n\t\t\t\t\t\t\tsum = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (sum + '' === value.substr(9, 1));\r\n\t\t\t\t\t};\r\n\t\t\t\treturn (egn(value) || pnf(value) || vat(value));\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Swiss VAT number\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ch: function(value) {\r\n\t\t\tif (!/^CHE[0-9]{9}(MWST)?$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(3);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [5, 4, 3, 2, 7, 6, 5, 4];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\tif (sum === 10) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (sum === 11) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Cypriot VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: CY10259033P\r\n\t\t * - Invalid: CY10259033Z\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_cy: function(value) {\r\n\t\t\tif (!/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\r\n\t\t\t// Do not allow to start with \"12\"\r\n\t\t\tif (value.substr(0, 2) === '12') {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Extract the next digit and multiply by the counter.\r\n\t\t\tvar sum         = 0,\r\n\t\t\t\ttranslation = {\r\n\t\t\t\t\t'0': 1,  '1': 0,  '2': 5,  '3': 7,  '4': 9,\r\n\t\t\t\t\t'5': 13, '6': 15, '7': 17, '8': 19, '9': 21\r\n\t\t\t\t};\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tvar temp = parseInt(value.charAt(i), 10);\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\ttemp = translation[temp + ''];\r\n\t\t\t\t}\r\n\t\t\t\tsum += temp;\r\n\t\t\t}\r\n\r\n\t\t\tsum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];\r\n\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Czech Republic VAT number\r\n\t\t * Can be:\r\n\t\t * i) Legal entities (8 digit numbers)\r\n\t\t * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)\r\n\t\t * iii) Individuals without a RC (9 digit numbers beginning with 6)\r\n\t\t *\r\n\t\t * Examples:\r\n\t\t * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926\r\n\t\t * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_cz: function(value) {\r\n\t\t\tif (!/^CZ[0-9]{8,10}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\r\n\t\t\tvar sum = 0,\r\n\t\t\t\ti   = 0;\r\n\t\t\tif (value.length === 8) {\r\n\t\t\t\t// Do not allow to start with '9'\r\n\t\t\t\tif (value.charAt(0) + '' === '9') {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsum = 0;\r\n\t\t\t\tfor (i = 0; i < 7; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * (8 - i);\r\n\t\t\t\t}\r\n\t\t\t\tsum = 11 - sum % 11;\r\n\t\t\t\tif (sum === 10) {\r\n\t\t\t\t\tsum = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif (sum === 11) {\r\n\t\t\t\t\tsum = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (sum + '' === value.substr(7, 1));\r\n\t\t\t} else if (value.length === 9 && (value.charAt(0) + '' === '6')) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t\t// Skip the first (which is 6)\r\n\t\t\t\tfor (i = 0; i < 7; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i + 1), 10) * (8 - i);\r\n\t\t\t\t}\r\n\t\t\t\tsum = 11 - sum % 11;\r\n\t\t\t\tif (sum === 10) {\r\n\t\t\t\t\tsum = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif (sum === 11) {\r\n\t\t\t\t\tsum = 1;\r\n\t\t\t\t}\r\n\t\t\t\tsum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\r\n\t\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t\t} else if (value.length === 9 || value.length === 10) {\r\n\t\t\t\t// Validate Czech birth number (Rodné číslo), which is also national identifier\r\n\t\t\t\tvar year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n\t\t\t\t\tmonth = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n\t\t\t\t\tday   = parseInt(value.substr(4, 2), 10);\r\n\t\t\t\tif (value.length === 9) {\r\n\t\t\t\t\tif (year >= 1980) {\r\n\t\t\t\t\t\tyear -= 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (year > 1953) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (year < 1954) {\r\n\t\t\t\t\tyear += 100;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check that the birth date is not in the future\r\n\t\t\t\tif (value.length === 10) {\r\n\t\t\t\t\tvar check = parseInt(value.substr(0, 9), 10) % 11;\r\n\t\t\t\t\tif (year < 1985) {\r\n\t\t\t\t\t\tcheck = check % 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (check + '' === value.substr(9, 1));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate German VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: DE136695976\r\n\t\t * - Invalid: DE136695978\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_de: function(value) {\r\n\t\t\tif (!/^DE[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Danish VAT number\r\n\t\t * Example:\r\n\t\t * - Valid: DK13585628\r\n\t\t * - Invalid: DK13585627\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_dk: function(value) {\r\n\t\t\tif (!/^DK[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [2, 7, 6, 5, 4, 3, 2, 1];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 11 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Estonian VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: EE100931558, EE100594102\r\n\t\t * - Invalid: EE100594103\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ee: function(value) {\r\n\t\t\tif (!/^EE[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\r\n\r\n\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 10 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\r\n\t\t * Can be:\r\n\t\t * i) DNI (Documento nacional de identidad), for Spaniards\r\n\t\t * ii) NIE (Número de Identificación de Extranjeros), for foreigners\r\n\t\t * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\r\n\t\t *\r\n\t\t * Examples:\r\n\t\t * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838\r\n\t\t * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_es: function(value) {\r\n\t\t\tif (!/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar dni = function(value) {\r\n\t\t\t\t\tvar check = parseInt(value.substr(0, 8), 10);\r\n\t\t\t\t\tcheck = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n\t\t\t\t\treturn (check + '' === value.substr(8, 1));\r\n\t\t\t\t},\r\n\t\t\t\tnie = function(value) {\r\n\t\t\t\t\tvar check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');\r\n\t\t\t\t\tcheck = parseInt(check, 10);\r\n\t\t\t\t\tcheck = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n\t\t\t\t\treturn (check + '' === value.substr(8, 1));\r\n\t\t\t\t},\r\n\t\t\t\tcif = function(value) {\r\n\t\t\t\t\tvar first = value.charAt(0), check;\r\n\t\t\t\t\tif ('KLM'.indexOf(first) !== -1) {\r\n\t\t\t\t\t\t// K: Spanish younger than 14 year old\r\n\t\t\t\t\t\t// L: Spanish living outside Spain without DNI\r\n\t\t\t\t\t\t// M: Granted the tax to foreigners who have no NIE\r\n\t\t\t\t\t\tcheck = parseInt(value.substr(1, 8), 10);\r\n\t\t\t\t\t\tcheck = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n\t\t\t\t\t\treturn (check + '' === value.substr(8, 1));\r\n\t\t\t\t\t} else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {\r\n\t\t\t\t\t\tvar sum    = 0,\r\n\t\t\t\t\t\t\tweight = [2, 1, 2, 1, 2, 1, 2],\r\n\t\t\t\t\t\t\ttemp   = 0;\r\n\r\n\t\t\t\t\t\tfor (var i = 0; i < 7; i++) {\r\n\t\t\t\t\t\t\ttemp = parseInt(value.charAt(i + 1), 10) * weight[i];\r\n\t\t\t\t\t\t\tif (temp > 9) {\r\n\t\t\t\t\t\t\t\ttemp = Math.floor(temp / 10) + temp % 10;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsum += temp;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum = 10 - sum % 10;\r\n\t\t\t\t\t\treturn (sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t};\r\n\r\n\t\t\tvar first = value.charAt(0);\r\n\t\t\tif (/^[0-9]$/.test(first)) {\r\n\t\t\t\treturn dni(value);\r\n\t\t\t} else if (/^[XYZ]$/.test(first)) {\r\n\t\t\t\treturn nie(value);\r\n\t\t\t} else {\r\n\t\t\t\treturn cif(value);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Finnish VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: FI20774740\r\n\t\t * - Invalid: FI20774741\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_fi: function(value) {\r\n\t\t\tif (!/^FI[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [7, 9, 10, 5, 8, 4, 2, 1];\r\n\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 11 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\r\n\t\t * It's constructed by a SIREN number, prefixed by two characters.\r\n\t\t *\r\n\t\t * Examples:\r\n\t\t * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782\r\n\t\t * - Invalid: FR84323140391\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_fr: function(value) {\r\n\t\t\tif (!/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.luhn(value.substr(2))) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (/^[0-9]{2}$/.test(value.substr(0, 2))) {\r\n\t\t\t\t// First two characters are digits\r\n\t\t\t\treturn value.substr(0, 2) === (parseInt(value.substr(2) + '12', 10) % 97 + '');\r\n\t\t\t} else {\r\n\t\t\t\t// The first characters cann't be O and I\r\n\t\t\t\tvar alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',\r\n\t\t\t\t\tcheck;\r\n\t\t\t\t// First one is digit\r\n\t\t\t\tif (/^[0-9]{1}$/.test(value.charAt(0))) {\r\n\t\t\t\t\tcheck = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcheck = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;\r\n\t\t\t\t}\r\n\t\t\t\treturn ((parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11) === (check % 11);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate United Kingdom VAT number\r\n\t\t * Example:\r\n\t\t * - Valid: GB980780684\r\n\t\t * - Invalid: GB802311781\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_gb: function(value) {\r\n\t\t\tif (!/^GB[0-9]{9}$/.test(value)             /* Standard */\r\n\t\t\t\t&& !/^GB[0-9]{12}$/.test(value)         /* Branches */\r\n\t\t\t\t&& !/^GBGD[0-9]{3}$/.test(value)        /* Government department */\r\n\t\t\t\t&& !/^GBHA[0-9]{3}$/.test(value)        /* Health authority */\r\n\t\t\t\t&& !/^GB(GD|HA)8888[0-9]{5}$/.test(value))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar length = value.length;\r\n\t\t\tif (length === 5) {\r\n\t\t\t\tvar firstTwo  = value.substr(0, 2),\r\n\t\t\t\t\tlastThree = parseInt(value.substr(2), 10);\r\n\t\t\t\treturn ('GD' === firstTwo && lastThree < 500) || ('HA' === firstTwo && lastThree >= 500);\r\n\t\t\t} else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {\r\n\t\t\t\tif (('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500)\r\n\t\t\t\t\t|| ('HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn (parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10));\r\n\t\t\t} else if (length === 9 || length === 12) {\r\n\t\t\t\tvar sum    = 0,\r\n\t\t\t\t\tweight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\r\n\t\t\t\tfor (var i = 0; i < 9; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t}\r\n\t\t\t\tsum = sum % 97;\r\n\r\n\t\t\t\tif (parseInt(value.substr(0, 3), 10) >= 100) {\r\n\t\t\t\t\treturn (sum === 0 || sum === 42 || sum === 55);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (sum === 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Greek VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: GR023456780, EL094259216\r\n\t\t * - Invalid: EL123456781\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_gr: function(value) {\r\n\t\t\tif (!/^GR[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tif (value.length === 8) {\r\n\t\t\t\tvalue = '0' + value;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [256, 128, 64, 32, 16, 8, 4, 2];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = (sum % 11) % 10;\r\n\r\n\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t// EL is traditionally prefix of Greek VAT numbers\r\n\t\t_el: function(value) {\r\n\t\t\tif (!/^EL[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = 'GR' + value.substr(2);\r\n\t\t\treturn this._gr(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Hungarian VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: HU12892312\r\n\t\t * - Invalid: HU12892313\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_hu: function(value) {\r\n\t\t\tif (!/^HU[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [9, 7, 3, 1, 9, 7, 3, 1];\r\n\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 10 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Croatian VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: HR33392005961\r\n\t\t * - Invalid: HR33392005962\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_hr: function(value) {\r\n\t\t\tif (!/^HR[0-9]{11}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Irish VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: IE6433435F, IE6433435OA, IE8D79739I\r\n\t\t * - Invalid: IE8D79738J\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ie: function(value) {\r\n\t\t\tif (!/^IE[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar getCheckDigit = function(value) {\r\n\t\t\t\twhile (value.length < 7) {\r\n\t\t\t\t\tvalue = '0' + value;\r\n\t\t\t\t}\r\n\t\t\t\tvar alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n\t\t\t\t\tsum      = 0;\r\n\t\t\t\tfor (var i = 0; i < 7; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * (8 - i);\r\n\t\t\t\t}\r\n\t\t\t\tsum += 9 * alphabet.indexOf(value.substr(7));\r\n\t\t\t\treturn alphabet[sum % 23];\r\n\t\t\t};\r\n\r\n\t\t\t// The first 7 characters are digits\r\n\t\t\tif (/^[0-9]+$/.test(value.substr(0, 7))) {\r\n\t\t\t\t// New system\r\n\t\t\t\treturn value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n\t\t\t} else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {\r\n\t\t\t\t// Old system\r\n\t\t\t\treturn value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Italian VAT number, which consists of 11 digits.\r\n\t\t * - First 7 digits are a company identifier\r\n\t\t * - Next 3 are the province of residence\r\n\t\t * - The last one is a check digit\r\n\t\t *\r\n\t\t * Examples:\r\n\t\t * - Valid: IT00743110157\r\n\t\t * - Invalid: IT00743110158\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_it: function(value) {\r\n\t\t\tif (!/^IT[0-9]{11}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tif (parseInt(value.substr(0, 7), 10) === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar lastThree = parseInt(value.substr(7, 3), 10);\r\n\t\t\tif ((lastThree < 1) || (lastThree > 201) && lastThree !== 999 && lastThree !== 888) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Lithuanian VAT number\r\n\t\t * It can be:\r\n\t\t * - 9 digits, for legal entities\r\n\t\t * - 12 digits, for temporarily registered taxpayers\r\n\t\t *\r\n\t\t * Examples:\r\n\t\t * - Valid: LT119511515, LT100001919017, LT100004801610\r\n\t\t * - Invalid: LT100001919018\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_lt: function(value) {\r\n\t\t\tif (!/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar length = value.length,\r\n\t\t\t\tsum    = 0,\r\n\t\t\t\ti;\r\n\t\t\tfor (i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * (1 + i % 9);\r\n\t\t\t}\r\n\t\t\tvar check = sum % 11;\r\n\t\t\tif (check === 10) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t\tfor (i = 0; i < length - 1; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcheck = check % 11 % 10;\r\n\t\t\treturn (check + '' === value.charAt(length - 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Luxembourg VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: LU15027442\r\n\t\t * - Invalid: LU15027443\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_lu: function(value) {\r\n\t\t\tif (!/^LU[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\treturn ((parseInt(value.substr(0, 6), 10) % 89) + '' === value.substr(6, 2));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Latvian VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: LV40003521600, LV16117519997\r\n\t\t * - Invalid: LV40003521601, LV16137519997\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_lv: function(value) {\r\n\t\t\tif (!/^LV[0-9]{11}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar first  = parseInt(value.charAt(0), 10),\r\n\t\t\t\tsum    = 0,\r\n\t\t\t\tweight = [],\r\n\t\t\t\ti,\r\n\t\t\t\tlength = value.length;\r\n\t\t\tif (first > 3) {\r\n\t\t\t\t// Legal entity\r\n\t\t\t\tsum    = 0;\r\n\t\t\t\tweight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\r\n\t\t\t\tfor (i = 0; i < length; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t}\r\n\t\t\t\tsum = sum % 11;\r\n\t\t\t\treturn (sum === 3);\r\n\t\t\t} else {\r\n\t\t\t\t// Check birth date\r\n\t\t\t\tvar day   = parseInt(value.substr(0, 2), 10),\r\n\t\t\t\t\tmonth = parseInt(value.substr(2, 2), 10),\r\n\t\t\t\t\tyear  = parseInt(value.substr(4, 2), 10);\r\n\t\t\t\tyear = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n\t\t\t\tif (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check personal code\r\n\t\t\t\tsum    = 0;\r\n\t\t\t\tweight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n\t\t\t\tfor (i = 0; i < length - 1; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t}\r\n\t\t\t\tsum = (sum + 1) % 11 % 10;\r\n\t\t\t\treturn (sum + '' === value.charAt(length - 1));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Maltese VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: MT11679112\r\n\t\t * - Invalid: MT11679113\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_mt: function(value) {\r\n\t\t\tif (!/^MT[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [3, 4, 6, 7, 8, 9, 10, 1];\r\n\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 37 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Dutch VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: NL004495445B01\r\n\t\t * - Invalid: NL123456789B90\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_nl: function(value) {\r\n\t\t\tif (!/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\tsum = sum % 11;\r\n\t\t\tif (sum > 9) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Norwegian VAT number\r\n\t\t *\r\n\t\t * @see http://www.brreg.no/english/coordination/number.html\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_no: function(value) {\r\n\t\t\tif (!/^NO[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\tif (sum === 11) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Polish VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: PL8567346215\r\n\t\t * - Invalid: PL8567346216\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_pl: function(value) {\r\n\t\t\tif (!/^PL[0-9]{10}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\r\n\r\n\t\t\tfor (var i = 0; i < 10; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn (sum % 11 === 0);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Portuguese VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: PT501964843\r\n\t\t * - Invalid: PT501964842\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_pt: function(value) {\r\n\t\t\tif (!/^PT[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\tif (sum > 9) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.substr(8, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Romanian VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: RO18547290\r\n\t\t * - Invalid: RO18547291\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ro: function(value) {\r\n\t\t\tif (!/^RO[1-9][0-9]{1,9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvalue = value.substr(2);\r\n\r\n\t\t\tvar length = value.length,\r\n\t\t\t\tweight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),\r\n\t\t\t\tsum    = 0;\r\n\t\t\tfor (var i = 0; i < length - 1; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\r\n\t\t\tsum = (10 * sum) % 11 % 10;\r\n\t\t\treturn (sum + '' === value.substr(length - 1, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Russian VAT number (Taxpayer Identification Number - INN)\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_ru: function(value) {\r\n\t\t\tif (!/^RU([0-9]{9}|[0-9]{12})$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar i = 0;\r\n\t\t\tif (value.length === 10) {\r\n\t\t\t\tvar sum    = 0,\r\n\t\t\t\t\tweight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n\t\t\t\tfor (i = 0; i < 10; i++) {\r\n\t\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t\t}\r\n\t\t\t\tsum = sum % 11;\r\n\t\t\t\tif (sum > 9) {\r\n\t\t\t\t\tsum = sum % 10;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (sum + '' === value.substr(9, 1));\r\n\t\t\t} else if (value.length === 12) {\r\n\t\t\t\tvar sum1    = 0,\r\n\t\t\t\t\tweight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\r\n\t\t\t\t\tsum2    = 0,\r\n\t\t\t\t\tweight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n\r\n\t\t\t\tfor (i = 0; i < 11; i++) {\r\n\t\t\t\t\tsum1 += parseInt(value.charAt(i), 10) * weight1[i];\r\n\t\t\t\t\tsum2 += parseInt(value.charAt(i), 10) * weight2[i];\r\n\t\t\t\t}\r\n\t\t\t\tsum1 = sum1 % 11;\r\n\t\t\t\tif (sum1 > 9) {\r\n\t\t\t\t\tsum1 = sum1 % 10;\r\n\t\t\t\t}\r\n\t\t\t\tsum2 = sum2 % 11;\r\n\t\t\t\tif (sum2 > 9) {\r\n\t\t\t\t\tsum2 = sum2 % 10;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1));\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Serbian VAT number\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_rs: function(value) {\r\n\t\t\tif (!/^RS[0-9]{9}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum  = 10,\r\n\t\t\t\ttemp = 0;\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\ttemp = (parseInt(value.charAt(i), 10) + sum) % 10;\r\n\t\t\t\tif (temp === 0) {\r\n\t\t\t\t\ttemp = 10;\r\n\t\t\t\t}\r\n\t\t\t\tsum = (2 * temp) % 11;\r\n\t\t\t}\r\n\r\n\t\t\treturn ((sum + parseInt(value.substr(8, 1), 10)) % 10 === 1);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Swedish VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: SE123456789701\r\n\t\t * - Invalid: SE123456789101\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_se: function(value) {\r\n\t\t\tif (!/^SE[0-9]{10}01$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2, 10);\r\n\t\t\treturn $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Slovenian VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: SI50223054\r\n\t\t * - Invalid: SI50223055\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_si: function(value) {\r\n\t\t\tif (!/^SI[0-9]{8}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.substr(2);\r\n\t\t\tvar sum    = 0,\r\n\t\t\t\tweight = [8, 7, 6, 5, 4, 3, 2];\r\n\r\n\t\t\tfor (var i = 0; i < 7; i++) {\r\n\t\t\t\tsum += parseInt(value.charAt(i), 10) * weight[i];\r\n\t\t\t}\r\n\t\t\tsum = 11 - sum % 11;\r\n\t\t\tif (sum === 10) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t\treturn (sum + '' === value.substr(7, 1));\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate Slovak VAT number\r\n\t\t * Examples:\r\n\t\t * - Valid: SK2022749619\r\n\t\t * - Invalid: SK2022749618\r\n\t\t *\r\n\t\t * @param {String} value VAT number\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_sk: function(value) {\r\n\t\t\tif (!/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn (parseInt(value.substr(2), 10) % 11 === 0);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.vin = $.extend($.fn.bootstrapValidator.i18n.vin || {}, {\r\n\t\t'default': 'Please enter a valid VIN number'\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.vin = {\r\n\t\t/**\r\n\t\t * Validate an US VIN (Vehicle Identification Number)\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Don't accept I, O, Q characters\r\n\t\t\tif (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvalue = value.toUpperCase();\r\n\t\t\tvar chars   = {\r\n\t\t\t\t\tA: 1,   B: 2,   C: 3,   D: 4,   E: 5,   F: 6,   G: 7,   H: 8,\r\n\t\t\t\t\tJ: 1,   K: 2,   L: 3,   M: 4,   N: 5,           P: 7,           R: 9,\r\n\t\t\t\t\tS: 2,   T: 3,   U: 4,   V: 5,   W: 6,   X: 7,   Y: 8,   Z: 9,\r\n\t\t\t\t\t'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0\r\n\t\t\t\t},\r\n\t\t\t\tweights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\r\n\t\t\t\tsum     = 0,\r\n\t\t\t\tlength  = value.length;\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\tsum += chars[value.charAt(i) + ''] * weights[i];\r\n\t\t\t}\r\n\r\n\t\t\tvar reminder = sum % 11;\r\n\t\t\tif (reminder === 10) {\r\n\t\t\t\treminder = 'X';\r\n\t\t\t}\r\n\r\n\t\t\treturn (reminder + '') === value.charAt(8);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n\t$.fn.bootstrapValidator.i18n.zipCode = $.extend($.fn.bootstrapValidator.i18n.zipCode || {}, {\r\n\t\t'default': 'Please enter a valid zip code',\r\n\t\tcountryNotSupported: 'The country code %s is not supported',\r\n\t\tcountry: 'Please enter a valid %s',\r\n\t\tcountries: {\r\n\t\t\t'CA': 'Canadian postal code',\r\n\t\t\t'DK': 'Danish postal code',\r\n\t\t\t'GB': 'United Kingdom postal code',\r\n\t\t\t'IT': 'Italian postal code',\r\n\t\t\t'NL': 'Dutch postal code',\r\n\t\t\t'SE': 'Swiss postal code',\r\n\t\t\t'SG': 'Singapore postal code',\r\n\t\t\t'US': 'US zip code'\r\n\t\t}\r\n\t});\r\n\r\n\t$.fn.bootstrapValidator.validators.zipCode = {\r\n\t\thtml5Attributes: {\r\n\t\t\tmessage: 'message',\r\n\t\t\tcountry: 'country'\r\n\t\t},\r\n\r\n\t\tCOUNTRY_CODES: ['CA', 'DK', 'GB', 'IT', 'NL', 'SE', 'SG', 'US'],\r\n\r\n\t\t/**\r\n\t\t * Return true if and only if the input value is a valid country zip code\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n\t\t * - message: The invalid message\r\n\t\t * - country: The country\r\n\t\t *\r\n\t\t * The country can be defined by:\r\n\t\t * - An ISO 3166 country code\r\n\t\t * Currently it supports the following countries:\r\n\t\t *      - US (United States)\r\n\t\t *      - CA (Canada)\r\n\t\t *      - DK (Denmark)\r\n\t\t *      - GB (United Kingdom)\r\n\t\t *      - IT (Italy)\r\n\t\t *      - NL (Netherlands)\r\n\t\t *      - SE (Sweden)\r\n\t\t *      - SG (Singapore)\r\n\t\t *\r\n\t\t * - Name of field which its value defines the country code\r\n\t\t * - Name of callback function that returns the country code\r\n\t\t * - A callback function that returns the country code\r\n\t\t *\r\n\t\t * callback: function(value, validator, $field) {\r\n         *      // value is the value of field\r\n         *      // validator is the BootstrapValidator instance\r\n         *      // $field is jQuery element representing the field\r\n         * }\r\n\t\t *\r\n\t\t * @returns {Boolean|Object}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '' || !options.country) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar country = options.country;\r\n\t\t\tif (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n\t\t\t\t// Try to determine the country\r\n\t\t\t\tcountry = validator.getDynamicOption($field, country);\r\n\t\t\t}\r\n\r\n\t\t\tif (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n\t\t\t\treturn { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.zipCode.countryNotSupported, country) };\r\n\t\t\t}\r\n\r\n\t\t\tvar isValid = false;\r\n\t\t\tcountry = country.toUpperCase();\r\n\t\t\tswitch (country) {\r\n\t\t\t\tcase 'CA':\r\n\t\t\t\t\tisValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DK':\r\n\t\t\t\t\tisValid = /^(DK(-|\\s)?)?\\d{4}$/i.test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'GB':\r\n\t\t\t\t\tisValid = this._gb(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy\r\n\t\t\t\tcase 'IT':\r\n\t\t\t\t\tisValid = /^(I-|IT-)?\\d{5}$/i.test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands\r\n\t\t\t\tcase 'NL':\r\n\t\t\t\t\tisValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SE':\r\n\t\t\t\t\tisValid = /^(S-)?\\d{3}\\s?\\d{2}$/i.test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SG':\r\n\t\t\t\t\tisValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\\d{4})$/i.test(value);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'US':\r\n\t\t\t\t/* falls through */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tisValid = /^\\d{4,5}([\\-]?\\d{4})?$/.test(value);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalid: isValid,\r\n\t\t\t\tmessage: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.zipCode.country, $.fn.bootstrapValidator.i18n.zipCode.countries[country])\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Validate United Kingdom postcode\r\n\t\t * Examples:\r\n\t\t * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT\r\n\t\t * - Special cases:\r\n\t\t * AI-2640, ASCN 1ZZ, GIR 0AA\r\n\t\t *\r\n\t\t * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom\r\n\t\t * @param {String} value The postcode\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_gb: function(value) {\r\n\t\t\tvar firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX\r\n\t\t\t\tsecondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ\r\n\t\t\t\tthirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',\r\n\t\t\t\tfourthChar = '[ABEHMNPRVWXY]',\r\n\t\t\t\tfifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',\r\n\t\t\t\tregexps    = [\r\n\t\t\t\t\t// AN NAA, ANN NAA, AAN NAA, AANN NAA format\r\n\t\t\t\t\tnew RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n\t\t\t\t\t// ANA NAA\r\n\t\t\t\t\tnew RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n\t\t\t\t\t// AANA NAA\r\n\t\t\t\t\tnew RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n\r\n\t\t\t\t\tnew RegExp('^(BF1)(\\\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes\r\n\t\t\t\t\t/^(GIR)(\\s*)(0AA)$/i,                       // Special postcode GIR 0AA\r\n\t\t\t\t\t/^(BFPO)(\\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers\r\n\t\t\t\t\t/^(BFPO)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i,        // c/o BFPO numbers\r\n\t\t\t\t\t/^([A-Z]{4})(\\s*)(1ZZ)$/i,                  // Overseas Territories\r\n\t\t\t\t\t/^(AI-2640)$/i                              // Anguilla\r\n\t\t\t\t];\r\n\t\t\tfor (var i = 0; i < regexps.length; i++) {\r\n\t\t\t\tif (regexps[i].test(value)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.base64 = $.extend($.fn.bootstrapValidator.i18n.base64 || {}, {\r\n        'default': 'Please enter a valid base 64 encoded'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.base64 = {\r\n        /**\r\n         * Return true if the input value is a base 64 encoded string.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.between = $.extend($.fn.bootstrapValidator.i18n.between || {}, {\r\n        'default': 'Please enter a value between %s and %s',\r\n        notInclusive: 'Please enter a value between %s and %s strictly'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.between = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            if ('range' === $field.attr('type')) {\r\n                return {\r\n                    min: $field.attr('min'),\r\n                    max: $field.attr('max')\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is between (strictly or not) two given numbers\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - min\r\n         * - max\r\n         *\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var min = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n                max = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max);\r\n\r\n            value = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value >= min && value <= max,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between['default'], [min, max])\r\n                    }\r\n                    : {\r\n                        valid: value > min  && value <  max,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between.notInclusive, [min, max])\r\n                    };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.callback = $.extend($.fn.bootstrapValidator.i18n.callback || {}, {\r\n        'default': 'Please enter a valid value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.callback = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            callback: 'callback'\r\n        },\r\n\r\n        /**\r\n         * Return result from the callback method\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - callback: The callback method that passes 2 parameters:\r\n         *      callback: function(fieldValue, validator, $field) {\r\n         *          // fieldValue is the value of field\r\n         *          // validator is instance of BootstrapValidator\r\n         *          // $field is the field element\r\n         *      }\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Deferred}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n\r\n            if (options.callback) {\r\n                var dfd      = new $.Deferred(),\r\n                    response = $.fn.bootstrapValidator.helpers.call(options.callback, [value, validator, $field]);\r\n                dfd.resolve($field, 'callback', 'boolean' === typeof response ? response : response.valid, 'object' === typeof response && response.message ? response.message : null);\r\n                return dfd;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.choice = $.extend($.fn.bootstrapValidator.i18n.choice || {}, {\r\n        'default': 'Please enter a valid value',\r\n        less: 'Please choose %s options at minimum',\r\n        more: 'Please choose %s options at maximum',\r\n        between: 'Please choose %s - %s options'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.choice = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max'\r\n        },\r\n\r\n        /**\r\n         * Check if the number of checked boxes are less or more than a given number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of following keys:\r\n         * - min\r\n         * - max\r\n         *\r\n         * At least one of two keys is required\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - message: The invalid message\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var numChoices = $field.is('select')\r\n                            ? validator.getFieldElements($field.attr('data-bv-field')).find('option').filter(':selected').length\r\n                            : validator.getFieldElements($field.attr('data-bv-field')).filter(':checked').length,\r\n                min        = options.min ? ($.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min)) : null,\r\n                max        = options.max ? ($.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max)) : null,\r\n                isValid    = true,\r\n                message    = options.message || $.fn.bootstrapValidator.i18n.choice['default'];\r\n\r\n            if ((min && numChoices < parseInt(min, 10)) || (max && numChoices > parseInt(max, 10))) {\r\n                isValid = false;\r\n            }\r\n\r\n            switch (true) {\r\n                case (!!min && !!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                    break;\r\n\r\n                case (!!min):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.less, parseInt(min, 10));\r\n                    break;\r\n\r\n                case (!!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.more, parseInt(max, 10));\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return { valid: isValid, message: message };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.creditCard = $.extend($.fn.bootstrapValidator.i18n.creditCard || {}, {\r\n        'default': 'Please enter a valid credit card number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.creditCard = {\r\n        /**\r\n         * Return true if the input value is valid credit card number\r\n         * Based on https://gist.github.com/DiegoSalazar/4075533\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Accept only digits, dashes or spaces\r\n            if (/[^0-9-\\s]+/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '');\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.luhn(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the card number based on prefix (IIN ranges) and length\r\n            var cards = {\r\n                AMERICAN_EXPRESS: {\r\n                    length: [15],\r\n                    prefix: ['34', '37']\r\n                },\r\n                DINERS_CLUB: {\r\n                    length: [14],\r\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\r\n                },\r\n                DINERS_CLUB_US: {\r\n                    length: [16],\r\n                    prefix: ['54', '55']\r\n                },\r\n                DISCOVER: {\r\n                    length: [16],\r\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n                             '62214', '62215', '62216', '62217', '62218', '62219',\r\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n                             '62290', '62291', '622920', '622921', '622922', '622923',\r\n                             '622924', '622925', '644', '645', '646', '647', '648',\r\n                             '649', '65']\r\n                },\r\n                JCB: {\r\n                    length: [16],\r\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n                },\r\n                LASER: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['6304', '6706', '6771', '6709']\r\n                },\r\n                MAESTRO: {\r\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\r\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n                },\r\n                MASTERCARD: {\r\n                    length: [16],\r\n                    prefix: ['51', '52', '53', '54', '55']\r\n                },\r\n                SOLO: {\r\n                    length: [16, 18, 19],\r\n                    prefix: ['6334', '6767']\r\n                },\r\n                UNIONPAY: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n                             '622920', '622921', '622922', '622923', '622924', '622925']\r\n                },\r\n                VISA: {\r\n                    length: [16],\r\n                    prefix: ['4']\r\n                }\r\n            };\r\n\r\n            var type, i;\r\n            for (type in cards) {\r\n                for (i in cards[type].prefix) {\r\n                    if (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]     // Check the prefix\r\n                        && $.inArray(value.length, cards[type].length) !== -1)                      // and length\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.cusip = $.extend($.fn.bootstrapValidator.i18n.cusip || {}, {\r\n        'default': 'Please enter a valid CUSIP number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.cusip = {\r\n        /**\r\n         * Validate a CUSIP\r\n         * Examples:\r\n         * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6\r\n         * - Invalid: 31430F200, 022615AC2\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/CUSIP\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[0-9A-Z]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var converted = $.map(value.split(''), function(item) {\r\n                                var code = item.charCodeAt(0);\r\n                                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n                                            // Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n                                            ? (code - 'A'.charCodeAt(0) + 10)\r\n                                            : item;\r\n                            }),\r\n                length    = converted.length,\r\n                sum       = 0;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                var num = parseInt(converted[i], 10);\r\n                if (i % 2 !== 0) {\r\n                    num *= 2;\r\n                }\r\n                if (num > 9) {\r\n                    num -= 9;\r\n                }\r\n                sum += num;\r\n            }\r\n\r\n            sum = (10 - (sum % 10)) % 10;\r\n            return sum === converted[length - 1];\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.cvv = $.extend($.fn.bootstrapValidator.i18n.cvv || {}, {\r\n        'default': 'Please enter a valid CVV number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.cvv = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            ccfield: 'creditCardField'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid CVV number.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - creditCardField: The credit card number field. It can be null\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^[0-9]{3,4}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (!options.creditCardField) {\r\n                return true;\r\n            }\r\n\r\n            // Get the credit card number\r\n            var creditCard = validator.getFieldElements(options.creditCardField).val();\r\n            if (creditCard === '') {\r\n                return true;\r\n            }\r\n            \r\n            creditCard = creditCard.replace(/\\D/g, '');\r\n\r\n            // Supported credit card types\r\n            var cards = {\r\n                AMERICAN_EXPRESS: {\r\n                    length: [15],\r\n                    prefix: ['34', '37']\r\n                },\r\n                DINERS_CLUB: {\r\n                    length: [14],\r\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\r\n                },\r\n                DINERS_CLUB_US: {\r\n                    length: [16],\r\n                    prefix: ['54', '55']\r\n                },\r\n                DISCOVER: {\r\n                    length: [16],\r\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n                             '62214', '62215', '62216', '62217', '62218', '62219',\r\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n                             '62290', '62291', '622920', '622921', '622922', '622923',\r\n                             '622924', '622925', '644', '645', '646', '647', '648',\r\n                             '649', '65']\r\n                },\r\n                JCB: {\r\n                    length: [16],\r\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n                },\r\n                LASER: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['6304', '6706', '6771', '6709']\r\n                },\r\n                MAESTRO: {\r\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\r\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n                },\r\n                MASTERCARD: {\r\n                    length: [16],\r\n                    prefix: ['51', '52', '53', '54', '55']\r\n                },\r\n                SOLO: {\r\n                    length: [16, 18, 19],\r\n                    prefix: ['6334', '6767']\r\n                },\r\n                UNIONPAY: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n                             '622920', '622921', '622922', '622923', '622924', '622925']\r\n                },\r\n                VISA: {\r\n                    length: [16],\r\n                    prefix: ['4']\r\n                }\r\n            };\r\n            var type, i, creditCardType = null;\r\n            for (type in cards) {\r\n                for (i in cards[type].prefix) {\r\n                    if (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]    // Check the prefix\r\n                        && $.inArray(creditCard.length, cards[type].length) !== -1)                     // and length\r\n                    {\r\n                        creditCardType = type;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (creditCardType === null)\r\n                        ? false\r\n                        : (('AMERICAN_EXPRESS' === creditCardType) ? (value.length === 4) : (value.length === 3));\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.date = $.extend($.fn.bootstrapValidator.i18n.date || {}, {\r\n        'default': 'Please enter a valid date'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.date = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            format: 'format',\r\n            separator: 'separator'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is valid date\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - separator: Use to separate the date, month, and year.\r\n         * By default, it is /\r\n         * - format: The date format. Default is MM/DD/YYYY\r\n         * The format can be:\r\n         *\r\n         * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option\r\n         * ii) date and time:\r\n         * The time can consist of h, m, s parts which are separated by :\r\n         * ii) date, time and A (indicating AM or PM)\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            options.format = options.format || 'MM/DD/YYYY';\r\n\r\n            var formats    = options.format.split(' '),\r\n                dateFormat = formats[0],\r\n                timeFormat = (formats.length > 1) ? formats[1] : null,\r\n                amOrPm     = (formats.length > 2) ? formats[2] : null,\r\n                sections   = value.split(' '),\r\n                date       = sections[0],\r\n                time       = (sections.length > 1) ? sections[1] : null;\r\n\r\n            if (formats.length !== sections.length) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the separator\r\n            var separator = options.separator;\r\n            if (!separator) {\r\n                separator = (date.indexOf('/') !== -1) ? '/' : ((date.indexOf('-') !== -1) ? '-' : null);\r\n            }\r\n            if (separator === null || date.indexOf(separator) === -1) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the date\r\n            date       = date.split(separator);\r\n            dateFormat = dateFormat.split(separator);\r\n            if (date.length !== dateFormat.length) {\r\n                return false;\r\n            }\r\n\r\n            var year  = date[$.inArray('YYYY', dateFormat)],\r\n                month = date[$.inArray('MM', dateFormat)],\r\n                day   = date[$.inArray('DD', dateFormat)];\r\n\r\n            if (!year || !month || !day) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the time\r\n            var minutes = null, hours = null, seconds = null;\r\n            if (timeFormat) {\r\n                timeFormat = timeFormat.split(':');\r\n                time       = time.split(':');\r\n\r\n                if (timeFormat.length !== time.length) {\r\n                    return false;\r\n                }\r\n\r\n                hours   = time.length > 0 ? time[0] : null;\r\n                minutes = time.length > 1 ? time[1] : null;\r\n                seconds = time.length > 2 ? time[2] : null;\r\n\r\n                // Validate seconds\r\n                if (seconds) {\r\n                    seconds = parseInt(seconds, 10);\r\n                    if (isNaN(seconds) || seconds < 0 || seconds > 60) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Validate hours\r\n                if (hours) {\r\n                    hours = parseInt(hours, 10);\r\n                    if (isNaN(hours) || hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Validate minutes\r\n                if (minutes) {\r\n                    minutes = parseInt(minutes, 10);\r\n                    if (isNaN(minutes) || minutes < 0 || minutes > 59) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Validate day, month, and year\r\n            return $.fn.bootstrapValidator.helpers.date(year, month, day);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.different = $.extend($.fn.bootstrapValidator.i18n.different || {}, {\r\n        'default': 'Please enter a different value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.different = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            field: 'field'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is different with given field's value\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareWith = validator.getFieldElements(options.field);\r\n            if (compareWith === null) {\r\n                return true;\r\n            }\r\n\r\n            if (value !== compareWith.val()) {\r\n                validator.updateStatus(options.field, validator.STATUS_VALID, 'different');\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.digits = $.extend($.fn.bootstrapValidator.i18n.digits || {}, {\r\n        'default': 'Please enter only digits'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.digits = {\r\n        /**\r\n         * Return true if the input value contains digits only\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options]\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^\\d+$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.ean = $.extend($.fn.bootstrapValidator.i18n.ean || {}, {\r\n        'default': 'Please enter a valid EAN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.ean = {\r\n        /**\r\n         * Validate EAN (International Article Number)\r\n         * Examples:\r\n         * - Valid: 73513537, 9780471117094, 4006381333931\r\n         * - Invalid: 73513536\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/European_Article_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^(\\d{8}|\\d{12}|\\d{13})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = (length === 8) ? [3, 1] : [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = (10 - sum % 10) % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.emailAddress = $.extend($.fn.bootstrapValidator.i18n.emailAddress || {}, {\r\n        'default': 'Please enter a valid email address'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.emailAddress = {\r\n        enableByHtml5: function($field) {\r\n            return ('email' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid email address\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options]\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Email address regular expression\r\n            // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n            var emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            return emailRegExp.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.file = $.extend($.fn.bootstrapValidator.i18n.file || {}, {\r\n        'default': 'Please choose a valid file'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.file = {\r\n        html5Attributes: {\r\n            extension: 'extension',\r\n            maxsize: 'maxSize',\r\n            message: 'message',\r\n            type: 'type'\r\n        },\r\n\r\n        /**\r\n         * Validate upload file. Use HTML 5 API if the browser supports\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - extension: The allowed extensions, separated by a comma\r\n         * - maxSize: The maximum size in bytes\r\n         * - message: The invalid message\r\n         * - type: The allowed MIME type, separated by a comma\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var ext,\r\n                extensions = options.extension ? options.extension.toLowerCase().split(',') : null,\r\n                types      = options.type      ? options.type.toLowerCase().split(',')      : null,\r\n                html5      = (window.File && window.FileList && window.FileReader);\r\n\r\n            if (html5) {\r\n                // Get FileList instance\r\n                var files = $field.get(0).files,\r\n                    total = files.length;\r\n                for (var i = 0; i < total; i++) {\r\n                    // Check file size\r\n                    if (options.maxSize && files[i].size > parseInt(options.maxSize, 10)) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Check file extension\r\n                    ext = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);\r\n                    if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Check file type\r\n                    if (types && $.inArray(files[i].type.toLowerCase(), types) === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            } else {\r\n                // Check file extension\r\n                ext = value.substr(value.lastIndexOf('.') + 1);\r\n                if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.greaterThan = $.extend($.fn.bootstrapValidator.i18n.greaterThan || {}, {\r\n        'default': 'Please enter a value greater than or equal to %s',\r\n        notInclusive: 'Please enter a value greater than %s'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.greaterThan = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            value: 'value',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var min = $field.attr('min');\r\n            if (min) {\r\n                return {\r\n                    value: min\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is greater than or equals to given number\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - value: Define the number to compare with. It can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\r\n\r\n            value = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value >= compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan['default'], compareTo)\r\n                    }\r\n                    : {\r\n                        valid: value > compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan.notInclusive, compareTo)\r\n                    };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.grid = $.extend($.fn.bootstrapValidator.i18n.grid || {}, {\r\n        'default': 'Please enter a valid GRId number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.grid = {\r\n        /**\r\n         * Validate GRId (Global Release Identifier)\r\n         * Examples:\r\n         * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M\r\n         * - Invalid: A1-2425G-ABC1234002-Q\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Global_Release_Identifier\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\s/g, '').replace(/-/g, '');\r\n            if ('GRID:' === value.substr(0, 5)) {\r\n                value = value.substr(5);\r\n            }\r\n            return $.fn.bootstrapValidator.helpers.mod37And36(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.hex = $.extend($.fn.bootstrapValidator.i18n.hex || {}, {\r\n        'default': 'Please enter a valid hexadecimal number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.hex = {\r\n        /**\r\n         * Return true if and only if the input value is a valid hexadecimal number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^[0-9a-fA-F]+$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.hexColor = $.extend($.fn.bootstrapValidator.i18n.hexColor || {}, {\r\n        'default': 'Please enter a valid hex color'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.hexColor = {\r\n        enableByHtml5: function($field) {\r\n            return ('color' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid hex color\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.iban = $.extend($.fn.bootstrapValidator.i18n.iban || {}, {\r\n        'default': 'Please enter a valid IBAN number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid IBAN number in %s',\r\n        countries: {\r\n            AD: 'Andorra',\r\n            AE: 'United Arab Emirates',\r\n            AL: 'Albania',\r\n            AO: 'Angola',\r\n            AT: 'Austria',\r\n            AZ: 'Azerbaijan',\r\n            BA: 'Bosnia and Herzegovina',\r\n            BE: 'Belgium',\r\n            BF: 'Burkina Faso',\r\n            BG: 'Bulgaria',\r\n            BH: 'Bahrain',\r\n            BI: 'Burundi',\r\n            BJ: 'Benin',\r\n            BR: 'Brazil',\r\n            CH: 'Switzerland',\r\n            CI: 'Ivory Coast',\r\n            CM: 'Cameroon',\r\n            CR: 'Costa Rica',\r\n            CV: 'Cape Verde',\r\n            CY: 'Cyprus',\r\n            CZ: 'Czech Republic',\r\n            DE: 'Germany',\r\n            DK: 'Denmark',\r\n            DO: 'Dominican Republic',\r\n            DZ: 'Algeria',\r\n            EE: 'Estonia',\r\n            ES: 'Spain',\r\n            FI: 'Finland',\r\n            FO: 'Faroe Islands',\r\n            FR: 'France',\r\n            GB: 'United Kingdom',\r\n            GE: 'Georgia',\r\n            GI: 'Gibraltar',\r\n            GL: 'Greenland',\r\n            GR: 'Greece',\r\n            GT: 'Guatemala',\r\n            HR: 'Croatia',\r\n            HU: 'Hungary',\r\n            IE: 'Ireland',\r\n            IL: 'Israel',\r\n            IR: 'Iran',\r\n            IS: 'Iceland',\r\n            IT: 'Italy',\r\n            JO: 'Jordan',\r\n            KW: 'Kuwait',\r\n            KZ: 'Kazakhstan',\r\n            LB: 'Lebanon',\r\n            LI: 'Liechtenstein',\r\n            LT: 'Lithuania',\r\n            LU: 'Luxembourg',\r\n            LV: 'Latvia',\r\n            MC: 'Monaco',\r\n            MD: 'Moldova',\r\n            ME: 'Montenegro',\r\n            MG: 'Madagascar',\r\n            MK: 'Macedonia',\r\n            ML: 'Mali',\r\n            MR: 'Mauritania',\r\n            MT: 'Malta',\r\n            MU: 'Mauritius',\r\n            MZ: 'Mozambique',\r\n            NL: 'Netherlands',\r\n            NO: 'Norway',\r\n            PK: 'Pakistan',\r\n            PL: 'Poland',\r\n            PS: 'Palestinian',\r\n            PT: 'Portugal',\r\n            QA: 'Qatar',\r\n            RO: 'Romania',\r\n            RS: 'Serbia',\r\n            SA: 'Saudi Arabia',\r\n            SE: 'Sweden',\r\n            SI: 'Slovenia',\r\n            SK: 'Slovakia',\r\n            SM: 'San Marino',\r\n            SN: 'Senegal',\r\n            TN: 'Tunisia',\r\n            TR: 'Turkey',\r\n            VG: 'Virgin Islands, British'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.iban = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\r\n        // http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\r\n        REGEX: {\r\n            'AD': 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',                     // Andorra\r\n            'AE': 'AE[0-9]{2}[0-9]{3}[0-9]{16}',                                // United Arab Emirates\r\n            'AL': 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',                             // Albania\r\n            'AO': 'AO[0-9]{2}[0-9]{21}',                                        // Angola\r\n            'AT': 'AT[0-9]{2}[0-9]{5}[0-9]{11}',                                // Austria\r\n            'AZ': 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',                             // Azerbaijan\r\n            'BA': 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',                 // Bosnia and Herzegovina\r\n            'BE': 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',                         // Belgium\r\n            'BF': 'BF[0-9]{2}[0-9]{23}',                                        // Burkina Faso\r\n            'BG': 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',              // Bulgaria\r\n            'BH': 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',                             // Bahrain\r\n            'BI': 'BI[0-9]{2}[0-9]{12}',                                        // Burundi\r\n            'BJ': 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Benin\r\n            'BR': 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',           // Brazil\r\n            'CH': 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                             // Switzerland\r\n            'CI': 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Ivory Coast\r\n            'CM': 'CM[0-9]{2}[0-9]{23}',                                        // Cameroon\r\n            'CR': 'CR[0-9]{2}[0-9]{3}[0-9]{14}',                                // Costa Rica\r\n            'CV': 'CV[0-9]{2}[0-9]{21}',                                        // Cape Verde\r\n            'CY': 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',                     // Cyprus\r\n            'CZ': 'CZ[0-9]{2}[0-9]{20}',                                        // Czech Republic\r\n            'DE': 'DE[0-9]{2}[0-9]{8}[0-9]{10}',                                // Germany\r\n            'DK': 'DK[0-9]{2}[0-9]{14}',                                        // Denmark\r\n            'DO': 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',                             // Dominican Republic\r\n            'DZ': 'DZ[0-9]{2}[0-9]{20}',                                        // Algeria\r\n            'EE': 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',                // Estonia\r\n            'ES': 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',        // Spain\r\n            'FI': 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',                         // Finland\r\n            'FO': 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                         // Faroe Islands\r\n            'FR': 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',             // France\r\n            'GB': 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                         // United Kingdom\r\n            'GE': 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',                                // Georgia\r\n            'GI': 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',                             // Gibraltar\r\n            'GL': 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                         // Greenland\r\n            'GR': 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',                     // Greece\r\n            'GT': 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',                          // Guatemala\r\n            'HR': 'HR[0-9]{2}[0-9]{7}[0-9]{10}',                                // Croatia\r\n            'HU': 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',        // Hungary\r\n            'IE': 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                         // Ireland\r\n            'IL': 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',                        // Israel\r\n            'IR': 'IR[0-9]{2}[0-9]{22}',                                        // Iran\r\n            'IS': 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',                // Iceland\r\n            'IT': 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',             // Italy\r\n            'JO': 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',               // Jordan\r\n            'KW': 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',                                // Kuwait\r\n            'KZ': 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                             // Kazakhstan\r\n            'LB': 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',                             // Lebanon\r\n            'LI': 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                             // Liechtenstein\r\n            'LT': 'LT[0-9]{2}[0-9]{5}[0-9]{11}',                                // Lithuania\r\n            'LU': 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                             // Luxembourg\r\n            'LV': 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',                             // Latvia\r\n            'MC': 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',             // Monaco\r\n            'MD': 'MD[0-9]{2}[A-Z0-9]{20}',                                     // Moldova\r\n            'ME': 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Montenegro\r\n            'MG': 'MG[0-9]{2}[0-9]{23}',                                        // Madagascar\r\n            'MK': 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',                     // Macedonia\r\n            'ML': 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Mali\r\n            'MR': 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',                      // Mauritania\r\n            'MT': 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',                     // Malta\r\n            'MU': 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',// Mauritius\r\n            'MZ': 'MZ[0-9]{2}[0-9]{21}',                                        // Mozambique\r\n            'NL': 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',                                // Netherlands\r\n            'NO': 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',                         // Norway\r\n            'PK': 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                             // Pakistan\r\n            'PL': 'PL[0-9]{2}[0-9]{8}[0-9]{16}',                                // Poland\r\n            'PS': 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                             // Palestinian\r\n            'PT': 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',                // Portugal\r\n            'QA': 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                             // Qatar\r\n            'RO': 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                             // Romania\r\n            'RS': 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Serbia\r\n            'SA': 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',                             // Saudi Arabia\r\n            'SE': 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',                        // Sweden\r\n            'SI': 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',                         // Slovenia\r\n            'SK': 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',                        // Slovakia\r\n            'SM': 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',             // San Marino\r\n            'SN': 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',                                // Senegal\r\n            'TN': 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                      // Tunisia\r\n            'TR': 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',                  // Turkey\r\n            'VG': 'VG[0-9]{2}[A-Z]{4}[0-9]{16}'                                 // Virgin Islands, British\r\n        },\r\n\r\n        /**\r\n         * Validate an International Bank Account Number (IBAN)\r\n         * To test it, take the sample IBAN from\r\n         * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - A country code\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || !this.REGEX[country]) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!this.REGEX[country]) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.iban.countryNotSupported, country)\r\n                };\r\n            }\r\n\r\n            if (!(new RegExp('^' + this.REGEX[country] + '$')).test(value)) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\r\n                };\r\n            }\r\n\r\n            value = value.substr(4) + value.substr(0, 4);\r\n            value = $.map(value.split(''), function(n) {\r\n                var code = n.charCodeAt(0);\r\n                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n                        // Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n                        ? (code - 'A'.charCodeAt(0) + 10)\r\n                        : n;\r\n            });\r\n            value = value.join('');\r\n\r\n            var temp   = parseInt(value.substr(0, 1), 10),\r\n                length = value.length;\r\n            for (var i = 1; i < length; ++i) {\r\n                temp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;\r\n            }\r\n\r\n            return {\r\n                valid: (temp === 1),\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.id = $.extend($.fn.bootstrapValidator.i18n.id || {}, {\r\n        'default': 'Please enter a valid identification number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid %s identification number',\r\n        countries: {\r\n            BA: 'Bosnia and Herzegovina',\r\n            BG: 'Bulgarian',\r\n            BR: 'Brazilian',\r\n            CH: 'Swiss',\r\n            CL: 'Chilean',\r\n            CZ: 'Czech',\r\n            DK: 'Danish',\r\n            EE: 'Estonian',\r\n            ES: 'Spanish',\r\n            FI: 'Finnish',\r\n            HR: 'Croatian',\r\n            IE: 'Irish',\r\n            IS: 'Iceland',\r\n            LT: 'Lithuanian',\r\n            LV: 'Latvian',\r\n            ME: 'Montenegro',\r\n            MK: 'Macedonian',\r\n            NL: 'Dutch',\r\n            RO: 'Romanian',\r\n            RS: 'Serbian',\r\n            SE: 'Swedish',\r\n            SI: 'Slovenian',\r\n            SK: 'Slovak',\r\n            SM: 'San Marino',\r\n            ZA: 'South African'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.id = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // Supported country codes\r\n        COUNTRY_CODES: [\r\n            'BA', 'BG', 'BR', 'CH', 'CL', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL',\r\n            'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'ZA'\r\n        ],\r\n\r\n        /**\r\n         * Validate identification number in different countries\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - One of country code defined in COUNTRY_CODES\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                return { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.id.countryNotSupported, country) };\r\n            }\r\n\r\n            var method  = ['_', country.toLowerCase()].join('');\r\n            return this[method](value)\r\n                    ? true\r\n                    : {\r\n                        valid: false,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.id.country, $.fn.bootstrapValidator.i18n.id.countries[country.toUpperCase()])\r\n                    };\r\n        },\r\n\r\n        /**\r\n         * Validate Unique Master Citizen Number which uses in\r\n         * - Bosnia and Herzegovina (country code: BA)\r\n         * - Macedonia (MK)\r\n         * - Montenegro (ME)\r\n         * - Serbia (RS)\r\n         * - Slovenia (SI)\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\r\n         * @param {String} value The ID\r\n         * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI\r\n         * @returns {Boolean}\r\n         */\r\n        _validateJMBG: function(value, countryCode) {\r\n            if (!/^\\d{13}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 3), 10),\r\n                rr    = parseInt(value.substr(7, 2), 10),\r\n                k     = parseInt(value.substr(12, 1), 10);\r\n\r\n            // Validate date of birth\r\n            // FIXME: Validate the year of birth\r\n            if (day > 31 || month > 12) {\r\n                return false;\r\n            }\r\n\r\n            // Validate checksum\r\n            var sum = 0;\r\n            for (var i = 0; i < 6; i++) {\r\n                sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10 || sum === 11) {\r\n                sum = 0;\r\n            }\r\n            if (sum !== k) {\r\n                return false;\r\n            }\r\n\r\n            // Validate political region\r\n            // rr is the political region of birth, which can be in ranges:\r\n            // 10-19: Bosnia and Herzegovina\r\n            // 20-29: Montenegro\r\n            // 30-39: Croatia (not used anymore)\r\n            // 41-49: Macedonia\r\n            // 50-59: Slovenia (only 50 is used)\r\n            // 70-79: Central Serbia\r\n            // 80-89: Serbian province of Vojvodina\r\n            // 90-99: Kosovo\r\n            switch (countryCode.toUpperCase()) {\r\n                case 'BA':\r\n                    return (10 <= rr && rr <= 19);\r\n                case 'MK':\r\n                    return (41 <= rr && rr <= 49);\r\n                case 'ME':\r\n                    return (20 <= rr && rr <= 29);\r\n                case 'RS':\r\n                    return (70 <= rr && rr <= 99);\r\n                case 'SI':\r\n                    return (50 <= rr && rr <= 59);\r\n                default:\r\n                    return true;\r\n            }\r\n        },\r\n\r\n        _ba: function(value) {\r\n            return this._validateJMBG(value, 'BA');\r\n        },\r\n        _mk: function(value) {\r\n            return this._validateJMBG(value, 'MK');\r\n        },\r\n        _me: function(value) {\r\n            return this._validateJMBG(value, 'ME');\r\n        },\r\n        _rs: function(value) {\r\n            return this._validateJMBG(value, 'RS');\r\n        },\r\n\r\n        /**\r\n         * Examples: 0101006500006\r\n         */\r\n        _si: function(value) {\r\n            return this._validateJMBG(value, 'SI');\r\n        },\r\n\r\n        /**\r\n         * Validate Bulgarian national identification number (EGN)\r\n         * Examples:\r\n         * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030\r\n         * - Invalid: 8019010008\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Uniform_civil_number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _bg: function(value) {\r\n            if (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\s/g, '');\r\n            // Check the birth date\r\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (month > 40) {\r\n                year += 100;\r\n                month -= 40;\r\n            } else if (month > 20) {\r\n                year -= 100;\r\n                month -= 20;\r\n            }\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n            for (var i = 0; i < 9; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum % 11) % 10;\r\n            return (sum + '' === value.substr(9, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Brazilian national identification number (CPF)\r\n         * Examples:\r\n         * - Valid: 39053344705, 390.533.447-05, 111.444.777-35\r\n         * - Invalid: 231.002.999-00\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _br: function(value) {\r\n            if (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            if (!/^\\d{11}$/.test(value) && !/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\./g, '').replace(/-/g, '');\r\n\r\n            var d1 = 0;\r\n            for (var i = 0; i < 9; i++) {\r\n                d1 += (10 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            d1 = 11 - d1 % 11;\r\n            if (d1 === 10 || d1 === 11) {\r\n                d1 = 0;\r\n            }\r\n            if (d1 + '' !== value.charAt(9)) {\r\n                return false;\r\n            }\r\n\r\n            var d2 = 0;\r\n            for (i = 0; i < 10; i++) {\r\n                d2 += (11 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            d2 = 11 - d2 % 11;\r\n            if (d2 === 10 || d2 === 11) {\r\n                d2 = 0;\r\n            }\r\n\r\n            return (d2 + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Swiss Social Security Number (AHV-Nr/No AVS)\r\n         * Examples:\r\n         * - Valid: 756.1234.5678.95, 7561234567895\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\r\n         * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ch: function(value) {\r\n            if (!/^756[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{2}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '').substr(3);\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = (length === 8) ? [3, 1] : [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = 10 - sum % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Chilean national identification number (RUN/RUT)\r\n         * Examples:\r\n         * - Valid: 76086428-5, 22060449-7, 12531909-2\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\r\n         * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cl: function(value) {\r\n            if (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\-/g, '');\r\n            while (value.length < 9) {\r\n                value = '0' + value;\r\n            }\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            } else if (sum === 10) {\r\n                sum = 'K';\r\n            }\r\n            return sum + '' === value.charAt(8).toUpperCase();\r\n        },\r\n\r\n        /**\r\n         * Validate Czech national identification number (RC)\r\n         * Examples:\r\n         * - Valid: 7103192745, 991231123\r\n         * - Invalid: 1103492745, 590312123\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cz: function(value) {\r\n            if (!/^\\d{9,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (value.length === 9) {\r\n                if (year >= 1980) {\r\n                    year -= 100;\r\n                }\r\n                if (year > 1953) {\r\n                    return false;\r\n                }\r\n            } else if (year < 1954) {\r\n                year += 100;\r\n            }\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Check that the birth date is not in the future\r\n            if (value.length === 10) {\r\n                var check = parseInt(value.substr(0, 9), 10) % 11;\r\n                if (year < 1985) {\r\n                    check = check % 10;\r\n                }\r\n                return (check + '' === value.substr(9, 1));\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Danish Personal Identification number (CPR)\r\n         * Examples:\r\n         * - Valid: 2110625629, 211062-5629\r\n         * - Invalid: 511062-5629\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _dk: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/-/g, '');\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 2), 10);\r\n\r\n            switch (true) {\r\n                case ('5678'.indexOf(value.charAt(6)) !== -1 && year >= 58):\r\n                    year += 1800;\r\n                    break;\r\n                case ('0123'.indexOf(value.charAt(6)) !== -1):\r\n                case ('49'.indexOf(value.charAt(6)) !== -1 && year >= 37):\r\n                    year += 1900;\r\n                    break;\r\n                default:\r\n                    year += 2000;\r\n                    break;\r\n            }\r\n\r\n            return $.fn.bootstrapValidator.helpers.date(year, month, day);\r\n        },\r\n\r\n        /**\r\n         * Validate Estonian Personal Identification Code (isikukood)\r\n         * Examples:\r\n         * - Valid: 37605030299\r\n         *\r\n         * @see http://et.wikipedia.org/wiki/Isikukood\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ee: function(value) {\r\n            // Use the same format as Lithuanian Personal Code\r\n            return this._lt(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Spanish personal identity code (DNI)\r\n         * Support i) DNI (for Spanish citizens) and ii) NIE (for foreign people)\r\n         *\r\n         * Examples:\r\n         * - Valid: i) 54362315K, 54362315-K; ii) X2482300W, X-2482300W, X-2482300-W\r\n         * - Invalid: i) 54362315Z; ii) X-2482300A\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _es: function(value) {\r\n            if (!/^[0-9A-Z]{8}[-]{0,1}[0-9A-Z]$/.test(value)                    // DNI\r\n                && !/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-Z]$/.test(value)) {    // NIE\r\n                return false;\r\n            }\r\n\r\n            value = value.replace(/-/g, '');\r\n            var index = 'XYZ'.indexOf(value.charAt(0));\r\n            if (index !== -1) {\r\n                // It is NIE number\r\n                value = index + value.substr(1) + '';\r\n            }\r\n\r\n            var check = parseInt(value.substr(0, 8), 10);\r\n            check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n            return (check === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Finnish Personal Identity Code (HETU)\r\n         * Examples:\r\n         * - Valid: 311280-888Y, 131052-308T\r\n         * - Invalid: 131052-308U, 310252-308Y\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _fi: function(value) {\r\n            if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\r\n                return false;\r\n            }\r\n            var day       = parseInt(value.substr(0, 2), 10),\r\n                month     = parseInt(value.substr(2, 2), 10),\r\n                year      = parseInt(value.substr(4, 2), 10),\r\n                centuries = {\r\n                    '+': 1800,\r\n                    '-': 1900,\r\n                    'A': 2000\r\n                };\r\n            year = centuries[value.charAt(6)] + year;\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            var individual = parseInt(value.substr(7, 3), 10);\r\n            if (individual < 2) {\r\n                return false;\r\n            }\r\n            var n = value.substr(0, 6) + value.substr(7, 3) + '';\r\n            n = parseInt(n, 10);\r\n            return '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);\r\n        },\r\n\r\n        /**\r\n         * Validate Croatian personal identification number (OIB)\r\n         * Examples:\r\n         * - Valid: 33392005961\r\n         * - Invalid: 33392005962\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _hr: function(value) {\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Irish Personal Public Service Number (PPS)\r\n         * Examples:\r\n         * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA\r\n         * - Invalid: 6433435E, 6433435VH\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ie: function(value) {\r\n            if (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var getCheckDigit = function(value) {\r\n                while (value.length < 7) {\r\n                    value = '0' + value;\r\n                }\r\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n                    sum      = 0;\r\n                for (var i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum += 9 * alphabet.indexOf(value.substr(7));\r\n                return alphabet[sum % 23];\r\n            };\r\n\r\n            // 2013 format\r\n            if (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n            }\r\n            // The old format\r\n            else {\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Iceland national identification number (Kennitala)\r\n         * Examples:\r\n         * - Valid: 120174-3399, 1201743399, 0902862349\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Kennitala\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _is: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/-/g, '');\r\n            var day     = parseInt(value.substr(0, 2), 10),\r\n                month   = parseInt(value.substr(2, 2), 10),\r\n                year    = parseInt(value.substr(4, 2), 10),\r\n                century = parseInt(value.charAt(9), 10);\r\n\r\n            year = (century === 9) ? (1900 + year) : ((20 + century) * 100 + year);\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            return (sum + '' === value.charAt(8));\r\n        },\r\n\r\n        /**\r\n         * Validate Lithuanian Personal Code (Asmens kodas)\r\n         * Examples:\r\n         * - Valid: 38703181745\r\n         * - Invalid: 38703181746, 78703181745, 38703421745\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\r\n         * @see http://www.adomas.org/midi2007/pcode.html\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _lt: function(value) {\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var gender  = parseInt(value.charAt(0), 10),\r\n                year    = parseInt(value.substr(1, 2), 10),\r\n                month   = parseInt(value.substr(3, 2), 10),\r\n                day     = parseInt(value.substr(5, 2), 10),\r\n                century = (gender % 2 === 0) ? (17 + gender / 2) : (17 + (gender + 1) / 2);\r\n            year = century * 100 + year;\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum !== 10) {\r\n                return sum + '' === value.charAt(10);\r\n            }\r\n\r\n            // Re-calculate the check digit\r\n            sum    = 0;\r\n            weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\r\n            for (i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Latvian Personal Code (Personas kods)\r\n         * Examples:\r\n         * - Valid: 161175-19997, 16117519997\r\n         * - Invalid: 161375-19997\r\n         *\r\n         * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _lv: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '');\r\n            // Check birth date\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 2), 10);\r\n            year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n\r\n            // Check personal code\r\n            var sum    = 0,\r\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum + 1) % 11 % 10;\r\n            return (sum + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Dutch national identification number (BSN)\r\n         * Examples:\r\n         * - Valid: 111222333, 941331490, 9413.31.490\r\n         * - Invalid: 111252333\r\n         *\r\n         * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _nl: function(value) {\r\n            while (value.length < 9) {\r\n                value = '0' + value;\r\n            }\r\n            if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\./g, '');\r\n            if (parseInt(value, 10) === 0) {\r\n                return false;\r\n            }\r\n            var sum    = 0,\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += (9 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Romanian numerical personal code (CNP)\r\n         * Examples:\r\n         * - Valid: 1630615123457, 1800101221144\r\n         * - Invalid: 8800101221144, 1632215123457, 1630615123458\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ro: function(value) {\r\n            if (!/^[0-9]{13}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var gender = parseInt(value.charAt(0), 10);\r\n            if (gender === 0 || gender === 7 || gender === 8) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the date of birth\r\n            var year      = parseInt(value.substr(1, 2), 10),\r\n                month     = parseInt(value.substr(3, 2), 10),\r\n                day       = parseInt(value.substr(5, 2), 10),\r\n                // The year of date is determined base on the gender\r\n                centuries = {\r\n                    '1': 1900,  // Male born between 1900 and 1999\r\n                    '2': 1900,  // Female born between 1900 and 1999\r\n                    '3': 1800,  // Male born between 1800 and 1899\r\n                    '4': 1800,  // Female born between 1800 and 1899\r\n                    '5': 2000,  // Male born after 2000\r\n                    '6': 2000   // Female born after 2000\r\n                };\r\n            if (day > 31 && month > 12) {\r\n                return false;\r\n            }\r\n            if (gender !== 9) {\r\n                year = centuries[gender + ''] + year;\r\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 1;\r\n            }\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Swedish personal identity number (personnummer)\r\n         * Examples:\r\n         * - Valid: 8112289874, 811228-9874, 811228+9874\r\n         * - Invalid: 811228-9873\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _se: function(value) {\r\n            if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/[^0-9]/g, '');\r\n\r\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the last check digit\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Slovak national identifier number (RC)\r\n         * Examples:\r\n         * - Valid: 7103192745, 991231123\r\n         * - Invalid: 7103192746, 1103492745\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _sk: function(value) {\r\n            // Slovakia uses the same format as Czech Republic\r\n            return this._cz(value);\r\n        },\r\n\r\n        /**\r\n         * Validate San Marino citizen number\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _sm: function(value) {\r\n            return /^\\d{5}$/.test(value);\r\n        },\r\n\r\n        /**\r\n         * Validate South African ID\r\n         * Example:\r\n         * - Valid: 8001015009087\r\n         * - Invalid: 8001015009287, 8001015009086\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _za: function(value) {\r\n            if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\r\n                return false;\r\n            }\r\n            var year        = parseInt(value.substr(0, 2), 10),\r\n                currentYear = new Date().getFullYear() % 100,\r\n                month       = parseInt(value.substr(2, 2), 10),\r\n                day         = parseInt(value.substr(4, 2), 10);\r\n            year = (year >= currentYear) ? (year + 1900) : (year + 2000);\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the last check digit\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.identical = $.extend($.fn.bootstrapValidator.i18n.identical || {}, {\r\n        'default': 'Please enter the same value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.identical = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            field: 'field'\r\n        },\r\n\r\n        /**\r\n         * Check if input value equals to value of particular one\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareWith = validator.getFieldElements(options.field);\r\n            if (compareWith === null) {\r\n                return true;\r\n            }\r\n\r\n            if (value === compareWith.val()) {\r\n                validator.updateStatus(options.field, validator.STATUS_VALID, 'identical');\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.imei = $.extend($.fn.bootstrapValidator.i18n.imei || {}, {\r\n        'default': 'Please enter a valid IMEI number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.imei = {\r\n        /**\r\n         * Validate IMEI (International Mobile Station Equipment Identity)\r\n         * Examples:\r\n         * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518\r\n         * - Invalid: 490154203237517\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            switch (true) {\r\n                case /^\\d{15}$/.test(value):\r\n                case /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/.test(value):\r\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}\\s\\d{1}$/.test(value):\r\n                    value = value.replace(/[^0-9]/g, '');\r\n                    return $.fn.bootstrapValidator.helpers.luhn(value);\r\n\r\n                case /^\\d{14}$/.test(value):\r\n                case /^\\d{16}$/.test(value):\r\n                case /^\\d{2}-\\d{6}-\\d{6}(|-\\d{2})$/.test(value):\r\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}(|\\s\\d{2})$/.test(value):\r\n                    return true;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.integer = $.extend($.fn.bootstrapValidator.i18n.integer || {}, {\r\n        'default': 'Please enter a valid number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.integer = {\r\n        enableByHtml5: function($field) {\r\n            return ('number' === $field.attr('type')) && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is an integer\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            return /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.ip = $.extend($.fn.bootstrapValidator.i18n.ip || {}, {\r\n        'default': 'Please enter a valid IP address',\r\n        ipv4: 'Please enter a valid IPv4 address',\r\n        ipv6: 'Please enter a valid IPv6 address'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.ip = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            ipv4: 'ipv4',\r\n            ipv6: 'ipv6'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a IP address.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - ipv4: Enable IPv4 validator, default to true\r\n         * - ipv6: Enable IPv6 validator, default to true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            options = $.extend({}, { ipv4: true, ipv6: true }, options);\r\n\r\n            if (options.ipv4) {\r\n                return {\r\n                    valid: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(value),\r\n                    message: options.message || $.fn.bootstrapValidator.i18n.ip.ipv4\r\n                };\r\n            } else if (options.ipv6) {\r\n                return {\r\n                    valid: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/.test(value),\r\n                    message: options.message || $.fn.bootstrapValidator.i18n.ip.ipv6\r\n                };\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.isbn = $.extend($.fn.bootstrapValidator.i18n.isbn || {}, {\r\n        'default': 'Please enter a valid ISBN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.isbn = {\r\n        /**\r\n         * Return true if the input value is a valid ISBN 10 or ISBN 13 number\r\n         * Examples:\r\n         * - Valid:\r\n         * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X\r\n         * ISBN 13: 978-0-306-40615-7\r\n         * - Invalid:\r\n         * ISBN 10: 99921-58-10-6\r\n         * ISBN 13: 978-0-306-40615-6\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview\r\n            // Groups are separated by a hyphen or a space\r\n            var type;\r\n            switch (true) {\r\n                case /^\\d{9}[\\dX]$/.test(value):\r\n                case (value.length === 13 && /^(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n                case (value.length === 13 && /^(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n                    type = 'ISBN10';\r\n                    break;\r\n                case /^(978|979)\\d{9}[\\dX]$/.test(value):\r\n                case (value.length === 17 && /^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n                case (value.length === 17 && /^(978|979)\\s(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n                    type = 'ISBN13';\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            // Replace all special characters except digits and X\r\n            value = value.replace(/[^0-9X]/gi, '');\r\n            var chars  = value.split(''),\r\n                length = chars.length,\r\n                sum    = 0,\r\n                i,\r\n                checksum;\r\n\r\n            switch (type) {\r\n                case 'ISBN10':\r\n                    sum = 0;\r\n                    for (i = 0; i < length - 1; i++) {\r\n                        sum += parseInt(chars[i], 10) * (10 - i);\r\n                    }\r\n                    checksum = 11 - (sum % 11);\r\n                    if (checksum === 11) {\r\n                        checksum = 0;\r\n                    } else if (checksum === 10) {\r\n                        checksum = 'X';\r\n                    }\r\n                    return (checksum + '' === chars[length - 1]);\r\n\r\n                case 'ISBN13':\r\n                    sum = 0;\r\n                    for (i = 0; i < length - 1; i++) {\r\n                        sum += ((i % 2 === 0) ? parseInt(chars[i], 10) : (parseInt(chars[i], 10) * 3));\r\n                    }\r\n                    checksum = 10 - (sum % 10);\r\n                    if (checksum === 10) {\r\n                        checksum = '0';\r\n                    }\r\n                    return (checksum + '' === chars[length - 1]);\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.isin = $.extend($.fn.bootstrapValidator.i18n.isin || {}, {\r\n        'default': 'Please enter a valid ISIN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.isin = {\r\n        // Available country codes\r\n        // See http://isin.net/country-codes/\r\n        COUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',\r\n\r\n        /**\r\n         * Validate an ISIN (International Securities Identification Number)\r\n         * Examples:\r\n         * - Valid: US0378331005, AU0000XVGZA3, GB0002634946\r\n         * - Invalid: US0378331004, AA0000XVGZA3\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            var regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');\r\n            if (!regex.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var converted = '',\r\n                length    = value.length;\r\n            // Convert letters to number\r\n            for (var i = 0; i < length - 1; i++) {\r\n                var c = value.charCodeAt(i);\r\n                converted += ((c > 57) ? (c - 55).toString() : value.charAt(i));\r\n            }\r\n\r\n            var digits = '',\r\n                n      = converted.length,\r\n                group  = (n % 2 !== 0) ? 0 : 1;\r\n            for (i = 0; i < n; i++) {\r\n                digits += (parseInt(converted[i], 10) * ((i % 2) === group ? 2 : 1) + '');\r\n            }\r\n\r\n            var sum = 0;\r\n            for (i = 0; i < digits.length; i++) {\r\n                sum += parseInt(digits.charAt(i), 10);\r\n            }\r\n            sum = (10 - (sum % 10)) % 10;\r\n            return sum + '' === value.charAt(length - 1);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.ismn = $.extend($.fn.bootstrapValidator.i18n.ismn || {}, {\r\n        'default': 'Please enter a valid ISMN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.ismn = {\r\n        /**\r\n         * Validate ISMN (International Standard Music Number)\r\n         * Examples:\r\n         * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615\r\n         * - Invalid: 9790060115614\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Groups are separated by a hyphen or a space\r\n            var type;\r\n            switch (true) {\r\n                case /^M\\d{9}$/.test(value):\r\n                case /^M-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n                case /^M\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n                    type = 'ISMN10';\r\n                    break;\r\n                case /^9790\\d{9}$/.test(value):\r\n                case /^979-0-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n                case /^979\\s0\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n                    type = 'ISMN13';\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            if ('ISMN10' === type) {\r\n                value = '9790' + value.substr(1);\r\n            }\r\n\r\n            // Replace all special characters except digits\r\n            value = value.replace(/[^0-9]/gi, '');\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = 10 - sum % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.issn = $.extend($.fn.bootstrapValidator.i18n.issn || {}, {\r\n        'default': 'Please enter a valid ISSN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.issn = {\r\n        /**\r\n         * Validate ISSN (International Standard Serial Number)\r\n         * Examples:\r\n         * - Valid: 0378-5955, 0024-9319, 0032-1478\r\n         * - Invalid: 0032-147X\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Groups are separated by a hyphen or a space\r\n            if (!/^\\d{4}\\-\\d{3}[\\dX]$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Replace all special characters except digits and X\r\n            value = value.replace(/[^0-9X]/gi, '');\r\n            var chars  = value.split(''),\r\n                length = chars.length,\r\n                sum    = 0;\r\n\r\n            if (chars[7] === 'X') {\r\n                chars[7] = 10;\r\n            }\r\n            for (var i = 0; i < length; i++) {\r\n                sum += parseInt(chars[i], 10) * (8 - i);\r\n            }\r\n            return (sum % 11 === 0);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.lessThan = $.extend($.fn.bootstrapValidator.i18n.lessThan || {}, {\r\n        'default': 'Please enter a value less than or equal to %s',\r\n        notInclusive: 'Please enter a value less than %s'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.lessThan = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            value: 'value',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var max = $field.attr('max');\r\n            if (max) {\r\n                return {\r\n                    value: max\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is less than or equal to given number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - value: The number used to compare to. It can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\r\n\r\n            value = parseFloat(value);\r\n            return (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value <= compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan['default'], compareTo)\r\n                    }\r\n                    : {\r\n                        valid: value < compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan.notInclusive, compareTo)\r\n                    };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.mac = $.extend($.fn.bootstrapValidator.i18n.mac || {}, {\r\n        'default': 'Please enter a valid MAC address'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.mac = {\r\n        /**\r\n         * Return true if the input value is a MAC address.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.notEmpty = $.extend($.fn.bootstrapValidator.i18n.notEmpty || {}, {\r\n        'default': 'Please enter a value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.notEmpty = {\r\n        enableByHtml5: function($field) {\r\n            var required = $field.attr('required') + '';\r\n            return ('required' === required || 'true' === required);\r\n        },\r\n\r\n        /**\r\n         * Check if input value is empty or not\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var type = $field.attr('type');\r\n            if ('radio' === type || 'checkbox' === type) {\r\n                return validator\r\n                            .getFieldElements($field.attr('data-bv-field'))\r\n                            .filter(':checked')\r\n                            .length > 0;\r\n            }\r\n\r\n            return $.trim($field.val()) !== '';\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.numeric = $.extend($.fn.bootstrapValidator.i18n.numeric || {}, {\r\n        'default': 'Please enter a valid float number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.numeric = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            decimal_separator: 'decimal_separator',\r\n            thousands_separator: 'thousands_separator'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('number' === $field.attr('type')) && ($field.attr('step') !== undefined) && ($field.attr('step') % 1 !== 0);\r\n        },\r\n\r\n        /**\r\n         * Validate decimal number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - decimal_separator: The decimal separator. Can be \".\" (default), \",\"\r\n         * - thousands_separator: The thousands separator. Can be \",\" (default), \"\"\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            console.log('---- NUMERIC ----');\r\n\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            console.log('-- 1');\r\n            var decimal_separator = options.decimal_separator || '*';\r\n            var thousands_separator = options.thousands_separator || '#';\r\n            console.log('-- 2');\r\n            console.log(value, thousands_separator, decimal_separator);\r\n            if (thousands_separator != '') {\r\n                value = value.replace(thousands_separator, '');\r\n            }\r\n            console.log('-- 3');\r\n            if (decimal_separator != '.') {\r\n                value = value.replace(decimal_separator, '.');\r\n            }\r\n\r\n\r\n            console.log('-- 4');\r\n            console.log(value, thousands_separator, decimal_separator);\r\n\r\n            console.log('-- 5');\r\n            console.log(parseFloat(value), !isNaN(parseFloat(value)), isFinite(value));\r\n\r\n            return false;// !isNaN(parseFloat(value)) && isFinite(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.phone = $.extend($.fn.bootstrapValidator.i18n.phone || {}, {\r\n        'default': 'Please enter a valid phone number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid phone number in %s',\r\n        countries: {\r\n            GB: 'United Kingdom',\r\n            US: 'USA'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.phone = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // The supported countries\r\n        COUNTRY_CODES: ['GB', 'US'],\r\n\r\n        /**\r\n         * Return true if the input value contains a valid phone number for the country\r\n         * selected in the options\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO-3166 country code. It can be\r\n         *      - A country code\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         *\r\n         * Currently it only supports United State (US) or United Kingdom (GB) countries\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                // Try to determine the country\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.phone.countryNotSupported, country)\r\n                };\r\n            }\r\n\r\n            var isValid = true;\r\n            switch (country.toUpperCase()) {\r\n            \tcase 'GB':\r\n            \t\t// http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format\r\n            \t\t// Test: http://regexr.com/38uhv\r\n            \t\tvalue   = $.trim(value);\r\n            \t\tisValid = (/^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/).test(value);\r\n                    break;\r\n\r\n                case 'US':\r\n                /* falls through */\r\n                default:\r\n                    // Make sure US phone numbers have 10 digits\r\n                    // May start with 1, +1, or 1-; should discard\r\n                    // Area code may be delimited with (), & sections may be delimited with . or -\r\n                    // Test: http://regexr.com/38mqi\r\n                    value   = value.replace(/\\D/g, '');\r\n                    isValid = (/^(?:(1\\-?)|(\\+1 ?))?\\(?(\\d{3})[\\)\\-\\.]?(\\d{3})[\\-\\.]?(\\d{4})$/).test(value) && (value.length === 10);\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.phone.country, $.fn.bootstrapValidator.i18n.phone.countries[country])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.regexp = $.extend($.fn.bootstrapValidator.i18n.regexp || {}, {\r\n        'default': 'Please enter a value matching the pattern'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.regexp = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            regexp: 'regexp'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var pattern = $field.attr('pattern');\r\n            if (pattern) {\r\n                return {\r\n                    regexp: pattern\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check if the element value matches given regular expression\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - regexp: The regular expression you need to check\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var regexp = ('string' === typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;\r\n            return regexp.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.remote = $.extend($.fn.bootstrapValidator.i18n.remote || {}, {\r\n        'default': 'Please enter a valid value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.remote = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            url: 'url',\r\n            name: 'name'\r\n        },\r\n\r\n        /**\r\n         * Request a remote server to check the input value\r\n         *\r\n         * @param {BootstrapValidator} validator Plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - url {String|Function}\r\n         * - type {String} [optional] Can be GET or POST (default)\r\n         * - data {Object|Function} [optional]: By default, it will take the value\r\n         *  {\r\n         *      <fieldName>: <fieldValue>\r\n         *  }\r\n         * - name {String} [optional]: Override the field name for the request.\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Deferred}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var name = $field.attr('data-bv-field'),\r\n                data = options.data || {},\r\n                url  = options.url,\r\n                type = options.type || 'POST';\r\n\r\n            // Support dynamic data\r\n            if ('function' === typeof data) {\r\n                data = data.call(this, validator);\r\n            }\r\n\r\n            // Support dynamic url\r\n            if ('function' === typeof url) {\r\n                url = url.call(this, validator);\r\n            }\r\n\r\n            data[options.name || name] = value;\r\n\r\n            var dfd = new $.Deferred();\r\n            var xhr = $.ajax({\r\n                type: type,\r\n                url: url,\r\n                dataType: 'json',\r\n                data: data\r\n            });\r\n            xhr.then(function(response) {\r\n                dfd.resolve($field, 'remote', response.valid === true || response.valid === 'true', response.message ? response.message : null);\r\n            });\r\n\r\n            dfd.fail(function() {\r\n                xhr.abort();\r\n            });\r\n\r\n            return dfd;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.rtn = $.extend($.fn.bootstrapValidator.i18n.rtn || {}, {\r\n        'default': 'Please enter a valid RTN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.rtn = {\r\n        /**\r\n         * Validate a RTN (Routing transit number)\r\n         * Examples:\r\n         * - Valid: 021200025, 789456124\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Routing_transit_number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^\\d{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum = 0;\r\n            for (var i = 0; i < value.length; i += 3) {\r\n                sum += parseInt(value.charAt(i),     10) * 3\r\n                    +  parseInt(value.charAt(i + 1), 10) * 7\r\n                    +  parseInt(value.charAt(i + 2), 10);\r\n            }\r\n            return (sum !== 0 && sum % 10 === 0);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.sedol = $.extend($.fn.bootstrapValidator.i18n.sedol || {}, {\r\n        'default': 'Please enter a valid SEDOL number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.sedol = {\r\n        /**\r\n         * Validate a SEDOL (Stock Exchange Daily Official List)\r\n         * Examples:\r\n         * - Valid: 0263494, B0WNLY7\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/SEDOL\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[0-9A-Z]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [1, 3, 1, 7, 3, 9, 1],\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n\t            sum += weight[i] * parseInt(value.charAt(i), 36);\r\n\t        }\r\n\t        sum = (10 - sum % 10) % 10;\r\n            return sum + '' === value.charAt(length - 1);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.siren = $.extend($.fn.bootstrapValidator.i18n.siren || {}, {\r\n        'default': 'Please enter a valid SIREN number'\r\n    });\r\n\r\n\t$.fn.bootstrapValidator.validators.siren = {\r\n\t\t/**\r\n\t\t * Check if a string is a siren number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n            if (!/^\\d{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.siret = $.extend($.fn.bootstrapValidator.i18n.siret || {}, {\r\n        'default': 'Please enter a valid SIRET number'\r\n    });\r\n\r\n\t$.fn.bootstrapValidator.validators.siret = {\r\n        /**\r\n         * Check if a string is a siret number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum    = 0,\r\n                length = value.length,\r\n                tmp;\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n                tmp = parseInt(value.charAt(i), 10);\r\n\t\t\t\tif ((i % 2) === 0) {\r\n\t\t\t\t\ttmp = tmp * 2;\r\n\t\t\t\t\tif (tmp > 9) {\r\n\t\t\t\t\t\ttmp -= 9;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsum += tmp;\r\n\t\t\t}\r\n\t\t\treturn (sum % 10 === 0);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.step = $.extend($.fn.bootstrapValidator.i18n.step || {}, {\r\n        'default': 'Please enter a valid step of %s'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.step = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            base: 'baseValue',\r\n            step: 'step'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is valid step one\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - baseValue: The base value\r\n         * - step: The step\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            options = $.extend({}, { baseValue: 0, step: 1 }, options);\r\n            value   = parseFloat(value);\r\n            if (!$.isNumeric(value)) {\r\n                return false;\r\n            }\r\n\r\n            var round = function(x, precision) {\r\n                    var m = Math.pow(10, precision);\r\n                    x = x * m;\r\n                    var sign   = (x > 0) | -(x < 0),\r\n                        isHalf = (x % 1 === 0.5 * sign);\r\n                    if (isHalf) {\r\n                        return (Math.floor(x) + (sign > 0)) / m;\r\n                    } else {\r\n                        return Math.round(x) / m;\r\n                    }\r\n                },\r\n                floatMod = function(x, y) {\r\n                    if (y === 0.0) {\r\n                        return 1.0;\r\n                    }\r\n                    var dotX      = (x + '').split('.'),\r\n                        dotY      = (y + '').split('.'),\r\n                        precision = ((dotX.length === 1) ? 0 : dotX[1].length) + ((dotY.length === 1) ? 0 : dotY[1].length);\r\n                    return round(x - y * Math.floor(x / y), precision);\r\n                };\r\n\r\n            var mod = floatMod(value - options.baseValue, options.step);\r\n            return {\r\n                valid: mod === 0.0 || mod === options.step,\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.step['default'], [options.step])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.stringCase = $.extend($.fn.bootstrapValidator.i18n.stringCase || {}, {\r\n        'default': 'Please enter only lowercase characters',\r\n        upper: 'Please enter only uppercase characters'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.stringCase = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            'case': 'case'\r\n        },\r\n\r\n        /**\r\n         * Check if a string is a lower or upper case one\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - case: Can be 'lower' (default) or 'upper'\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var stringCase = (options['case'] || 'lower').toLowerCase();\r\n            return {\r\n                valid: ('upper' === stringCase) ? value === value.toUpperCase() : value === value.toLowerCase(),\r\n                message: options.message || (('upper' === stringCase) ? $.fn.bootstrapValidator.i18n.stringCase.upper : $.fn.bootstrapValidator.i18n.stringCase['default'])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.stringLength = $.extend($.fn.bootstrapValidator.i18n.stringLength || {}, {\r\n        'default': 'Please enter a value with valid length',\r\n        less: 'Please enter less than %s characters',\r\n        more: 'Please enter more than %s characters',\r\n        between: 'Please enter value between %s and %s characters long'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.stringLength = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var maxLength = $field.attr('maxlength');\r\n            if (maxLength) {\r\n                return {\r\n                    max: parseInt(maxLength, 10)\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check if the length of element value is less or more than given number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of following keys:\r\n         * - min\r\n         * - max\r\n         * At least one of two keys is required\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - message: The invalid message\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var min     = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n                max     = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\r\n                length  = value.length,\r\n                isValid = true,\r\n                message = options.message || $.fn.bootstrapValidator.i18n.stringLength['default'];\r\n\r\n            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {\r\n                isValid = false;\r\n            }\r\n\r\n            switch (true) {\r\n                case (!!min && !!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                    break;\r\n\r\n                case (!!min):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.more, parseInt(min, 10));\r\n                    break;\r\n\r\n                case (!!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.less, parseInt(max, 10));\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return { valid: isValid, message: message };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.uri = $.extend($.fn.bootstrapValidator.i18n.uri || {}, {\r\n        'default': 'Please enter a valid URI'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.uri = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            allowlocal: 'allowLocal'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('url' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid URL\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options\r\n         * - message: The error message\r\n         * - allowLocal: Allow the private and local network IP. Default to false\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Credit to https://gist.github.com/dperini/729294\r\n            //\r\n            // Regular Expression for URL validation\r\n            //\r\n            // Author: Diego Perini\r\n            // Updated: 2010/12/05\r\n            //\r\n            // the regular expression composed & commented\r\n            // could be easily tweaked for RFC compliance,\r\n            // it was expressly modified to fit & satisfy\r\n            // these test for an URL shortener:\r\n            //\r\n            //   http://mathiasbynens.be/demo/url-regex\r\n            //\r\n            // Notes on possible differences from a standard/generic validation:\r\n            //\r\n            // - utf-8 char class take in consideration the full Unicode range\r\n            // - TLDs have been made mandatory so single names like \"localhost\" fails\r\n            // - protocols have been restricted to ftp, http and https only as requested\r\n            //\r\n            // Changes:\r\n            //\r\n            // - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255\r\n            //   first and last IP address of each class is considered invalid\r\n            //   (since they are broadcast/network addresses)\r\n            //\r\n            // - Added exclusion of private, reserved and/or local networks ranges\r\n            //\r\n            var allowLocal = options.allowLocal === true || options.allowLocal === 'true',\r\n                urlExp     = new RegExp(\r\n                    \"^\" +\r\n                    // protocol identifier\r\n                    \"(?:(?:https?|ftp)://)\" +\r\n                    // user:pass authentication\r\n                    \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n                    \"(?:\" +\r\n                    // IP address exclusion\r\n                    // private & local networks\r\n                    (allowLocal\r\n                        ? ''\r\n                        : (\"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n                           \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n                           \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\")) +\r\n                    // IP address dotted notation octets\r\n                    // excludes loopback network 0.0.0.0\r\n                    // excludes reserved space >= 224.0.0.0\r\n                    // excludes network & broadcast addresses\r\n                    // (first & last IP address of each class)\r\n                    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n                    \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n                    \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n                    \"|\" +\r\n                    // host name\r\n                    \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n                    // domain name\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n                    // TLD identifier\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n                    \")\" +\r\n                    // port number\r\n                    \"(?::\\\\d{2,5})?\" +\r\n                    // resource path\r\n                    \"(?:/[^\\\\s]*)?\" +\r\n                    \"$\", \"i\"\r\n                );\r\n\r\n            return urlExp.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.uuid = $.extend($.fn.bootstrapValidator.i18n.uuid || {}, {\r\n        'default': 'Please enter a valid UUID number',\r\n        version: 'Please enter a valid UUID version %s number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.uuid = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            version: 'version'\r\n        },\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid UUID string\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - version: Can be 3, 4, 5, null\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions\r\n            var patterns = {\r\n                    '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n                    '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n                    '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n                    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\r\n                },\r\n                version = options.version ? (options.version + '') : 'all';\r\n            return {\r\n                valid: (null === patterns[version]) ? true : patterns[version].test(value),\r\n                message: options.version\r\n                            ? $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.uuid.version, options.version)\r\n                            : (options.message || $.fn.bootstrapValidator.i18n.uuid['default'])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.vat = $.extend($.fn.bootstrapValidator.i18n.vat || {}, {\r\n        'default': 'Please enter a valid VAT number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid %s VAT number',\r\n        countries: {\r\n            AT: 'Austrian',\r\n            BE: 'Belgian',\r\n            BG: 'Bulgarian',\r\n            CH: 'Swiss',\r\n            CY: 'Cypriot',\r\n            CZ: 'Czech',\r\n            DE: 'German',\r\n            DK: 'Danish',\r\n            EE: 'Estonian',\r\n            ES: 'Spanish',\r\n            FI: 'Finnish',\r\n            FR: 'French',\r\n            GB: 'United Kingdom',\r\n            GR: 'Greek',\r\n            EL: 'Greek',\r\n            HU: 'Hungarian',\r\n            HR: 'Croatian',\r\n            IE: 'Irish',\r\n            IT: 'Italian',\r\n            LT: 'Lithuanian',\r\n            LU: 'Luxembourg',\r\n            LV: 'Latvian',\r\n            MT: 'Maltese',\r\n            NL: 'Dutch',\r\n            NO: 'Norwegian',\r\n            PL: 'Polish',\r\n            PT: 'Portuguese',\r\n            RO: 'Romanian',\r\n            RU: 'Russian',\r\n            RS: 'Serbian',\r\n            SE: 'Swedish',\r\n            SI: 'Slovenian',\r\n            SK: 'Slovak'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.vat = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // Supported country codes\r\n        COUNTRY_CODES: [\r\n            'AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'EL', 'HU', 'IE', 'IT',\r\n            'LV', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SK', 'SI', 'ES', 'SE', 'CH', 'GB'\r\n        ],\r\n\r\n        /**\r\n         * Validate an European VAT number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - One of country code defined in COUNTRY_CODES\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.vat.countryNotSupported, country)\r\n                };\r\n            }\r\n\r\n            var method  = ['_', country.toLowerCase()].join('');\r\n            return this[method](value)\r\n                ? true\r\n                : {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.vat.country, $.fn.bootstrapValidator.i18n.vat.countries[country.toUpperCase()])\r\n                };\r\n        },\r\n\r\n        // VAT validators\r\n\r\n        /**\r\n         * Validate Austrian VAT number\r\n         * Example:\r\n         * - Valid: ATU13585627\r\n         * - Invalid: ATU13585626\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _at: function(value) {\r\n            if (!/^ATU[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(3);\r\n            var sum    = 0,\r\n                weight = [1, 2, 1, 2, 1, 2, 1],\r\n                temp   = 0;\r\n\r\n            for (var i = 0; i < 7; i++) {\r\n                temp = parseInt(value.charAt(i), 10) * weight[i];\r\n                if (temp > 9) {\r\n                    temp = Math.floor(temp / 10) + temp % 10;\r\n                }\r\n                sum += temp;\r\n            }\r\n\r\n            sum = 10 - (sum + 4) % 10;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n\r\n            return (sum + '' === value.substr(7, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Belgian VAT number\r\n         * Example:\r\n         * - Valid: BE0428759497\r\n         * - Invalid: BE431150351\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _be: function(value) {\r\n            if (!/^BE[0]{0,1}[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            if (value.length === 9) {\r\n                value = '0' + value;\r\n            }\r\n\r\n            if (value.substr(1, 1) === '0') {\r\n                return false;\r\n            }\r\n\r\n            var sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);\r\n            return (sum % 97 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Bulgarian VAT number\r\n         * Example:\r\n         * - Valid: BG175074752,\r\n         * BG7523169263, BG8032056031,\r\n         * BG7542011030,\r\n         * BG7111042925\r\n         * - Invalid: BG175074753, BG7552A10004, BG7111042922\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _bg: function(value) {\r\n            if (!/^BG[0-9]{9,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum = 0, i = 0;\r\n\r\n            // Legal entities\r\n            if (value.length === 9) {\r\n                for (i = 0; i < 8; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (i + 1);\r\n                }\r\n                sum = sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                    for (i = 0; i < 8; i++) {\r\n                        sum += parseInt(value.charAt(i), 10) * (i + 3);\r\n                    }\r\n                }\r\n                sum = sum % 10;\r\n                return (sum + '' === value.substr(8));\r\n            }\r\n            // Physical persons, foreigners and others\r\n            else if (value.length === 10) {\r\n                // Validate Bulgarian national identification numbers\r\n                var egn = function(value) {\r\n                        // Check the birth date\r\n                        var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                            month = parseInt(value.substr(2, 2), 10),\r\n                            day   = parseInt(value.substr(4, 2), 10);\r\n                        if (month > 40) {\r\n                            year += 100;\r\n                            month -= 40;\r\n                        } else if (month > 20) {\r\n                            year -= 100;\r\n                            month -= 20;\r\n                        }\r\n\r\n                        if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                            return false;\r\n                        }\r\n\r\n                        var sum    = 0,\r\n                            weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = (sum % 11) % 10;\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    },\r\n                    // Validate Bulgarian personal number of a foreigner\r\n                    pnf = function(value) {\r\n                        var sum    = 0,\r\n                            weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = sum % 10;\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    },\r\n                    // Finally, consider it as a VAT number\r\n                    vat = function(value) {\r\n                        var sum    = 0,\r\n                            weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = 11 - sum % 11;\r\n                        if (sum === 10) {\r\n                            return false;\r\n                        }\r\n                        if (sum === 11) {\r\n                            sum = 0;\r\n                        }\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    };\r\n                return (egn(value) || pnf(value) || vat(value));\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate Swiss VAT number\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ch: function(value) {\r\n            if (!/^CHE[0-9]{9}(MWST)?$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(3);\r\n            var sum    = 0,\r\n                weight = [5, 4, 3, 2, 7, 6, 5, 4];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10) {\r\n                return false;\r\n            }\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            }\r\n\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Cypriot VAT number\r\n         * Examples:\r\n         * - Valid: CY10259033P\r\n         * - Invalid: CY10259033Z\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _cy: function(value) {\r\n            if (!/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n\r\n            // Do not allow to start with \"12\"\r\n            if (value.substr(0, 2) === '12') {\r\n                return false;\r\n            }\r\n\r\n            // Extract the next digit and multiply by the counter.\r\n            var sum         = 0,\r\n                translation = {\r\n                    '0': 1,  '1': 0,  '2': 5,  '3': 7,  '4': 9,\r\n                    '5': 13, '6': 15, '7': 17, '8': 19, '9': 21\r\n                };\r\n            for (var i = 0; i < 8; i++) {\r\n                var temp = parseInt(value.charAt(i), 10);\r\n                if (i % 2 === 0) {\r\n                    temp = translation[temp + ''];\r\n                }\r\n                sum += temp;\r\n            }\r\n\r\n            sum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Czech Republic VAT number\r\n         * Can be:\r\n         * i) Legal entities (8 digit numbers)\r\n         * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)\r\n         * iii) Individuals without a RC (9 digit numbers beginning with 6)\r\n         *\r\n         * Examples:\r\n         * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926\r\n         * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _cz: function(value) {\r\n            if (!/^CZ[0-9]{8,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n\r\n            var sum = 0,\r\n                i   = 0;\r\n            if (value.length === 8) {\r\n                // Do not allow to start with '9'\r\n                if (value.charAt(0) + '' === '9') {\r\n                    return false;\r\n                }\r\n\r\n                sum = 0;\r\n                for (i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum = 11 - sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                }\r\n                if (sum === 11) {\r\n                    sum = 1;\r\n                }\r\n\r\n                return (sum + '' === value.substr(7, 1));\r\n            } else if (value.length === 9 && (value.charAt(0) + '' === '6')) {\r\n                sum = 0;\r\n                // Skip the first (which is 6)\r\n                for (i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i + 1), 10) * (8 - i);\r\n                }\r\n                sum = 11 - sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                }\r\n                if (sum === 11) {\r\n                    sum = 1;\r\n                }\r\n                sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\r\n                return (sum + '' === value.substr(8, 1));\r\n            } else if (value.length === 9 || value.length === 10) {\r\n                // Validate Czech birth number (Rodné číslo), which is also national identifier\r\n                var year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n                    month = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n                    day   = parseInt(value.substr(4, 2), 10);\r\n                if (value.length === 9) {\r\n                    if (year >= 1980) {\r\n                        year -= 100;\r\n                    }\r\n                    if (year > 1953) {\r\n                        return false;\r\n                    }\r\n                } else if (year < 1954) {\r\n                    year += 100;\r\n                }\r\n\r\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n\r\n                // Check that the birth date is not in the future\r\n                if (value.length === 10) {\r\n                    var check = parseInt(value.substr(0, 9), 10) % 11;\r\n                    if (year < 1985) {\r\n                        check = check % 10;\r\n                    }\r\n                    return (check + '' === value.substr(9, 1));\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate German VAT number\r\n         * Examples:\r\n         * - Valid: DE136695976\r\n         * - Invalid: DE136695978\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _de: function(value) {\r\n            if (!/^DE[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Danish VAT number\r\n         * Example:\r\n         * - Valid: DK13585628\r\n         * - Invalid: DK13585627\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _dk: function(value) {\r\n            if (!/^DK[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [2, 7, 6, 5, 4, 3, 2, 1];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Estonian VAT number\r\n         * Examples:\r\n         * - Valid: EE100931558, EE100594102\r\n         * - Invalid: EE100594103\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ee: function(value) {\r\n            if (!/^EE[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\r\n\r\n            for (var i = 0; i < 9; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 10 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\r\n         * Can be:\r\n         * i) DNI (Documento nacional de identidad), for Spaniards\r\n         * ii) NIE (Número de Identificación de Extranjeros), for foreigners\r\n         * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\r\n         *\r\n         * Examples:\r\n         * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838\r\n         * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _es: function(value) {\r\n            if (!/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var dni = function(value) {\r\n                    var check = parseInt(value.substr(0, 8), 10);\r\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                    return (check + '' === value.substr(8, 1));\r\n                },\r\n                nie = function(value) {\r\n                    var check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');\r\n                    check = parseInt(check, 10);\r\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                    return (check + '' === value.substr(8, 1));\r\n                },\r\n                cif = function(value) {\r\n                    var first = value.charAt(0), check;\r\n                    if ('KLM'.indexOf(first) !== -1) {\r\n                        // K: Spanish younger than 14 year old\r\n                        // L: Spanish living outside Spain without DNI\r\n                        // M: Granted the tax to foreigners who have no NIE\r\n                        check = parseInt(value.substr(1, 8), 10);\r\n                        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                        return (check + '' === value.substr(8, 1));\r\n                    } else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {\r\n                        var sum    = 0,\r\n                            weight = [2, 1, 2, 1, 2, 1, 2],\r\n                            temp   = 0;\r\n\r\n                        for (var i = 0; i < 7; i++) {\r\n                            temp = parseInt(value.charAt(i + 1), 10) * weight[i];\r\n                            if (temp > 9) {\r\n                                temp = Math.floor(temp / 10) + temp % 10;\r\n                            }\r\n                            sum += temp;\r\n                        }\r\n                        sum = 10 - sum % 10;\r\n                        return (sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1));\r\n                    }\r\n\r\n                    return false;\r\n                };\r\n\r\n            var first = value.charAt(0);\r\n            if (/^[0-9]$/.test(first)) {\r\n                return dni(value);\r\n            } else if (/^[XYZ]$/.test(first)) {\r\n                return nie(value);\r\n            } else {\r\n                return cif(value);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Finnish VAT number\r\n         * Examples:\r\n         * - Valid: FI20774740\r\n         * - Invalid: FI20774741\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _fi: function(value) {\r\n            if (!/^FI[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [7, 9, 10, 5, 8, 4, 2, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\r\n         * It's constructed by a SIREN number, prefixed by two characters.\r\n         *\r\n         * Examples:\r\n         * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782\r\n         * - Invalid: FR84323140391\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _fr: function(value) {\r\n            if (!/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.luhn(value.substr(2))) {\r\n                return false;\r\n            }\r\n\r\n            if (/^[0-9]{2}$/.test(value.substr(0, 2))) {\r\n                // First two characters are digits\r\n                return value.substr(0, 2) === (parseInt(value.substr(2) + '12', 10) % 97 + '');\r\n            } else {\r\n                // The first characters cann't be O and I\r\n                var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',\r\n                    check;\r\n                // First one is digit\r\n                if (/^[0-9]{1}$/.test(value.charAt(0))) {\r\n                    check = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;\r\n                } else {\r\n                    check = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;\r\n                }\r\n                return ((parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11) === (check % 11);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate United Kingdom VAT number\r\n         * Example:\r\n         * - Valid: GB980780684\r\n         * - Invalid: GB802311781\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _gb: function(value) {\r\n            if (!/^GB[0-9]{9}$/.test(value)             /* Standard */\r\n                && !/^GB[0-9]{12}$/.test(value)         /* Branches */\r\n                && !/^GBGD[0-9]{3}$/.test(value)        /* Government department */\r\n                && !/^GBHA[0-9]{3}$/.test(value)        /* Health authority */\r\n                && !/^GB(GD|HA)8888[0-9]{5}$/.test(value))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var length = value.length;\r\n            if (length === 5) {\r\n                var firstTwo  = value.substr(0, 2),\r\n                    lastThree = parseInt(value.substr(2), 10);\r\n                return ('GD' === firstTwo && lastThree < 500) || ('HA' === firstTwo && lastThree >= 500);\r\n            } else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {\r\n                if (('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500)\r\n                    || ('HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500))\r\n                {\r\n                    return false;\r\n                }\r\n                return (parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10));\r\n            } else if (length === 9 || length === 12) {\r\n                var sum    = 0,\r\n                    weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\r\n                for (var i = 0; i < 9; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 97;\r\n\r\n                if (parseInt(value.substr(0, 3), 10) >= 100) {\r\n                    return (sum === 0 || sum === 42 || sum === 55);\r\n                } else {\r\n                    return (sum === 0);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Greek VAT number\r\n         * Examples:\r\n         * - Valid: GR023456780, EL094259216\r\n         * - Invalid: EL123456781\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _gr: function(value) {\r\n            if (!/^GR[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            if (value.length === 8) {\r\n                value = '0' + value;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [256, 128, 64, 32, 16, 8, 4, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum % 11) % 10;\r\n\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        // EL is traditionally prefix of Greek VAT numbers\r\n        _el: function(value) {\r\n            if (!/^EL[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = 'GR' + value.substr(2);\r\n            return this._gr(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Hungarian VAT number\r\n         * Examples:\r\n         * - Valid: HU12892312\r\n         * - Invalid: HU12892313\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _hu: function(value) {\r\n            if (!/^HU[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [9, 7, 3, 1, 9, 7, 3, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 10 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Croatian VAT number\r\n         * Examples:\r\n         * - Valid: HR33392005961\r\n         * - Invalid: HR33392005962\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _hr: function(value) {\r\n            if (!/^HR[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Irish VAT number\r\n         * Examples:\r\n         * - Valid: IE6433435F, IE6433435OA, IE8D79739I\r\n         * - Invalid: IE8D79738J\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ie: function(value) {\r\n            if (!/^IE[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var getCheckDigit = function(value) {\r\n                while (value.length < 7) {\r\n                    value = '0' + value;\r\n                }\r\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n                    sum      = 0;\r\n                for (var i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum += 9 * alphabet.indexOf(value.substr(7));\r\n                return alphabet[sum % 23];\r\n            };\r\n\r\n            // The first 7 characters are digits\r\n            if (/^[0-9]+$/.test(value.substr(0, 7))) {\r\n                // New system\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n            } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {\r\n                // Old system\r\n                return value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Italian VAT number, which consists of 11 digits.\r\n         * - First 7 digits are a company identifier\r\n         * - Next 3 are the province of residence\r\n         * - The last one is a check digit\r\n         *\r\n         * Examples:\r\n         * - Valid: IT00743110157\r\n         * - Invalid: IT00743110158\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _it: function(value) {\r\n            if (!/^IT[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            if (parseInt(value.substr(0, 7), 10) === 0) {\r\n                return false;\r\n            }\r\n\r\n            var lastThree = parseInt(value.substr(7, 3), 10);\r\n            if ((lastThree < 1) || (lastThree > 201) && lastThree !== 999 && lastThree !== 888) {\r\n                return false;\r\n            }\r\n\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Lithuanian VAT number\r\n         * It can be:\r\n         * - 9 digits, for legal entities\r\n         * - 12 digits, for temporarily registered taxpayers\r\n         *\r\n         * Examples:\r\n         * - Valid: LT119511515, LT100001919017, LT100004801610\r\n         * - Invalid: LT100001919018\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lt: function(value) {\r\n            if (!/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var length = value.length,\r\n                sum    = 0,\r\n                i;\r\n            for (i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * (1 + i % 9);\r\n            }\r\n            var check = sum % 11;\r\n            if (check === 10) {\r\n                sum = 0;\r\n                for (i = 0; i < length - 1; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);\r\n                }\r\n            }\r\n            check = check % 11 % 10;\r\n            return (check + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Luxembourg VAT number\r\n         * Examples:\r\n         * - Valid: LU15027442\r\n         * - Invalid: LU15027443\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lu: function(value) {\r\n            if (!/^LU[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            return ((parseInt(value.substr(0, 6), 10) % 89) + '' === value.substr(6, 2));\r\n        },\r\n\r\n        /**\r\n         * Validate Latvian VAT number\r\n         * Examples:\r\n         * - Valid: LV40003521600, LV16117519997\r\n         * - Invalid: LV40003521601, LV16137519997\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lv: function(value) {\r\n            if (!/^LV[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var first  = parseInt(value.charAt(0), 10),\r\n                sum    = 0,\r\n                weight = [],\r\n                i,\r\n                length = value.length;\r\n            if (first > 3) {\r\n                // Legal entity\r\n                sum    = 0;\r\n                weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\r\n                for (i = 0; i < length; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 11;\r\n                return (sum === 3);\r\n            } else {\r\n                // Check birth date\r\n                var day   = parseInt(value.substr(0, 2), 10),\r\n                    month = parseInt(value.substr(2, 2), 10),\r\n                    year  = parseInt(value.substr(4, 2), 10);\r\n                year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n\r\n                // Check personal code\r\n                sum    = 0;\r\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n                for (i = 0; i < length - 1; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = (sum + 1) % 11 % 10;\r\n                return (sum + '' === value.charAt(length - 1));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Maltese VAT number\r\n         * Examples:\r\n         * - Valid: MT11679112\r\n         * - Invalid: MT11679113\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _mt: function(value) {\r\n            if (!/^MT[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [3, 4, 6, 7, 8, 9, 10, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 37 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Dutch VAT number\r\n         * Examples:\r\n         * - Valid: NL004495445B01\r\n         * - Invalid: NL123456789B90\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _nl: function(value) {\r\n            if (!/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {\r\n               return false;\r\n            }\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = sum % 11;\r\n            if (sum > 9) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Norwegian VAT number\r\n         *\r\n         * @see http://www.brreg.no/english/coordination/number.html\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _no: function(value) {\r\n            if (!/^NO[0-9]{9}$/.test(value)) {\r\n               return false;\r\n            }\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Polish VAT number\r\n         * Examples:\r\n         * - Valid: PL8567346215\r\n         * - Invalid: PL8567346216\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _pl: function(value) {\r\n            if (!/^PL[0-9]{10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\r\n\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Portuguese VAT number\r\n         * Examples:\r\n         * - Valid: PT501964843\r\n         * - Invalid: PT501964842\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _pt: function(value) {\r\n            if (!/^PT[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum > 9) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Romanian VAT number\r\n         * Examples:\r\n         * - Valid: RO18547290\r\n         * - Invalid: RO18547291\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ro: function(value) {\r\n            if (!/^RO[1-9][0-9]{1,9}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.substr(2);\r\n\r\n            var length = value.length,\r\n                weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),\r\n                sum    = 0;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = (10 * sum) % 11 % 10;\r\n            return (sum + '' === value.substr(length - 1, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Russian VAT number (Taxpayer Identification Number - INN)\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ru: function(value) {\r\n            if (!/^RU([0-9]{9}|[0-9]{12})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var i = 0;\r\n            if (value.length === 10) {\r\n                var sum    = 0,\r\n                    weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n                for (i = 0; i < 10; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 11;\r\n                if (sum > 9) {\r\n                    sum = sum % 10;\r\n                }\r\n\r\n                return (sum + '' === value.substr(9, 1));\r\n            } else if (value.length === 12) {\r\n                var sum1    = 0,\r\n                    weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\r\n                    sum2    = 0,\r\n                    weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n\r\n                for (i = 0; i < 11; i++) {\r\n                    sum1 += parseInt(value.charAt(i), 10) * weight1[i];\r\n                    sum2 += parseInt(value.charAt(i), 10) * weight2[i];\r\n                }\r\n                sum1 = sum1 % 11;\r\n                if (sum1 > 9) {\r\n                    sum1 = sum1 % 10;\r\n                }\r\n                sum2 = sum2 % 11;\r\n                if (sum2 > 9) {\r\n                    sum2 = sum2 % 10;\r\n                }\r\n\r\n                return (sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1));\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate Serbian VAT number\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _rs: function(value) {\r\n            if (!/^RS[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum  = 10,\r\n                temp = 0;\r\n            for (var i = 0; i < 8; i++) {\r\n                temp = (parseInt(value.charAt(i), 10) + sum) % 10;\r\n                if (temp === 0) {\r\n                    temp = 10;\r\n                }\r\n                sum = (2 * temp) % 11;\r\n            }\r\n\r\n            return ((sum + parseInt(value.substr(8, 1), 10)) % 10 === 1);\r\n        },\r\n\r\n        /**\r\n         * Validate Swedish VAT number\r\n         * Examples:\r\n         * - Valid: SE123456789701\r\n         * - Invalid: SE123456789101\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _se: function(value) {\r\n            if (!/^SE[0-9]{10}01$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2, 10);\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Slovenian VAT number\r\n         * Examples:\r\n         * - Valid: SI50223054\r\n         * - Invalid: SI50223055\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _si: function(value) {\r\n            if (!/^SI[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [8, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 7; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(7, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Slovak VAT number\r\n         * Examples:\r\n         * - Valid: SK2022749619\r\n         * - Invalid: SK2022749618\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _sk: function(value) {\r\n            if (!/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            return (parseInt(value.substr(2), 10) % 11 === 0);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.vin = $.extend($.fn.bootstrapValidator.i18n.vin || {}, {\r\n        'default': 'Please enter a valid VIN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.vin = {\r\n        /**\r\n         * Validate an US VIN (Vehicle Identification Number)\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Don't accept I, O, Q characters\r\n            if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            var chars   = {\r\n                    A: 1,   B: 2,   C: 3,   D: 4,   E: 5,   F: 6,   G: 7,   H: 8,\r\n                    J: 1,   K: 2,   L: 3,   M: 4,   N: 5,           P: 7,           R: 9,\r\n                            S: 2,   T: 3,   U: 4,   V: 5,   W: 6,   X: 7,   Y: 8,   Z: 9,\r\n                    '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0\r\n                },\r\n                weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\r\n                sum     = 0,\r\n                length  = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                sum += chars[value.charAt(i) + ''] * weights[i];\r\n            }\r\n\r\n            var reminder = sum % 11;\r\n            if (reminder === 10) {\r\n                reminder = 'X';\r\n            }\r\n\r\n            return (reminder + '') === value.charAt(8);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n\n(function($) {\r\n    $.fn.bootstrapValidator.i18n.zipCode = $.extend($.fn.bootstrapValidator.i18n.zipCode || {}, {\r\n        'default': 'Please enter a valid zip code',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid %s',\r\n        countries: {\r\n            'CA': 'Canadian postal code',\r\n            'DK': 'Danish postal code',\r\n            'GB': 'United Kingdom postal code',\r\n            'IT': 'Italian postal code',\r\n            'NL': 'Dutch postal code',\r\n            'SE': 'Swiss postal code',\r\n            'SG': 'Singapore postal code',\r\n            'US': 'US zip code'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.zipCode = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        COUNTRY_CODES: ['CA', 'DK', 'GB', 'IT', 'NL', 'SE', 'SG', 'US'],\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid country zip code\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The country\r\n         *\r\n         * The country can be defined by:\r\n         * - An ISO 3166 country code\r\n         * Currently it supports the following countries:\r\n         *      - US (United States)\r\n         *      - CA (Canada)\r\n         *      - DK (Denmark)\r\n         *      - GB (United Kingdom)\r\n         *      - IT (Italy)\r\n         *      - NL (Netherlands)\r\n         *      - SE (Sweden)\r\n         *      - SG (Singapore)\r\n         *\r\n         * - Name of field which its value defines the country code\r\n         * - Name of callback function that returns the country code\r\n         * - A callback function that returns the country code\r\n         *\r\n         * callback: function(value, validator, $field) {\r\n         *      // value is the value of field\r\n         *      // validator is the BootstrapValidator instance\r\n         *      // $field is jQuery element representing the field\r\n         * }\r\n         *\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '' || !options.country) {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                // Try to determine the country\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                return { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.zipCode.countryNotSupported, country) };\r\n            }\r\n\r\n            var isValid = false;\r\n            country = country.toUpperCase();\r\n            switch (country) {\r\n                case 'CA':\r\n                    isValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);\r\n                    break;\r\n\r\n                case 'DK':\r\n                    isValid = /^(DK(-|\\s)?)?\\d{4}$/i.test(value);\r\n                    break;\r\n\r\n                case 'GB':\r\n                    isValid = this._gb(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy\r\n                case 'IT':\r\n                    isValid = /^(I-|IT-)?\\d{5}$/i.test(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands\r\n                case 'NL':\r\n                    isValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);\r\n                    break;\r\n\r\n                case 'SE':\r\n                    isValid = /^(S-)?\\d{3}\\s?\\d{2}$/i.test(value);\r\n                    break;\r\n\r\n                case 'SG':\r\n                    isValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\\d{4})$/i.test(value);\r\n                    break;\r\n\r\n                case 'US':\r\n                /* falls through */\r\n                default:\r\n                    isValid = /^\\d{4,5}([\\-]?\\d{4})?$/.test(value);\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.zipCode.country, $.fn.bootstrapValidator.i18n.zipCode.countries[country])\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Validate United Kingdom postcode\r\n         * Examples:\r\n         * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT\r\n         * - Special cases:\r\n         * AI-2640, ASCN 1ZZ, GIR 0AA\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom\r\n         * @param {String} value The postcode\r\n         * @returns {Boolean}\r\n         */\r\n        _gb: function(value) {\r\n            var firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX\r\n                secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ\r\n                thirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',\r\n                fourthChar = '[ABEHMNPRVWXY]',\r\n                fifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',\r\n                regexps    = [\r\n                    // AN NAA, ANN NAA, AAN NAA, AANN NAA format\r\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n                    // ANA NAA\r\n                    new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n                    // AANA NAA\r\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n\r\n                    new RegExp('^(BF1)(\\\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes\r\n                    /^(GIR)(\\s*)(0AA)$/i,                       // Special postcode GIR 0AA\r\n                    /^(BFPO)(\\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers\r\n                    /^(BFPO)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i,        // c/o BFPO numbers\r\n                    /^([A-Z]{4})(\\s*)(1ZZ)$/i,                  // Overseas Territories\r\n                    /^(AI-2640)$/i                              // Anguilla\r\n                ];\r\n            for (var i = 0; i < regexps.length; i++) {\r\n                if (regexps[i].test(value)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n"],"file":"bootstrap-validator.bundle.js","sourceRoot":"/source/"}